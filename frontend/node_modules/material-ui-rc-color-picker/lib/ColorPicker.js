'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _rcTrigger = require('rc-trigger');

var _rcTrigger2 = _interopRequireDefault(_rcTrigger);

var _Panel = require('./Panel');

var _Panel2 = _interopRequireDefault(_Panel);

var _placements = require('./placements');

var _placements2 = _interopRequireDefault(_placements);

var _color = require('./helpers/color');

var _color2 = _interopRequireDefault(_color);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function prevent(e) {
  e.preventDefault();
}

var ColorPicker = function (_React$Component) {
  _inherits(ColorPicker, _React$Component);

  function ColorPicker(props) {
    _classCallCheck(this, ColorPicker);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.componentWillReceiveProps = function (nextProps) {
      if (nextProps.color) {
        _this.setState({
          color: nextProps.color
        });
      }
      if (nextProps.alpha !== null && nextProps.alpha !== undefined) {
        _this.setState({
          alpha: nextProps.alpha
        });
      }
    };

    _this.onTriggerClick = function () {
      _this.setState({
        open: !_this.state.open
      });
    };

    _this.onChange = function (colors) {
      _this.setState(_extends({}, colors), function () {
        _this.props.onChange(_this.state);
      });
    };

    _this.onBlur = function () {
      _this.setOpen(false);
    };

    _this.onVisibleChange = function (open) {
      _this.setOpen(open);
    };

    _this.onPanelMount = function (panelDOMRef) {
      if (_this.state.open) {
        setTimeout(function () {
          panelDOMRef.focus();
        }, 1);
      }
    };

    _this.setOpen = function (open, callback) {
      if (_this.state.open !== open) {
        _this.setState({
          open: open
        }, function () {
          if (typeof callback === 'function') callback();
          var _this$props = _this.props,
              onOpen = _this$props.onOpen,
              onClose = _this$props.onClose;

          if (_this.state.open) {
            onOpen(_this.state);
          } else {
            onClose(_this.state);
          }
        });
      }
    };

    _this.getRootDOMNode = function () {
      return (0, _reactDom.findDOMNode)(_this);
    };

    var alpha = typeof props.alpha === 'undefined' ? props.defaultAlpha : Math.min(props.alpha, props.defaultAlpha);

    _this.state = {
      color: props.color || props.defaultColor,
      alpha: alpha,
      open: false
    };

    return _this;
  }

  ColorPicker.prototype.getTriggerDOMNode = function getTriggerDOMNode() {
    return (0, _reactDom.findDOMNode)(this.triggerInstance);
  };

  ColorPicker.prototype.getPickerElement = function getPickerElement() {
    return _react2['default'].createElement(_Panel2['default'], {
      onMount: this.onPanelMount,
      defaultColor: this.state.color,
      alpha: this.state.alpha,
      enableAlpha: this.props.enableAlpha,
      prefixCls: this.props.prefixCls + '-panel',
      onChange: this.onChange,
      onBlur: this.onBlur,
      mode: this.props.mode,
      className: this.props.className
    });
  };

  ColorPicker.prototype.open = function open(callback) {
    this.setOpen(true, callback);
  };

  ColorPicker.prototype.close = function close(callback) {
    this.setOpen(false, callback);
  };

  ColorPicker.prototype.focus = function focus() {
    if (!this.state.open) {
      (0, _reactDom.findDOMNode)(this).focus();
    }
  };

  ColorPicker.prototype.render = function render() {
    var props = this.props;
    var state = this.state;
    var classes = [props.prefixCls + '-wrap', props.className];
    if (state.open) {
      classes.push(props.prefixCls + '-open');
    }

    var children = props.children;

    var _RGB = new _color2['default'](this.state.color).RGB,
        r = _RGB[0],
        g = _RGB[1],
        b = _RGB[2];

    var RGBA = [r, g, b];

    RGBA.push(this.state.alpha / 100);

    if (children) {
      children = _react2['default'].cloneElement(children, {
        ref: this.saveTriggerRef,
        unselectable: 'unselectable',
        style: {
          backgroundColor: 'rgba(' + RGBA.join(',') + ')'
        },
        onClick: this.onTriggerClick,
        onMouseDown: prevent
      });
    }

    var prefixCls = props.prefixCls,
        placement = props.placement,
        style = props.style,
        getCalendarContainer = props.getCalendarContainer,
        align = props.align,
        animation = props.animation,
        disabled = props.disabled,
        transitionName = props.transitionName;


    return _react2['default'].createElement(
      'div',
      { className: classes.join(' ') },
      _react2['default'].createElement(
        _rcTrigger2['default'],
        {
          popup: this.getPickerElement(),
          popupAlign: align,
          builtinPlacements: _placements2['default'],
          popupPlacement: placement,
          action: disabled ? [] : ['click'],
          destroyPopupOnHide: true,
          getPopupContainer: getCalendarContainer,
          popupStyle: style,
          popupAnimation: animation,
          popupTransitionName: transitionName,
          popupVisible: state.open,
          onPopupVisibleChange: this.onVisibleChange,
          prefixCls: prefixCls },
        children
      )
    );
  };

  return ColorPicker;
}(_react2['default'].Component);

exports['default'] = ColorPicker;


ColorPicker.propTypes = {
  defaultColor: _propTypes2['default'].string,
  defaultAlpha: _propTypes2['default'].number,
  // can custom
  alpha: _propTypes2['default'].number,
  children: _propTypes2['default'].node,
  className: _propTypes2['default'].string,
  color: _propTypes2['default'].string,
  enableAlpha: _propTypes2['default'].bool,
  mode: _propTypes2['default'].oneOf(['RGB', 'HSL', 'HSB']),
  onChange: _propTypes2['default'].func,
  onClose: _propTypes2['default'].func,
  onOpen: _propTypes2['default'].func,
  placement: _propTypes2['default'].oneOf(['topLeft', 'topRight', 'bottomLeft', 'bottomRight']),
  prefixCls: _propTypes2['default'].string,
  style: _propTypes2['default'].object
};

ColorPicker.defaultProps = {
  defaultColor: '#F00',
  defaultAlpha: 100,
  onChange: function onChange() {},
  onOpen: function onOpen() {},
  onClose: function onClose() {},

  children: _react2['default'].createElement('span', { className: 'material-ui-rc-color-picker-trigger' }),
  className: '',
  enableAlpha: true,
  placement: 'topLeft',
  prefixCls: 'material-ui-rc-color-picker',
  style: {}
};
module.exports = exports['default'];