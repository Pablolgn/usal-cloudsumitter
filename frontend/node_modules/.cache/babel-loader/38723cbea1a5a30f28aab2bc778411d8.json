{"ast":null,"code":"var _jsxFileName = \"/home/pablo/go/src/gitlab.com/Pablolgn/usal-cloudsubmitter/frontend/src/components/Preview.js\";\nimport * as THREE from \"three\";\nimport React from 'react';\n\nfunction Preview() {\n  const {\n    useRef,\n    useEffect\n  } = React;\n  const mount = useRef(null);\n  useEffect(() => {\n    let width = mount.current.clientWidth;\n    let height = mount.current.clientHeight;\n    let frameId;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    const material = new THREE.MeshBasicMaterial({\n      color: 0xff00ff\n    });\n    const cube = new THREE.Mesh(geometry, material);\n    camera.position.z = 4;\n    scene.add(cube);\n    renderer.setClearColor('#000000');\n    renderer.setSize(width, height);\n\n    const renderScene = () => {\n      renderer.render(scene, camera);\n    };\n\n    const handleResize = () => {\n      width = mount.current.clientWidth;\n      height = mount.current.clientHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderScene();\n    };\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"Preview\",\n    ref: mount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  });\n}\n\nexport default Preview;","map":{"version":3,"sources":["/home/pablo/go/src/gitlab.com/Pablolgn/usal-cloudsubmitter/frontend/src/components/Preview.js"],"names":["THREE","React","Preview","useRef","useEffect","mount","width","current","clientWidth","height","clientHeight","frameId","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","antialias","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","position","z","add","setClearColor","setSize","renderScene","render","handleResize","aspect","updateProjectionMatrix"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,OAAT,GAAkB;AAChB,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAuBH,KAA7B;AACA,QAAMI,KAAK,GAAGF,MAAM,CAAC,IAAD,CAApB;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIE,KAAK,GAAGD,KAAK,CAACE,OAAN,CAAcC,WAA1B;AACA,QAAIC,MAAM,GAAGJ,KAAK,CAACE,OAAN,CAAcG,YAA3B;AACA,QAAIC,OAAJ;AAEA,UAAMC,KAAK,GAAG,IAAIZ,KAAK,CAACa,KAAV,EAAd;AACA,UAAMC,MAAM,GAAG,IAAId,KAAK,CAACe,iBAAV,CAA4B,EAA5B,EAAgCT,KAAK,GAAGG,MAAxC,EAAgD,GAAhD,EAAqD,IAArD,CAAf;AACA,UAAMO,QAAQ,GAAG,IAAIhB,KAAK,CAACiB,aAAV,CAAwB;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAxB,CAAjB;AACA,UAAMC,QAAQ,GAAG,IAAInB,KAAK,CAACoB,WAAV,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CAAjB;AACA,UAAMC,QAAQ,GAAG,IAAIrB,KAAK,CAACsB,iBAAV,CAA4B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA5B,CAAjB;AACA,UAAMC,IAAI,GAAG,IAAIxB,KAAK,CAACyB,IAAV,CAAeN,QAAf,EAAyBE,QAAzB,CAAb;AAEAP,IAAAA,MAAM,CAACY,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;AACAf,IAAAA,KAAK,CAACgB,GAAN,CAAUJ,IAAV;AACAR,IAAAA,QAAQ,CAACa,aAAT,CAAuB,SAAvB;AACAb,IAAAA,QAAQ,CAACc,OAAT,CAAiBxB,KAAjB,EAAwBG,MAAxB;;AAEA,UAAMsB,WAAW,GAAG,MAAM;AACxBf,MAAAA,QAAQ,CAACgB,MAAT,CAAgBpB,KAAhB,EAAuBE,MAAvB;AACD,KAFD;;AAIA,UAAMmB,YAAY,GAAG,MAAM;AACzB3B,MAAAA,KAAK,GAAGD,KAAK,CAACE,OAAN,CAAcC,WAAtB;AACAC,MAAAA,MAAM,GAAGJ,KAAK,CAACE,OAAN,CAAcG,YAAvB;AACAM,MAAAA,QAAQ,CAACc,OAAT,CAAiBxB,KAAjB,EAAwBG,MAAxB;AACAK,MAAAA,MAAM,CAACoB,MAAP,GAAgB5B,KAAK,GAAGG,MAAxB;AACAK,MAAAA,MAAM,CAACqB,sBAAP;AACAJ,MAAAA,WAAW;AACZ,KAPD;AAQD,GA7BQ,EA6BN,EA7BM,CAAT;AA+BA,SAAO;AAAK,IAAA,SAAS,EAAC,SAAf;AAAyB,IAAA,GAAG,EAAE1B,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD;;AAED,eAAeH,OAAf","sourcesContent":["import * as THREE from \"three\";\nimport React from 'react';\n\nfunction Preview(){\n  const { useRef, useEffect} = React\n  const mount = useRef(null)\n\n  \n  useEffect(() => {\n    let width = mount.current.clientWidth\n    let height = mount.current.clientHeight\n    let frameId\n\n    const scene = new THREE.Scene()\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000)\n    const renderer = new THREE.WebGLRenderer({ antialias: true })\n    const geometry = new THREE.BoxGeometry(1, 1, 1)\n    const material = new THREE.MeshBasicMaterial({ color: 0xff00ff })\n    const cube = new THREE.Mesh(geometry, material)\n\n    camera.position.z = 4\n    scene.add(cube)\n    renderer.setClearColor('#000000')\n    renderer.setSize(width, height)\n\n    const renderScene = () => {\n      renderer.render(scene, camera)\n    }\n\n    const handleResize = () => {\n      width = mount.current.clientWidth\n      height = mount.current.clientHeight\n      renderer.setSize(width, height)\n      camera.aspect = width / height\n      camera.updateProjectionMatrix()\n      renderScene()\n    }\n  }, [])\n\n  return <div className=\"Preview\" ref={mount} />\n}\n\nexport default Preview\n"]},"metadata":{},"sourceType":"module"}