{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPropertyApplier = void 0;\n\nconst getPropertyApplier = (videoElement, streamRangeHelper, textTrackManager, audioTrackManager, bitrateManager) => playbackProps => {\n  if ('isPaused' in playbackProps) {\n    if (playbackProps.isPaused) {\n      videoElement.pause();\n    } else {\n      videoElement.play();\n    }\n  }\n\n  if (playbackProps.volume != null) {\n    videoElement.volume = playbackProps.volume;\n  }\n\n  if (playbackProps.isMuted != null) {\n    videoElement.muted = playbackProps.isMuted;\n  }\n\n  if (playbackProps.position != null) {\n    streamRangeHelper.setPosition(playbackProps.position);\n  }\n\n  if (playbackProps.isAtLiveEdge) {\n    streamRangeHelper.gotoLive();\n  }\n\n  if (textTrackManager && 'selectedTextTrack' in playbackProps) {\n    textTrackManager.handleSelectedTextTrackChange(playbackProps.selectedTextTrack);\n  }\n\n  if (audioTrackManager && playbackProps.selectedAudioTrack) {\n    audioTrackManager.handleSelectedAudioTrackChange(playbackProps.selectedAudioTrack);\n  }\n\n  if (bitrateManager) {\n    if (playbackProps.bitrateFix !== undefined) {\n      // $FlowFixMe undefined is OK.\n      bitrateManager.fixBitrate(playbackProps.bitrateFix);\n    }\n\n    if (playbackProps.bitrateCap !== undefined) {\n      // $FlowFixMe undefined is OK.\n      bitrateManager.capBitrate(playbackProps.bitrateCap);\n    }\n  } // $FlowFixMe: Type defs not up-to-date.\n\n\n  if ('isPipActive' in playbackProps) {\n    if (playbackProps.isPipActive) {\n      // $FlowFixMe\n      if (typeof videoElement.requestPictureInPicture === 'function') {\n        videoElement.requestPictureInPicture(); // $FlowFixMe\n      } else if (typeof videoElement.webkitSetPresentationMode === 'function') {\n        videoElement.webkitSetPresentationMode('picture-in-picture');\n      } // $FlowFixMe\n\n    } else if (document.pictureInPictureElement === videoElement) {\n      // $FlowFixMe\n      document.exitPictureInPicture(); // $FlowFixMe\n    } else if (videoElement.webkitPresentationMode === 'picture-in-picture') {\n      // $FlowFixMe\n      videoElement.webkitSetPresentationMode('inline');\n    }\n  } // $FlowFixMe: Type defs not up-to-date.\n\n\n  if (playbackProps.isAirPlayTargetPickerVisible && typeof videoElement.webkitShowPlaybackTargetPicker === 'function') {\n    videoElement.webkitShowPlaybackTargetPicker();\n  }\n};\n\nexports.getPropertyApplier = getPropertyApplier;","map":{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/common/propertyApplier.js"],"names":["getPropertyApplier","playbackProps","videoElement","streamRangeHelper","textTrackManager","audioTrackManager","bitrateManager","document"],"mappings":";;;;;;;AAIO,MAAMA,kBAAkB,GAAG,CAAA,YAAA,EAAA,iBAAA,EAAA,gBAAA,EAAA,iBAAA,EAAA,cAAA,KAM5BC,aAAD,IAAkC;AACrC,MAAI,cAAJ,aAAA,EAAiC;AAC/B,QAAIA,aAAa,CAAjB,QAAA,EAA4B;AAC1BC,MAAAA,YAAY,CAAZA,KAAAA;AADF,KAAA,MAEO;AACLA,MAAAA,YAAY,CAAZA,IAAAA;AACD;AACF;;AACD,MAAID,aAAa,CAAbA,MAAAA,IAAJ,IAAA,EAAkC;AAChCC,IAAAA,YAAY,CAAZA,MAAAA,GAAsBD,aAAa,CAAnCC,MAAAA;AACD;;AACD,MAAID,aAAa,CAAbA,OAAAA,IAAJ,IAAA,EAAmC;AACjCC,IAAAA,YAAY,CAAZA,KAAAA,GAAqBD,aAAa,CAAlCC,OAAAA;AACD;;AACD,MAAID,aAAa,CAAbA,QAAAA,IAAJ,IAAA,EAAoC;AAClCE,IAAAA,iBAAiB,CAAjBA,WAAAA,CAA8BF,aAAa,CAA3CE,QAAAA;AACD;;AACD,MAAIF,aAAa,CAAjB,YAAA,EAAgC;AAC9BE,IAAAA,iBAAiB,CAAjBA,QAAAA;AACD;;AACD,MAAIC,gBAAgB,IAAI,uBAAxB,aAAA,EAA8D;AAC5DA,IAAAA,gBAAgB,CAAhBA,6BAAAA,CAA+CH,aAAa,CAA5DG,iBAAAA;AACD;;AACD,MAAIC,iBAAiB,IAAIJ,aAAa,CAAtC,kBAAA,EAA2D;AACzDI,IAAAA,iBAAiB,CAAjBA,8BAAAA,CAAiDJ,aAAa,CAA9DI,kBAAAA;AACD;;AACD,MAAA,cAAA,EAAoB;AAClB,QAAIJ,aAAa,CAAbA,UAAAA,KAAJ,SAAA,EAA4C;AAC1C;AACAK,MAAAA,cAAc,CAAdA,UAAAA,CAA0BL,aAAa,CAAvCK,UAAAA;AACD;;AACD,QAAIL,aAAa,CAAbA,UAAAA,KAAJ,SAAA,EAA4C;AAC1C;AACAK,MAAAA,cAAc,CAAdA,UAAAA,CAA0BL,aAAa,CAAvCK,UAAAA;AACD;AAlCkC,GAAA,CAoCrC;;;AACA,MAAI,iBAAJ,aAAA,EAAoC;AAClC,QAAIL,aAAa,CAAjB,WAAA,EAA+B;AAC7B;AACA,UAAI,OAAOC,YAAY,CAAnB,uBAAA,KAAJ,UAAA,EAAgE;AAC9DA,QAAAA,YAAY,CADkD,uBAC9DA,GAD8D,CAE9D;AAFF,OAAA,MAGO,IAAI,OAAOA,YAAY,CAAnB,yBAAA,KAAJ,UAAA,EAAkE;AACvEA,QAAAA,YAAY,CAAZA,yBAAAA,CAAAA,oBAAAA;AAN2B,OAAA,CAQ7B;;AARF,KAAA,MASO,IAAIK,QAAQ,CAARA,uBAAAA,KAAJ,YAAA,EAAuD;AAC5D;AACAA,MAAAA,QAAQ,CAFoD,oBAE5DA,GAF4D,CAG5D;AAHK,KAAA,MAIA,IAAIL,YAAY,CAAZA,sBAAAA,KAAJ,oBAAA,EAAkE;AACvE;AACAA,MAAAA,YAAY,CAAZA,yBAAAA,CAAAA,QAAAA;AACD;AAtDkC,GAAA,CAwDrC;;;AACA,MAAID,aAAa,CAAbA,4BAAAA,IAA8C,OAAOC,YAAY,CAAnB,8BAAA,KAAlD,UAAA,EAAqH;AACnHA,IAAAA,YAAY,CAAZA,8BAAAA;AACD;AAjEI,CAAA","sourcesContent":["// @flow\nimport type { PlaybackProps } from '../types';\nimport type { AudioTrackManager, BitrateManager, StreamRangeHelper, TextTrackManager } from './types';\n\nexport const getPropertyApplier = (\n  videoElement: HTMLVideoElement, // Abstract this away?\n  streamRangeHelper: StreamRangeHelper,\n  textTrackManager?: TextTrackManager,\n  audioTrackManager?: AudioTrackManager,\n  bitrateManager?: ?BitrateManager\n) => (playbackProps: PlaybackProps) => {\n  if ('isPaused' in playbackProps) {\n    if (playbackProps.isPaused) {\n      videoElement.pause();\n    } else {\n      videoElement.play();\n    }\n  }\n  if (playbackProps.volume != null) {\n    videoElement.volume = playbackProps.volume;\n  }\n  if (playbackProps.isMuted != null) {\n    videoElement.muted = playbackProps.isMuted;\n  }\n  if (playbackProps.position != null) {\n    streamRangeHelper.setPosition(playbackProps.position);\n  }\n  if (playbackProps.isAtLiveEdge) {\n    streamRangeHelper.gotoLive();\n  }\n  if (textTrackManager && 'selectedTextTrack' in playbackProps) {\n    textTrackManager.handleSelectedTextTrackChange(playbackProps.selectedTextTrack);\n  }\n  if (audioTrackManager && playbackProps.selectedAudioTrack) {\n    audioTrackManager.handleSelectedAudioTrackChange(playbackProps.selectedAudioTrack);\n  }\n  if (bitrateManager) {\n    if (playbackProps.bitrateFix !== undefined) {\n      // $FlowFixMe undefined is OK.\n      bitrateManager.fixBitrate(playbackProps.bitrateFix);\n    }\n    if (playbackProps.bitrateCap !== undefined) {\n      // $FlowFixMe undefined is OK.\n      bitrateManager.capBitrate(playbackProps.bitrateCap);\n    }\n  }\n  // $FlowFixMe: Type defs not up-to-date.\n  if ('isPipActive' in playbackProps) {\n    if (playbackProps.isPipActive) {\n      // $FlowFixMe\n      if (typeof videoElement.requestPictureInPicture === 'function') {\n        videoElement.requestPictureInPicture();\n        // $FlowFixMe\n      } else if (typeof videoElement.webkitSetPresentationMode === 'function') {\n        videoElement.webkitSetPresentationMode('picture-in-picture');\n      }\n      // $FlowFixMe\n    } else if (document.pictureInPictureElement === videoElement) {\n      // $FlowFixMe\n      document.exitPictureInPicture();\n      // $FlowFixMe\n    } else if (videoElement.webkitPresentationMode === 'picture-in-picture') {\n      // $FlowFixMe\n      videoElement.webkitSetPresentationMode('inline');\n    }\n  }\n  // $FlowFixMe: Type defs not up-to-date.\n  if (playbackProps.isAirPlayTargetPickerVisible && typeof videoElement.webkitShowPlaybackTargetPicker === 'function') {\n    videoElement.webkitShowPlaybackTargetPicker();\n  }\n};\n"]},"metadata":{},"sourceType":"script"}