{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _Button = _interopRequireDefault(require(\"../../generic/Button/Button\"));\n\nvar _common = require(\"../../common\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst className = 'skip-button';\n\nclass SkipButton extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleClick\", () => {\n      const setProperties = this.props.setProperties;\n\n      if (setProperties) {\n        const currentPosition = typeof this.props.inspect === 'function' ? this.props.inspect().position : this.props.position;\n        const position = currentPosition + this.props.offset;\n\n        if (!isNaN(position)) {\n          setProperties({\n            position\n          });\n        }\n      }\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          content = _this$props.content,\n          label = _this$props.label,\n          classNamePrefix = _this$props.classNamePrefix;\n    return /*#__PURE__*/React.createElement(_Button.default, {\n      classNamePrefix: classNamePrefix,\n      className: className,\n      label: label,\n      onClick: this.handleClick,\n      content: content\n    });\n  }\n\n}\n\n_defineProperty(SkipButton, \"defaultProps\", {\n  classNamePrefix: _common.defaultClassNamePrefix,\n  offset: -30\n});\n\nSkipButton.displayName = 'SkipButton';\nvar _default = SkipButton;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/replay/components/controls/SkipButton/SkipButton.js"],"names":["className","SkipButton","React","classNamePrefix","defaultClassNamePrefix","offset","setProperties","currentPosition","position","isNaN","render","content","label"],"mappings":";;;;;;;AACA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,6BAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,MAAMA,SAAS,GAAf,aAAA;;AAEA,MAAA,UAAA,SAAyBE,KAAK,CAA9B,SAAA,CAAgD;AAAA,EAAA,WAAA,CAAA,GAAA,IAAA,EAAA;AAAA,UAAA,GAAA,IAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EAMhC,MAAM;AAClB,YAAMI,aAAa,GAAG,KAAA,KAAA,CAAtB,aAAA;;AACA,UAAA,aAAA,EAAmB;AACjB,cAAMC,eAAe,GACnB,OAAO,KAAA,KAAA,CAAP,OAAA,KAAA,UAAA,GAA2C,KAAA,KAAA,CAAA,OAAA,GAA3C,QAAA,GAA2E,KAAA,KAAA,CAD7E,QAAA;AAEA,cAAMC,QAAQ,GAAGD,eAAe,GAAG,KAAA,KAAA,CAAnC,MAAA;;AACA,YAAI,CAACE,KAAK,CAAV,QAAU,CAAV,EAAsB;AACpBH,UAAAA,aAAa,CAAC;AAAEE,YAAAA;AAAF,WAAD,CAAbF;AACD;AACF;AAf2C,KAAA,CAAA;AAAA;;AAkB9CI,EAAAA,MAAM,GAAG;AAAA,UAAA,WAAA,GACqC,KADrC,KAAA;AAAA,UACCC,OADD,GAAA,WAAA,CAAA,OAAA;AAAA,UACUC,KADV,GAAA,WAAA,CAAA,KAAA;AAAA,UACiBT,eADjB,GAAA,WAAA,CAAA,eAAA;AAEP,WAAA,aACE,KAAA,CAAA,aAAA,CAAC,OAAA,CAAD,OAAA,EAAA;AACE,MAAA,eAAe,EADjB,eAAA;AAEE,MAAA,SAAS,EAFX,SAAA;AAGE,MAAA,KAAK,EAHP,KAAA;AAIE,MAAA,OAAO,EAAE,KAJX,WAAA;AAKE,MAAA,OAAO,EAAEQ;AALX,KAAA,CADF;AASD;;AA7B6C;;gBAA1CV,U,kBACkB;AACpBE,EAAAA,eAAe,EAAEC,OAAAA,CADG,sBAAA;AAEpBC,EAAAA,MAAM,EAAE,CAAC;AAFW,C;;AA+BxBJ,UAAU,CAAVA,WAAAA,GAAAA,YAAAA;eACeA,U","sourcesContent":["// @flow\nimport * as React from 'react';\nimport Button from '../../generic/Button/Button';\nimport { defaultClassNamePrefix } from '../../common';\nimport type { CommonProps } from '../../common';\nimport type { InspectMethod } from '../../player/PlayerController/ControllerContext';\n\ntype Props = CommonProps & {\n  /** The position from which the skipped position is computed. Not recommended to set this, but rather provide inspect(). */\n  position?: number,\n  /** Configures the offset that will be added to the current position when clicking the button. Negative values mean skipping backward. */\n  offset: number,\n  /** Button content, e.g. icon. */\n  content: React.Node,\n  /** ⇘︎ A callback returning the current video stream state with a position property when invoked. Invoked on clicking the button, and the position property is used for computing the new position. */\n  inspect?: InspectMethod,\n  /** ⇗ When the button is clicked, this callback is invoked with an object having a position property with the computed new position based on the skip offset. */\n  setProperties?: ({ position: number }) => void\n};\n\nconst className = 'skip-button';\n\nclass SkipButton extends React.Component<Props> {\n  static defaultProps = {\n    classNamePrefix: defaultClassNamePrefix,\n    offset: -30\n  };\n\n  handleClick = () => {\n    const setProperties = this.props.setProperties;\n    if (setProperties) {\n      const currentPosition =\n        typeof this.props.inspect === 'function' ? this.props.inspect().position : this.props.position;\n      const position = currentPosition + this.props.offset;\n      if (!isNaN(position)) {\n        setProperties({ position });\n      }\n    }\n  };\n\n  render() {\n    const { content, label, classNamePrefix } = this.props;\n    return (\n      <Button\n        classNamePrefix={classNamePrefix}\n        className={className}\n        label={label}\n        onClick={this.handleClick}\n        content={content}\n      />\n    );\n  }\n}\n\nSkipButton.displayName = 'SkipButton';\nexport default SkipButton;\n"]},"metadata":{},"sourceType":"script"}