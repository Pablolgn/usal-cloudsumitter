{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst getDelaySeconds = configuration => configuration && configuration.interactionDetector && configuration.interactionDetector.inactivityDelay != null ? configuration.interactionDetector.inactivityDelay : 0;\n\nclass InteractionDetector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"isFixed\", false);\n\n    _defineProperty(this, \"intervalId\", void 0);\n\n    _defineProperty(this, \"inactivityTimeoutId\", void 0);\n\n    _defineProperty(this, \"flags\", {\n      isMouseMoved: true,\n      isTouched: false,\n      isTouching: false,\n      isEntered: false,\n      clientX: -1,\n      clientY: -1\n    });\n\n    _defineProperty(this, \"handleMouseMove\", evt => {\n      if (evt.clientX !== this.flags.clientX || evt.clientY !== this.flags.clientY) {\n        this.flags.isMouseMoved = true;\n        this.flags.clientX = evt.clientX;\n        this.flags.clientY = evt.clientY;\n      }\n    });\n\n    _defineProperty(this, \"handleTouchStart\", () => {\n      this.flags.isTouched = true;\n      this.flags.isTouching = true;\n    });\n\n    _defineProperty(this, \"handleTouchEnd\", () => {\n      this.flags.isTouching = false;\n    });\n\n    _defineProperty(this, \"nudge\", () => {\n      this.flags.isMouseMoved = true;\n    });\n\n    _defineProperty(this, \"toggleFixedUserActive\", () => {\n      this.isFixed = !this.isFixed;\n\n      if (this.isFixed) {\n        this.flags.isMouseMoved = true;\n      } else {\n        this.setState({\n          isUserActive: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleFocus\", focusEvent => {\n      if (focusEvent.target === focusEvent.currentTarget) {\n        this.nudge();\n      }\n    });\n\n    _defineProperty(this, \"setInactive\", () => {\n      if (!(this.isFixed || this.flags.isMouseMoved)) {\n        this.setState({\n          isUserActive: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"updateActivity\", () => {\n      if (this.flags.isMouseMoved || this.flags.isTouched || this.flags.isTouching) {\n        this.flags.isTouched = false;\n        this.flags.isMouseMoved = false;\n\n        if (!this.state.isUserActive) {\n          this.setState({\n            isUserActive: true\n          });\n        }\n\n        clearTimeout(this.inactivityTimeoutId);\n        this.inactivityTimeoutId = setTimeout(this.setInactive, getDelaySeconds(this.props.configuration) * 1000);\n      }\n    });\n\n    this.state = {\n      isUserActive: true\n    };\n  }\n\n  componentDidMount() {\n    const delaySeconds = getDelaySeconds(this.props.configuration);\n\n    if (delaySeconds >= 0) {\n      // Negative values deactivate\n      this.intervalId = setInterval(this.updateActivity, 250); // This interval is not the inactivity delay.\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const delaySeconds = getDelaySeconds(this.props.configuration);\n\n    if (delaySeconds !== getDelaySeconds(prevProps.configuration)) {\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n      }\n\n      if (delaySeconds >= 0) {\n        // Negative values deactivate\n        this.intervalId = setInterval(this.updateActivity, 250); // This interval is not the inactivity delay.\n      } else {\n        this.setState({\n          isUserActive: true\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n\n    if (this.inactivityTimeoutId) {\n      clearTimeout(this.inactivityTimeoutId);\n    }\n  }\n\n  render() {\n    const isUserActive = this.state.isUserActive;\n    const render = this.props.render;\n    const handleMouseMove = this.handleMouseMove,\n          handleTouchStart = this.handleTouchStart,\n          handleTouchEnd = this.handleTouchEnd,\n          handleFocus = this.handleFocus,\n          toggleFixedUserActive = this.toggleFixedUserActive,\n          nudge = this.nudge;\n    return render({\n      isUserActive,\n      handleMouseMove,\n      handleTouchStart,\n      handleTouchEnd,\n      handleFocus,\n      toggleFixedUserActive: toggleFixedUserActive,\n      nudge\n    });\n  }\n\n}\n\nvar _default = InteractionDetector;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/replay/components/player/containment-helpers/InteractionDetector.js"],"names":["getDelaySeconds","configuration","React","constructor","isUserActive","isMouseMoved","isTouched","isTouching","isEntered","clientX","clientY","componentDidMount","delaySeconds","setInterval","componentDidUpdate","prevProps","clearInterval","componentWillUnmount","clearTimeout","evt","focusEvent","setTimeout","render","handleMouseMove","handleTouchStart","handleTouchEnd","handleFocus","toggleFixedUserActive","nudge","InteractionDetector"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\n\ntype RenderParameters = {\n  isUserActive: boolean,\n  nudge: () => void,\n  toggleFixedUserActive: () => void,\n  handleMouseMove: (evt: MouseEvent) => void,\n  handleFocus: (evt: FocusEvent) => void,\n  handleTouchStart: (evt: TouchEvent) => void,\n  handleTouchEnd: (evt: TouchEvent) => void\n};\n\nexport type InteractionDetectorConfiguration = {\n  inactivityDelay: number\n};\n\ntype Props = {\n  configuration?: {\n    interactionDetector?: InteractionDetectorConfiguration\n  },\n  render: RenderParameters => React.Node\n};\n\ntype State = {\n  isUserActive: boolean\n};\n\ntype InteractionState = {\n  isMouseMoved: boolean,\n  isTouched: boolean,\n  isTouching: boolean,\n  isEntered: boolean,\n  clientX: number,\n  clientY: number\n};\n\nconst getDelaySeconds = configuration =>\n  configuration && configuration.interactionDetector && configuration.interactionDetector.inactivityDelay != null\n    ? configuration.interactionDetector.inactivityDelay\n    : 0;\n\nclass InteractionDetector extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isUserActive: true };\n  }\n\n  isFixed: boolean = false;\n  intervalId: IntervalID;\n  inactivityTimeoutId: TimeoutID;\n  flags: InteractionState = {\n    isMouseMoved: true,\n    isTouched: false,\n    isTouching: false,\n    isEntered: false,\n    clientX: -1,\n    clientY: -1\n  };\n\n  componentDidMount() {\n    const delaySeconds = getDelaySeconds(this.props.configuration);\n    if (delaySeconds >= 0) {\n      // Negative values deactivate\n      this.intervalId = setInterval(this.updateActivity, 250); // This interval is not the inactivity delay.\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const delaySeconds = getDelaySeconds(this.props.configuration);\n    if (delaySeconds !== getDelaySeconds(prevProps.configuration)) {\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n      }\n      if (delaySeconds >= 0) {\n        // Negative values deactivate\n        this.intervalId = setInterval(this.updateActivity, 250); // This interval is not the inactivity delay.\n      } else {\n        this.setState({ isUserActive: true });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n    if (this.inactivityTimeoutId) {\n      clearTimeout(this.inactivityTimeoutId);\n    }\n  }\n\n  handleMouseMove = (evt: MouseEvent) => {\n    if (evt.clientX !== this.flags.clientX || evt.clientY !== this.flags.clientY) {\n      this.flags.isMouseMoved = true;\n      this.flags.clientX = evt.clientX;\n      this.flags.clientY = evt.clientY;\n    }\n  };\n\n  handleTouchStart = () => {\n    this.flags.isTouched = true;\n    this.flags.isTouching = true;\n  };\n\n  handleTouchEnd = () => {\n    this.flags.isTouching = false;\n  };\n\n  nudge = () => {\n    this.flags.isMouseMoved = true;\n  };\n\n  toggleFixedUserActive = () => {\n    this.isFixed = !this.isFixed;\n    if (this.isFixed) {\n      this.flags.isMouseMoved = true;\n    } else {\n      this.setState({ isUserActive: false });\n    }\n  };\n\n  handleFocus = (focusEvent: FocusEvent) => {\n    if (focusEvent.target === focusEvent.currentTarget) {\n      this.nudge();\n    }\n  };\n\n  setInactive = () => {\n    if (!(this.isFixed || this.flags.isMouseMoved)) {\n      this.setState({ isUserActive: false });\n    }\n  };\n\n  updateActivity = () => {\n    if (this.flags.isMouseMoved || this.flags.isTouched || this.flags.isTouching) {\n      this.flags.isTouched = false;\n      this.flags.isMouseMoved = false;\n      if (!this.state.isUserActive) {\n        this.setState({ isUserActive: true });\n      }\n      clearTimeout(this.inactivityTimeoutId);\n      this.inactivityTimeoutId = setTimeout(this.setInactive, getDelaySeconds(this.props.configuration) * 1000);\n    }\n  };\n\n  render() {\n    const { isUserActive } = this.state;\n    const { render } = this.props;\n    const { handleMouseMove, handleTouchStart, handleTouchEnd, handleFocus, toggleFixedUserActive, nudge } = this;\n    return render({\n      isUserActive,\n      handleMouseMove,\n      handleTouchStart,\n      handleTouchEnd,\n      handleFocus,\n      toggleFixedUserActive: toggleFixedUserActive,\n      nudge\n    });\n  }\n}\n\nexport default InteractionDetector;\n"]},"metadata":{},"sourceType":"script"}