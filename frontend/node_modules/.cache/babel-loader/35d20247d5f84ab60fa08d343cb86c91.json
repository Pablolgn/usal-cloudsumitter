{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst strings = {\n  playPauseButton: {\n    label: 'Toggle play/pause'\n  },\n  skipButton: {\n    label: 'Skip back 10 seconds',\n    seconds: '–10'\n  },\n  timeDisplay: {\n    label: 'Video times',\n    clockTimeLabel: 'Clock time',\n    positionLabel: 'Current time',\n    durationLabel: 'Duration',\n    negativeMark: '–'\n  },\n  timeline: {\n    label: 'Timeline'\n  },\n  gotoLiveButton: {\n    label: 'Play from live position',\n    isLive: 'Live',\n    gotoLive: 'Go live'\n  },\n  volume: {\n    label: 'Volume and mute',\n    muteToggleLabel: 'Toggle mute',\n    volumeSliderLabel: 'Volume setting'\n  },\n  audioSelector: {\n    label: 'Audio track selector'\n  },\n  subtitlesSelector: {\n    label: 'Subtitles selector',\n    noSubtitlesLabel: 'No subtitles'\n  },\n  qualitySelector: {\n    label: 'Video quality selector',\n    autoLabel: 'Automatic',\n    formatBitrateLabel: (bitrate, isPlaying) => \"\".concat(bitrate, \" kbps\").concat(isPlaying ? ' •' : '')\n  },\n  pipButton: {\n    label: 'Toggle picture-in-picture mode'\n  },\n  airPlayButton: {\n    label: 'Select AirPlay device'\n  },\n  fullscreenButton: {\n    label: 'Toggle fullscreen'\n  },\n  bufferingIndicator: {\n    label: 'Video is buffering'\n  },\n  exitButton: {\n    label: 'Exit'\n  }\n};\nvar _default = strings;\nexports.default = _default;","map":{"version":3,"sources":["../src/replay/default-player/strings.js"],"names":["strings","playPauseButton","label","skipButton","seconds","timeDisplay","clockTimeLabel","positionLabel","durationLabel","negativeMark","timeline","gotoLiveButton","isLive","gotoLive","volume","muteToggleLabel","volumeSliderLabel","audioSelector","subtitlesSelector","noSubtitlesLabel","qualitySelector","autoLabel","formatBitrateLabel","isPlaying","pipButton","airPlayButton","fullscreenButton","bufferingIndicator","exitButton"],"mappings":";;;;;;AAAA,MAAMA,OAAO,GAAG;AACdC,EAAAA,eAAe,EAAE;AACfC,IAAAA,KAAK,EAAE;AADQ,GADH;AAIdC,EAAAA,UAAU,EAAE;AACVD,IAAAA,KAAK,EADK,sBAAA;AAEVE,IAAAA,OAAO,EAAE;AAFC,GAJE;AAQdC,EAAAA,WAAW,EAAE;AACXH,IAAAA,KAAK,EADM,aAAA;AAEXI,IAAAA,cAAc,EAFH,YAAA;AAGXC,IAAAA,aAAa,EAHF,cAAA;AAIXC,IAAAA,aAAa,EAJF,UAAA;AAKXC,IAAAA,YAAY,EAAE;AALH,GARC;AAedC,EAAAA,QAAQ,EAAE;AACRR,IAAAA,KAAK,EAAE;AADC,GAfI;AAkBdS,EAAAA,cAAc,EAAE;AACdT,IAAAA,KAAK,EADS,yBAAA;AAEdU,IAAAA,MAAM,EAFQ,MAAA;AAGdC,IAAAA,QAAQ,EAAE;AAHI,GAlBF;AAuBdC,EAAAA,MAAM,EAAE;AACNZ,IAAAA,KAAK,EADC,iBAAA;AAENa,IAAAA,eAAe,EAFT,aAAA;AAGNC,IAAAA,iBAAiB,EAAE;AAHb,GAvBM;AA4BdC,EAAAA,aAAa,EAAE;AACbf,IAAAA,KAAK,EAAE;AADM,GA5BD;AA+BdgB,EAAAA,iBAAiB,EAAE;AACjBhB,IAAAA,KAAK,EADY,oBAAA;AAEjBiB,IAAAA,gBAAgB,EAAE;AAFD,GA/BL;AAmCdC,EAAAA,eAAe,EAAE;AACflB,IAAAA,KAAK,EADU,wBAAA;AAEfmB,IAAAA,SAAS,EAFM,WAAA;AAGfC,IAAAA,kBAAkB,EAAE,CAAA,OAAA,EAAA,SAAA,KAAA,GAAA,MAAA,CAAA,OAAA,EAAA,OAAA,EAAA,MAAA,CAA0CC,SAAS,GAAA,IAAA,GAAnD,EAAA;AAHL,GAnCH;AAwCdC,EAAAA,SAAS,EAAE;AACTtB,IAAAA,KAAK,EAAE;AADE,GAxCG;AA2CduB,EAAAA,aAAa,EAAE;AACbvB,IAAAA,KAAK,EAAE;AADM,GA3CD;AA8CdwB,EAAAA,gBAAgB,EAAE;AAChBxB,IAAAA,KAAK,EAAE;AADS,GA9CJ;AAiDdyB,EAAAA,kBAAkB,EAAE;AAClBzB,IAAAA,KAAK,EAAE;AADW,GAjDN;AAoDd0B,EAAAA,UAAU,EAAE;AACV1B,IAAAA,KAAK,EAAE;AADG;AApDE,CAAhB;eAyDeF,O","sourcesContent":["const strings = {\n  playPauseButton: {\n    label: 'Toggle play/pause'\n  },\n  skipButton: {\n    label: 'Skip back 10 seconds',\n    seconds: '–10'\n  },\n  timeDisplay: {\n    label: 'Video times',\n    clockTimeLabel: 'Clock time',\n    positionLabel: 'Current time',\n    durationLabel: 'Duration',\n    negativeMark: '–'\n  },\n  timeline: {\n    label: 'Timeline'\n  },\n  gotoLiveButton: {\n    label: 'Play from live position',\n    isLive: 'Live',\n    gotoLive: 'Go live'\n  },\n  volume: {\n    label: 'Volume and mute',\n    muteToggleLabel: 'Toggle mute',\n    volumeSliderLabel: 'Volume setting'\n  },\n  audioSelector: {\n    label: 'Audio track selector'\n  },\n  subtitlesSelector: {\n    label: 'Subtitles selector',\n    noSubtitlesLabel: 'No subtitles'\n  },\n  qualitySelector: {\n    label: 'Video quality selector',\n    autoLabel: 'Automatic',\n    formatBitrateLabel: (bitrate, isPlaying) => `${bitrate} kbps${isPlaying ? ' •' : ''}`\n  },\n  pipButton: {\n    label: 'Toggle picture-in-picture mode'\n  },\n  airPlayButton: {\n    label: 'Select AirPlay device'\n  },\n  fullscreenButton: {\n    label: 'Toggle fullscreen'\n  },\n  bufferingIndicator: {\n    label: 'Video is buffering'\n  },\n  exitButton: {\n    label: 'Exit'\n  }\n};\n\nexport default strings;\n"]},"metadata":{},"sourceType":"script"}