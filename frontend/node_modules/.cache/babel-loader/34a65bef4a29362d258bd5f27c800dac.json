{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _types = require(\"../types\");\n\nconst videoErrorCodes = ['(unknown)', // 0\n'MEDIA_ERR_ABORTED', // 1\n'MEDIA_ERR_NETWORK', // 2\n'MEDIA_ERR_DECODE', // 3\n'MEDIA_ERR_SRC_NOT_SUPPORTED', // 4\n'MEDIA_ERR_ENCRYPTED' // 5 - Edge only?\n];\n\nconst mapError = videoElement => {\n  const isDesktopSafari = navigator.userAgent.match(/Mac OS X.*Safari/) && !navigator.userAgent.match(/(Chrome)/);\n  const isIos = navigator.userAgent.match(/(iPad|iPhone|iPod)/i);\n  let errorCode = 'STREAM_ERROR';\n  const sourceError = videoElement.error || new Error('Unknown video element error.');\n  const sourceErrorCode = typeof sourceError.code === 'number' ? videoErrorCodes[sourceError.code] : videoErrorCodes[0];\n\n  if (sourceErrorCode === 'MEDIA_ERR_DECODE' || sourceErrorCode === 'MEDIA_ERR_SRC_NOT_SUPPORTED') {\n    if (isIos || isDesktopSafari) {\n      // MEDIA_ERR_DECODE Observed on 404s on HLS fragments, and MEDIA_ERR_SRC_NOT_SUPPORTED observed on non-OK m3u8 requests.\n      // Both should map to STREAM_ERROR_DOWNLOAD\n      errorCode = 'STREAM_ERROR_DOWNLOAD';\n    } else {\n      // Otherwise, actual decode problem? \"MEDIA_ERR_SRC_NOT_SUPPORTED\" also could be considered a decode problem.\n      errorCode = 'STREAM_ERROR_DECODE';\n    }\n  } else if (sourceErrorCode === 'MEDIA_ERR_NETWORK') {\n    errorCode = 'STREAM_ERROR_DOWNLOAD';\n  }\n\n  return new _types.PlaybackError(errorCode, 'html', \"\".concat(sourceErrorCode, \": \").concat(sourceError.message || ''), 'FATAL', sourceError);\n};\n\nvar _default = mapError;\nexports.default = _default;","map":{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/BasicVideoStreamer/errorMapper.js"],"names":["videoErrorCodes","mapError","videoElement","isDesktopSafari","navigator","isIos","errorCode","sourceError","sourceErrorCode","PlaybackError"],"mappings":";;;;;;;AAEA,IAAA,MAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,MAAMA,eAAe,GAAG,CAAA,WAAA,EACT;AADS,mBAAA,EAED;AAFC,mBAAA,EAGD;AAHC,kBAAA,EAIF;AAJE,6BAAA,EAKS;AALT,qBAAA,CAMA;AANA,CAAxB;;AASA,MAAMC,QAAQ,GAAIC,YAAD,IAAmD;AAClE,QAAMC,eAAe,GAAGC,SAAS,CAATA,SAAAA,CAAAA,KAAAA,CAAAA,kBAAAA,KAAiD,CAACA,SAAS,CAATA,SAAAA,CAAAA,KAAAA,CAA1E,UAA0EA,CAA1E;AACA,QAAMC,KAAK,GAAGD,SAAS,CAATA,SAAAA,CAAAA,KAAAA,CAAd,qBAAcA,CAAd;AAEA,MAAIE,SAAoB,GAAxB,cAAA;AACA,QAAMC,WAAW,GAAGL,YAAY,CAAZA,KAAAA,IAAsB,IAAA,KAAA,CAA1C,8BAA0C,CAA1C;AACA,QAAMM,eAAe,GAAG,OAAOD,WAAW,CAAlB,IAAA,KAAA,QAAA,GAAuCP,eAAe,CAACO,WAAW,CAAlE,IAAsD,CAAtD,GAA2EP,eAAe,CAAlH,CAAkH,CAAlH;;AACA,MAAIQ,eAAe,KAAfA,kBAAAA,IAA0CA,eAAe,KAA7D,6BAAA,EAAiG;AAC/F,QAAIH,KAAK,IAAT,eAAA,EAA8B;AAC5B;AACA;AACAC,MAAAA,SAAS,GAATA,uBAAAA;AAHF,KAAA,MAIO;AACL;AACAA,MAAAA,SAAS,GAATA,qBAAAA;AACD;AARH,GAAA,MASO,IAAIE,eAAe,KAAnB,mBAAA,EAA6C;AAClDF,IAAAA,SAAS,GAATA,uBAAAA;AACD;;AACD,SAAO,IAAIG,MAAAA,CAAJ,aAAA,CAAA,SAAA,EAAA,MAAA,EAAA,GAAA,MAAA,CAAA,eAAA,EAAA,IAAA,EAAA,MAAA,CAA4DF,WAAW,CAAXA,OAAAA,IAA5D,EAAA,CAAA,EAAA,OAAA,EAAP,WAAO,CAAP;AAnBF,CAAA;;eAsBeN,Q","sourcesContent":["// @flow\n\nimport { PlaybackError, type ErrorCode } from '../types';\n\nconst videoErrorCodes = [\n  '(unknown)', // 0\n  'MEDIA_ERR_ABORTED', // 1\n  'MEDIA_ERR_NETWORK', // 2\n  'MEDIA_ERR_DECODE', // 3\n  'MEDIA_ERR_SRC_NOT_SUPPORTED', // 4\n  'MEDIA_ERR_ENCRYPTED' // 5 - Edge only?\n];\n\nconst mapError = (videoElement: HTMLVideoElement): PlaybackError => {\n  const isDesktopSafari = navigator.userAgent.match(/Mac OS X.*Safari/) && !navigator.userAgent.match(/(Chrome)/);\n  const isIos = navigator.userAgent.match(/(iPad|iPhone|iPod)/i);\n\n  let errorCode: ErrorCode = 'STREAM_ERROR';\n  const sourceError = videoElement.error || new Error('Unknown video element error.');\n  const sourceErrorCode = typeof sourceError.code === 'number' ? videoErrorCodes[sourceError.code] : videoErrorCodes[0];\n  if (sourceErrorCode === 'MEDIA_ERR_DECODE' || sourceErrorCode === 'MEDIA_ERR_SRC_NOT_SUPPORTED') {\n    if (isIos || isDesktopSafari) {\n      // MEDIA_ERR_DECODE Observed on 404s on HLS fragments, and MEDIA_ERR_SRC_NOT_SUPPORTED observed on non-OK m3u8 requests.\n      // Both should map to STREAM_ERROR_DOWNLOAD\n      errorCode = 'STREAM_ERROR_DOWNLOAD';\n    } else {\n      // Otherwise, actual decode problem? \"MEDIA_ERR_SRC_NOT_SUPPORTED\" also could be considered a decode problem.\n      errorCode = 'STREAM_ERROR_DECODE';\n    }\n  } else if (sourceErrorCode === 'MEDIA_ERR_NETWORK') {\n    errorCode = 'STREAM_ERROR_DOWNLOAD';\n  }\n  return new PlaybackError(errorCode, 'html', `${sourceErrorCode}: ${sourceError.message || ''}`, 'FATAL', sourceError);\n};\n\nexport default mapError;\n"]},"metadata":{},"sourceType":"script"}