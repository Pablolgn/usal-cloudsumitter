{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nconst alreadyWarnedNames = [];\n\nconst analyzeChild = child => {\n  const type = child && child.type;\n  let displayName = type && child.type.displayName;\n  const name = type && child.type.name;\n  let fullName = name;\n\n  if (name === 'ConnectedControl') {\n    fullName = child.type.controlWithoutDisplayName || name;\n  }\n\n  if (!displayName && (!name || alreadyWarnedNames.indexOf(name) === -1)) {\n    // eslint-disable-next-line no-console\n    console.warn('<RenderIfEnabled/> depends on child components having the displayName static property set. The component %s, has no ' + 'displayName property set. If no displayName is added to %s, the control might not render in production builds.', fullName || '[no name found]', name || '[no name found]');\n\n    if (name) {\n      alreadyWarnedNames.push(name);\n    }\n  }\n};\n\nconst extractChildName = child => {\n  const name = child && child.type && (child.type.displayName || child.type.name);\n\n  if (name) {\n    const startIndex = name.indexOf('Connected') === 0 ? 9 : 0;\n    return name.charAt(startIndex).toLowerCase() + name.substr(startIndex + 1);\n  }\n};\n\nclass RenderIfEnabled extends React.Component {\n  render() {\n    if (this.props.configuration) {\n      return React.Children.map(this.props.children, child => {\n        if (process.env.NODE_ENV === 'development') {\n          analyzeChild(child);\n        }\n\n        const childName = extractChildName(child);\n\n        if (!childName || this.props.configuration && this.props.configuration.indexOf(childName) >= 0) {\n          return child;\n        }\n      });\n    } else if (process.env.NODE_ENV === 'development') {\n      React.Children.forEach(this.props.children, analyzeChild);\n      return this.props.children;\n    } else {\n      return this.props.children;\n    }\n  }\n\n}\n\nvar _default = RenderIfEnabled;\nexports.default = _default;","map":{"version":3,"sources":["../../src/replay/components/player/RenderIfEnabled.js"],"names":["alreadyWarnedNames","analyzeChild","child","type","displayName","name","fullName","console","extractChildName","startIndex","React","render","process","childName","RenderIfEnabled"],"mappings":";;;;;;;AACA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,MAAMA,kBAAkB,GAAxB,EAAA;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5B,QAAMC,IAAI,GAAGD,KAAK,IAAIA,KAAK,CAA3B,IAAA;AACA,MAAIE,WAAW,GAAGD,IAAI,IAAID,KAAK,CAALA,IAAAA,CAA1B,WAAA;AACA,QAAMG,IAAI,GAAGF,IAAI,IAAID,KAAK,CAALA,IAAAA,CAArB,IAAA;AACA,MAAII,QAAQ,GAAZ,IAAA;;AACA,MAAID,IAAI,KAAR,kBAAA,EAAiC;AAC/BC,IAAAA,QAAQ,GAAGJ,KAAK,CAALA,IAAAA,CAAAA,yBAAAA,IAAXI,IAAAA;AACD;;AACD,MAAI,CAAA,WAAA,KAAiB,CAAA,IAAA,IAASN,kBAAkB,CAAlBA,OAAAA,CAAAA,IAAAA,MAAqC,CAAnE,CAAI,CAAJ,EAAwE;AACtE;AACAO,IAAAA,OAAO,CAAPA,IAAAA,CACE,yHADFA,gHAAAA,EAGED,QAAQ,IAHVC,iBAAAA,EAIEF,IAAI,IAJNE,iBAAAA;;AAMA,QAAA,IAAA,EAAU;AACRP,MAAAA,kBAAkB,CAAlBA,IAAAA,CAAAA,IAAAA;AACD;AACF;AAnBH,CAAA;;AAsBA,MAAMQ,gBAAgB,GAAGN,KAAK,IAAI;AAChC,QAAMG,IAAI,GAAGH,KAAK,IAAIA,KAAK,CAAdA,IAAAA,KAAwBA,KAAK,CAALA,IAAAA,CAAAA,WAAAA,IAA0BA,KAAK,CAALA,IAAAA,CAA/D,IAAaA,CAAb;;AACA,MAAA,IAAA,EAAU;AACR,UAAMO,UAAU,GAAGJ,IAAI,CAAJA,OAAAA,CAAAA,WAAAA,MAAAA,CAAAA,GAAAA,CAAAA,GAAnB,CAAA;AACA,WAAOA,IAAI,CAAJA,MAAAA,CAAAA,UAAAA,EAAAA,WAAAA,KAAwCA,IAAI,CAAJA,MAAAA,CAAYI,UAAU,GAArE,CAA+CJ,CAA/C;AACD;AALH,CAAA;;AAQA,MAAA,eAAA,SAA8BK,KAAK,CAAnC,SAAA,CAAqD;AACnDC,EAAAA,MAAM,GAAG;AACP,QAAI,KAAA,KAAA,CAAJ,aAAA,EAA8B;AAC5B,aAAO,KAAK,CAAL,QAAA,CAAA,GAAA,CAAmB,KAAA,KAAA,CAAnB,QAAA,EAAwCT,KAAK,IAAI;AACtD,YAAIU,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,aAAA,EAA4C;AAC1CX,UAAAA,YAAY,CAAZA,KAAY,CAAZA;AACD;;AACD,cAAMY,SAAS,GAAGL,gBAAgB,CAAlC,KAAkC,CAAlC;;AACA,YAAI,CAAA,SAAA,IAAe,KAAA,KAAA,CAAA,aAAA,IAA4B,KAAA,KAAA,CAAA,aAAA,CAAA,OAAA,CAAA,SAAA,KAA/C,CAAA,EAAkG;AAChG,iBAAA,KAAA;AACD;AAPH,OAAO,CAAP;AADF,KAAA,MAUO,IAAII,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,aAAA,EAA4C;AACjDF,MAAAA,KAAK,CAALA,QAAAA,CAAAA,OAAAA,CAAuB,KAAA,KAAA,CAAvBA,QAAAA,EAAAA,YAAAA;AACA,aAAO,KAAA,KAAA,CAAP,QAAA;AAFK,KAAA,MAGA;AACL,aAAO,KAAA,KAAA,CAAP,QAAA;AACD;AACF;;AAlBkD;;eAqBtCI,e","sourcesContent":["// @flow\nimport * as React from 'react';\nimport type { ControlNames } from '../../default-player/types';\n\ntype Props = {\n  children: React.Node,\n  configuration: ?Array<ControlNames>\n};\n\nconst alreadyWarnedNames = [];\n\nconst analyzeChild = child => {\n  const type = child && child.type;\n  let displayName = type && child.type.displayName;\n  const name = type && child.type.name;\n  let fullName = name;\n  if (name === 'ConnectedControl') {\n    fullName = child.type.controlWithoutDisplayName || name;\n  }\n  if (!displayName && (!name || alreadyWarnedNames.indexOf(name) === -1)) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '<RenderIfEnabled/> depends on child components having the displayName static property set. The component %s, has no ' +\n        'displayName property set. If no displayName is added to %s, the control might not render in production builds.',\n      fullName || '[no name found]',\n      name || '[no name found]'\n    );\n    if (name) {\n      alreadyWarnedNames.push(name);\n    }\n  }\n};\n\nconst extractChildName = child => {\n  const name = child && child.type && (child.type.displayName || child.type.name);\n  if (name) {\n    const startIndex = name.indexOf('Connected') === 0 ? 9 : 0;\n    return name.charAt(startIndex).toLowerCase() + name.substr(startIndex + 1);\n  }\n};\n\nclass RenderIfEnabled extends React.Component<Props> {\n  render() {\n    if (this.props.configuration) {\n      return React.Children.map(this.props.children, child => {\n        if (process.env.NODE_ENV === 'development') {\n          analyzeChild(child);\n        }\n        const childName = extractChildName(child);\n        if (!childName || (this.props.configuration && this.props.configuration.indexOf(childName) >= 0)) {\n          return child;\n        }\n      });\n    } else if (process.env.NODE_ENV === 'development') {\n      React.Children.forEach(this.props.children, analyzeChild);\n      return this.props.children;\n    } else {\n      return this.props.children;\n    }\n  }\n}\n\nexport default RenderIfEnabled;\n"]},"metadata":{},"sourceType":"script"}