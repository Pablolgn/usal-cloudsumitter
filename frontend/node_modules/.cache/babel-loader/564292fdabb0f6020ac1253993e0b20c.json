{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _common = require(\"../../common\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst defaultTextTracks = [{\n  kind: 'subtitles',\n  label: 'Finnish subtitles',\n  language: 'fi',\n  origin: 'side-loaded'\n}, {\n  kind: 'subtitles',\n  label: 'Swedish subtitles',\n  language: 'sv',\n  origin: 'side-loaded'\n}];\nconst defaultAudioTracks = [{\n  label: \"Director's comments\",\n  language: 'en'\n}, {\n  label: 'Main audio',\n  language: 'en'\n}];\nconst defaultValues = {\n  playMode: 'ondemand',\n  playState: 'playing',\n  isPaused: false,\n  isBuffering: false,\n  isSeeking: false,\n  position: 123,\n  duration: 456,\n  absolutePosition: new Date(0),\n  absoluteStartPosition: new Date(0),\n  volume: 0.7,\n  isMuted: false,\n  isPipAvailable: true,\n  isPipActive: false,\n  isAirPlayAvailable: true,\n  isAirPlayActive: false,\n  bufferedAhead: 12,\n  bitrates: [512, 1024, 2048, 4096],\n  currentBitrate: 2048,\n  bitrateFix: NaN,\n  bitrateCap: Infinity,\n  textTracks: defaultTextTracks,\n  currentTextTrack: defaultTextTracks[0],\n  audioTracks: defaultAudioTracks,\n  currentAudioTrack: defaultAudioTracks[0],\n  isAtLiveEdge: false,\n  error: undefined\n};\n/*\n\tvolume?: number,\n\tisMuted?: boolean,\n\tisPaused?: boolean,\n\tbitrateCap?: number,\n\tbitrateFix?: number | string,\n\tselectedTextTrack?: AvailableTrack,\n\tselectedAudioTrack?: AvailableTrack,\n*/\n\nconst className = 'video-streamer';\nconst mockClassName = 'mock-video-streamer';\n\nconst runAsync = (callback, arg, delay = 0) => {\n  setTimeout(() => callback && callback(arg), delay);\n};\n\nconst updateWithDefaultValues = (updater, overrides = {}) => {\n  if (updater) {\n    Object.entries(defaultValues).forEach(entry => {\n      updater({\n        [entry[0]]: entry[0] in overrides ? overrides[entry[0]] : entry[1]\n      });\n    });\n  }\n};\n\nclass MockVideoStreamer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"modifiedStreamState\", {});\n\n    _defineProperty(this, \"updateStreamState\", props => {\n      const selectedTextTrack = props.selectedTextTrack,\n            selectedAudioTrack = props.selectedAudioTrack,\n            unchanged = _objectWithoutProperties(props, [\"selectedTextTrack\", \"selectedAudioTrack\"]); // $FlowFixMe Subset type and question marks don't work.\n\n\n      const newState = unchanged;\n\n      if ('selectedTextTrack' in props) {\n        newState.currentTextTrack = selectedTextTrack;\n      }\n\n      if ('selectedAudioTrack' in props) {\n        newState.currentAudioTrack = selectedAudioTrack;\n      }\n\n      this.modifiedStreamState = _objectSpread({}, this.modifiedStreamState, {}, newState);\n\n      if (this.props.onStreamStateChange != null) {\n        this.props.onStreamStateChange(newState);\n      }\n    });\n  }\n\n  componentDidMount() {\n    if (this.props.initialPlaybackProps) {\n      const _this$props$initialPl = this.props.initialPlaybackProps,\n            isPaused = _this$props$initialPl.isPaused,\n            isMuted = _this$props$initialPl.isMuted,\n            volume = _this$props$initialPl.volume,\n            bitrateCap = _this$props$initialPl.bitrateCap,\n            bitrateFix = _this$props$initialPl.bitrateFix;\n      this.updateStreamState({\n        isPaused,\n        isMuted,\n        volume,\n        bitrateCap: bitrateCap,\n        bitrateFix\n      });\n    }\n\n    window.updateVideoState = this.updateStreamState;\n\n    if (this.props.onReady) {\n      this.props.onReady({\n        setProperties: props => runAsync(this.updateStreamState, props, Math.round(Math.random() * 1000)),\n        thirdPartyPlayer: null\n      });\n      updateWithDefaultValues(this.props.onStreamStateChange, this.props.initialMockState);\n      /*setInterval(() => {\n        this.props.onStreamStateChange({ isBuffering: this.isBuffering });\n        this.isBuffering = !this.isBuffering;\n      }, 5000);*/\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.onStreamStateChange !== prevProps.onStreamStateChange) {\n      updateWithDefaultValues(this.props.onStreamStateChange, this.modifiedStreamState);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: (0, _common.prefixClassNames)(this.props.classNamePrefix, className, mockClassName, this.props.className)\n    }, /*#__PURE__*/React.createElement(\"div\", null, this.props.children || 'Mock video player'));\n  }\n\n}\n\n_defineProperty(MockVideoStreamer, \"defaultProps\", {\n  classNamePrefix: _common.defaultClassNamePrefix\n});\n\nvar _default = MockVideoStreamer;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/replay/components/player/VideoStreamer/MockVideoStreamer.js"],"names":["defaultTextTracks","kind","label","language","origin","defaultAudioTracks","defaultValues","playMode","playState","isPaused","isBuffering","isSeeking","position","duration","absolutePosition","absoluteStartPosition","volume","isMuted","isPipAvailable","isPipActive","isAirPlayAvailable","isAirPlayActive","bufferedAhead","bitrates","currentBitrate","bitrateFix","bitrateCap","textTracks","currentTextTrack","audioTracks","currentAudioTrack","isAtLiveEdge","error","undefined","className","mockClassName","runAsync","delay","setTimeout","callback","updateWithDefaultValues","overrides","Object","entry","updater","MockVideoStreamer","React","classNamePrefix","defaultClassNamePrefix","props","selectedTextTrack","selectedAudioTrack","unchanged","newState","componentDidMount","window","setProperties","Math","thirdPartyPlayer","componentDidUpdate","prevProps","render"],"mappings":";;;;;;;AACA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,MAAMA,iBAAiB,GAAG,CACxB;AACEC,EAAAA,IAAI,EADN,WAAA;AAEEC,EAAAA,KAAK,EAFP,mBAAA;AAGEC,EAAAA,QAAQ,EAHV,IAAA;AAIEC,EAAAA,MAAM,EAAE;AAJV,CADwB,EAOxB;AACEH,EAAAA,IAAI,EADN,WAAA;AAEEC,EAAAA,KAAK,EAFP,mBAAA;AAGEC,EAAAA,QAAQ,EAHV,IAAA;AAIEC,EAAAA,MAAM,EAAE;AAJV,CAPwB,CAA1B;AAeA,MAAMC,kBAAkB,GAAG,CACzB;AACEH,EAAAA,KAAK,EADP,qBAAA;AAEEC,EAAAA,QAAQ,EAAE;AAFZ,CADyB,EAKzB;AACED,EAAAA,KAAK,EADP,YAAA;AAEEC,EAAAA,QAAQ,EAAE;AAFZ,CALyB,CAA3B;AAWA,MAAMG,aAAa,GAAG;AACpBC,EAAAA,QAAQ,EADY,UAAA;AAEpBC,EAAAA,SAAS,EAFW,SAAA;AAGpBC,EAAAA,QAAQ,EAHY,KAAA;AAIpBC,EAAAA,WAAW,EAJS,KAAA;AAKpBC,EAAAA,SAAS,EALW,KAAA;AAMpBC,EAAAA,QAAQ,EANY,GAAA;AAOpBC,EAAAA,QAAQ,EAPY,GAAA;AAQpBC,EAAAA,gBAAgB,EAAE,IAAA,IAAA,CARE,CAQF,CARE;AASpBC,EAAAA,qBAAqB,EAAE,IAAA,IAAA,CATH,CASG,CATH;AAUpBC,EAAAA,MAAM,EAVc,GAAA;AAWpBC,EAAAA,OAAO,EAXa,KAAA;AAYpBC,EAAAA,cAAc,EAZM,IAAA;AAapBC,EAAAA,WAAW,EAbS,KAAA;AAcpBC,EAAAA,kBAAkB,EAdE,IAAA;AAepBC,EAAAA,eAAe,EAfK,KAAA;AAgBpBC,EAAAA,aAAa,EAhBO,EAAA;AAiBpBC,EAAAA,QAAQ,EAAE,CAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAjBU,IAiBV,CAjBU;AAkBpBC,EAAAA,cAAc,EAlBM,IAAA;AAmBpBC,EAAAA,UAAU,EAnBU,GAAA;AAoBpBC,EAAAA,UAAU,EApBU,QAAA;AAqBpBC,EAAAA,UAAU,EArBU,iBAAA;AAsBpBC,EAAAA,gBAAgB,EAAE5B,iBAAiB,CAtBf,CAsBe,CAtBf;AAuBpB6B,EAAAA,WAAW,EAvBS,kBAAA;AAwBpBC,EAAAA,iBAAiB,EAAEzB,kBAAkB,CAxBjB,CAwBiB,CAxBjB;AAyBpB0B,EAAAA,YAAY,EAzBQ,KAAA;AA0BpBC,EAAAA,KAAK,EAAEC;AA1Ba,CAAtB;AA4BA;;;;;;;;;;AAUA,MAAMC,SAAS,GAAf,gBAAA;AACA,MAAMC,aAAa,GAAnB,qBAAA;;AAEA,MAAMC,QAAQ,GAAG,CAAA,QAAA,EAAA,GAAA,EAAgBC,KAAK,GAArB,CAAA,KAA8B;AAC7CC,EAAAA,UAAU,CAAC,MAAMC,QAAQ,IAAIA,QAAQ,CAA3B,GAA2B,CAA3B,EAAVD,KAAU,CAAVA;AADF,CAAA;;AAIA,MAAME,uBAAuB,GAAG,CAAA,OAAA,EAAUC,SAA2B,GAArC,EAAA,KAA+C;AAC7E,MAAA,OAAA,EAAa;AACXC,IAAAA,MAAM,CAANA,OAAAA,CAAAA,aAAAA,EAAAA,OAAAA,CAAsCC,KAAK,IAAI;AAC7CC,MAAAA,OAAO,CAAC;AAAE,SAACD,KAAK,CAAN,CAAM,CAAN,GAAYA,KAAK,CAALA,CAAK,CAALA,IAAAA,SAAAA,GAAwBF,SAAS,CAACE,KAAK,CAAvCA,CAAuC,CAAN,CAAjCA,GAA8CA,KAAK,CAAA,CAAA;AAAjE,OAAD,CAAPC;AADFF,KAAAA;AAGD;AALH,CAAA;;AAQA,MAAA,iBAAA,SAAgCI,KAAK,CAArC,SAAA,CAAuD;AAAA,EAAA,WAAA,CAAA,GAAA,IAAA,EAAA;AAAA,UAAA,GAAA,IAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,qBAAA,EAAA,EAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,mBAAA,EAMhCG,KAAD,IAA0B;AAAA,YACpCC,iBADoC,GACoBD,KADpB,CAAA,iBAAA;AAAA,YACjBE,kBADiB,GACoBF,KADpB,CAAA,kBAAA;AAAA,YACMG,SADN,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,mBAAA,EAAA,oBAAA,CAAA,CAAA,CAAA,CAE5C;;;AACA,YAAMC,QAA0B,GAAhC,SAAA;;AACA,UAAI,uBAAJ,KAAA,EAAkC;AAChCA,QAAAA,QAAQ,CAARA,gBAAAA,GAAAA,iBAAAA;AACD;;AACD,UAAI,wBAAJ,KAAA,EAAmC;AACjCA,QAAAA,QAAQ,CAARA,iBAAAA,GAAAA,kBAAAA;AACD;;AACD,WAAA,mBAAA,GAAA,aAAA,CAAA,EAAA,EAAgC,KAAhC,mBAAA,EAAA,EAAA,EAAA,QAAA,CAAA;;AACA,UAAI,KAAA,KAAA,CAAA,mBAAA,IAAJ,IAAA,EAA4C;AAC1C,aAAA,KAAA,CAAA,mBAAA,CAAA,QAAA;AACD;AAnBkD,KAAA,CAAA;AAAA;;AAsBrDC,EAAAA,iBAAiB,GAAG;AAClB,QAAI,KAAA,KAAA,CAAJ,oBAAA,EAAqC;AAAA,YAAA,qBAAA,GAC2B,KAAA,KAAA,CAD3B,oBAAA;AAAA,YAC3B7C,QAD2B,GAAA,qBAAA,CAAA,QAAA;AAAA,YACjBQ,OADiB,GAAA,qBAAA,CAAA,OAAA;AAAA,YACRD,MADQ,GAAA,qBAAA,CAAA,MAAA;AAAA,YACAU,UADA,GAAA,qBAAA,CAAA,UAAA;AAAA,YACYD,UADZ,GAAA,qBAAA,CAAA,UAAA;AAEnC,WAAA,iBAAA,CAAuB;AAAA,QAAA,QAAA;AAAA,QAAA,OAAA;AAAA,QAAA,MAAA;AAA6BC,QAAAA,UAAU,EAAvC,UAAA;AAAqDD,QAAAA;AAArD,OAAvB;AACD;;AACD8B,IAAAA,MAAM,CAANA,gBAAAA,GAA0B,KAA1BA,iBAAAA;;AACA,QAAI,KAAA,KAAA,CAAJ,OAAA,EAAwB;AACtB,WAAA,KAAA,CAAA,OAAA,CAAmB;AACjBC,QAAAA,aAAa,EAAGP,KAAD,IACbb,QAAQ,CAAC,KAAD,iBAAA,EAAA,KAAA,EAAgCqB,IAAI,CAAJA,KAAAA,CAAWA,IAAI,CAAJA,MAAAA,KAFpC,IAEyBA,CAAhC,CAFO;AAGjBC,QAAAA,gBAAgB,EAAE;AAHD,OAAnB;AAKAlB,MAAAA,uBAAuB,CAAC,KAAA,KAAA,CAAD,mBAAA,EAAiC,KAAA,KAAA,CAAxDA,gBAAuB,CAAvBA;AACA;;;;AAID;AACF;;AAEDmB,EAAAA,kBAAkB,CAAA,SAAA,EAAgC;AAChD,QAAI,KAAA,KAAA,CAAA,mBAAA,KAAmCC,SAAS,CAAhD,mBAAA,EAAsE;AACpEpB,MAAAA,uBAAuB,CAAC,KAAA,KAAA,CAAD,mBAAA,EAAiC,KAAxDA,mBAAuB,CAAvBA;AACD;AACF;;AAEDqB,EAAAA,MAAM,GAAG;AACP,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAE,CAAA,GAAA,OAAA,CAAA,gBAAA,EAAiB,KAAA,KAAA,CAAjB,eAAA,EAAA,SAAA,EAAA,aAAA,EAAuE,KAAA,KAAA,CAAvE,SAAA;AAAhB,KAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EAAM,KAAA,KAAA,CAAA,QAAA,IAFV,mBAEI,CADF,CADF;AAKD;;AAtDoD;;gBAAjDhB,iB,kBACkB;AACpBE,EAAAA,eAAe,EAAEC,OAAAA,CAAAA;AADG,C;;eAwDTH,iB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport type { PlaybackProps, VideoStreamerProps, VideoStreamState } from './types';\nimport { defaultClassNamePrefix, prefixClassNames } from '../../common';\n\ntype Props = VideoStreamerProps & {\n  children?: React.Node,\n  initialMockState?: VideoStreamState\n};\n\nconst defaultTextTracks = [\n  {\n    kind: 'subtitles',\n    label: 'Finnish subtitles',\n    language: 'fi',\n    origin: 'side-loaded'\n  },\n  {\n    kind: 'subtitles',\n    label: 'Swedish subtitles',\n    language: 'sv',\n    origin: 'side-loaded'\n  }\n];\n\nconst defaultAudioTracks = [\n  {\n    label: \"Director's comments\",\n    language: 'en'\n  },\n  {\n    label: 'Main audio',\n    language: 'en'\n  }\n];\n\nconst defaultValues = {\n  playMode: 'ondemand',\n  playState: 'playing',\n  isPaused: false,\n  isBuffering: false,\n  isSeeking: false,\n  position: 123,\n  duration: 456,\n  absolutePosition: new Date(0),\n  absoluteStartPosition: new Date(0),\n  volume: 0.7,\n  isMuted: false,\n  isPipAvailable: true,\n  isPipActive: false,\n  isAirPlayAvailable: true,\n  isAirPlayActive: false,\n  bufferedAhead: 12,\n  bitrates: [512, 1024, 2048, 4096],\n  currentBitrate: 2048,\n  bitrateFix: NaN,\n  bitrateCap: Infinity,\n  textTracks: defaultTextTracks,\n  currentTextTrack: defaultTextTracks[0],\n  audioTracks: defaultAudioTracks,\n  currentAudioTrack: defaultAudioTracks[0],\n  isAtLiveEdge: false,\n  error: undefined\n};\n/*\n\tvolume?: number,\n\tisMuted?: boolean,\n\tisPaused?: boolean,\n\tbitrateCap?: number,\n\tbitrateFix?: number | string,\n\tselectedTextTrack?: AvailableTrack,\n\tselectedAudioTrack?: AvailableTrack,\n*/\n\nconst className = 'video-streamer';\nconst mockClassName = 'mock-video-streamer';\n\nconst runAsync = (callback, arg, delay = 0) => {\n  setTimeout(() => callback && callback(arg), delay);\n};\n\nconst updateWithDefaultValues = (updater, overrides: VideoStreamState = {}) => {\n  if (updater) {\n    Object.entries(defaultValues).forEach(entry => {\n      updater({ [entry[0]]: entry[0] in overrides ? overrides[entry[0]] : entry[1] });\n    });\n  }\n};\n\nclass MockVideoStreamer extends React.Component<Props> {\n  static defaultProps = {\n    classNamePrefix: defaultClassNamePrefix\n  };\n  modifiedStreamState = {};\n\n  updateStreamState = (props: PlaybackProps) => {\n    const { selectedTextTrack, selectedAudioTrack, ...unchanged } = props;\n    // $FlowFixMe Subset type and question marks don't work.\n    const newState: VideoStreamState = unchanged;\n    if ('selectedTextTrack' in props) {\n      newState.currentTextTrack = selectedTextTrack;\n    }\n    if ('selectedAudioTrack' in props) {\n      newState.currentAudioTrack = selectedAudioTrack;\n    }\n    this.modifiedStreamState = { ...this.modifiedStreamState, ...newState };\n    if (this.props.onStreamStateChange != null) {\n      this.props.onStreamStateChange(newState);\n    }\n  };\n\n  componentDidMount() {\n    if (this.props.initialPlaybackProps) {\n      const { isPaused, isMuted, volume, bitrateCap, bitrateFix } = this.props.initialPlaybackProps;\n      this.updateStreamState({ isPaused, isMuted, volume, bitrateCap: bitrateCap, bitrateFix });\n    }\n    window.updateVideoState = this.updateStreamState;\n    if (this.props.onReady) {\n      this.props.onReady({\n        setProperties: (props: PlaybackProps) =>\n          runAsync(this.updateStreamState, props, Math.round(Math.random() * 1000)),\n        thirdPartyPlayer: null\n      });\n      updateWithDefaultValues(this.props.onStreamStateChange, this.props.initialMockState);\n      /*setInterval(() => {\n        this.props.onStreamStateChange({ isBuffering: this.isBuffering });\n        this.isBuffering = !this.isBuffering;\n      }, 5000);*/\n    }\n  }\n\n  componentDidUpdate(prevProps: VideoStreamerProps) {\n    if (this.props.onStreamStateChange !== prevProps.onStreamStateChange) {\n      updateWithDefaultValues(this.props.onStreamStateChange, this.modifiedStreamState);\n    }\n  }\n\n  render() {\n    return (\n      <div className={prefixClassNames(this.props.classNamePrefix, className, mockClassName, this.props.className)}>\n        <div>{this.props.children || 'Mock video player'}</div>\n      </div>\n    );\n  }\n}\n\nexport default MockVideoStreamer;\n"]},"metadata":{},"sourceType":"script"}