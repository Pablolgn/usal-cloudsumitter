{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.emptyTracks = void 0;\nconst emptyTracks = []; // Keeping the same array instance for all updates as long as not in use.\n\nexports.emptyTracks = emptyTracks;\nconst emptyBitrates = [];\nconst dawnOfTime = new Date(0);\n\nfunction notifyInitialState(updateStreamState) {\n  updateStreamState({\n    duration: 0,\n    position: 0,\n    playMode: 'ondemand',\n    playState: 'inactive',\n    isBuffering: false,\n    isPaused: false,\n    isSeeking: false,\n    volume: 1,\n    muted: false,\n    bufferedAhead: 0,\n    isPipAvailable: false,\n    isAirPlayAvailable: false,\n    isPipActive: false,\n    isAirPlayActive: false,\n    bitrates: emptyBitrates,\n    audioTracks: emptyTracks,\n    textTracks: emptyTracks,\n    absolutePosition: dawnOfTime,\n    absoluteStartPosition: dawnOfTime\n  });\n}\n\nfunction notifyTerminalState(updateStreamState) {\n  updateStreamState({\n    // duration: 0,\n    // position: 0,\n    // playMode: 'ondemand',\n    playState: 'inactive',\n    // Different\n    isBuffering: false,\n    isPaused: false,\n    isSeeking: false,\n    // volume: 1,\n    // muted: false,\n    // bufferedAhead: 0,\n    isPipAvailable: false,\n    isAirPlayAvailable: false // isPipActive: false,\n    // isAirPlayActive: false,\n    // bitrates: emptyBitrates,\n    // audioTracks: emptyTracks,\n    // textTracks: emptyTracks,\n    // absolutePosition: dawnOfTime,\n    // absoluteStartPosition: dawnOfTime\n\n  });\n}\n\nfunction getPlaybackLifeCycleManager(updateStreamState, pauseStreamRangeUpdater, log) {\n  let lifeCycleStage = 'unknown';\n  log && log(lifeCycleStage);\n\n  function getStage() {\n    return lifeCycleStage;\n  }\n\n  function setStage(newValue) {\n    log && log(newValue);\n    lifeCycleStage = newValue;\n  }\n\n  function startPlaybackSession() {\n    setStage('new');\n    notifyInitialState(updateStreamState);\n    pauseStreamRangeUpdater.stop();\n  }\n\n  function endPlaybackSession(endStage) {\n    if (endStage) {\n      setStage(endStage);\n    }\n\n    notifyTerminalState(updateStreamState);\n    pauseStreamRangeUpdater.stop();\n  }\n\n  function cleanup() {\n    pauseStreamRangeUpdater.stop();\n  }\n\n  return {\n    startPlaybackSession,\n    endPlaybackSession,\n    getStage,\n    setStage,\n    cleanup\n  };\n}\n\nvar _default = getPlaybackLifeCycleManager;\nexports.default = _default;","map":{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/common/playbackLifeCycleManager.js"],"names":["emptyTracks","emptyBitrates","dawnOfTime","updateStreamState","duration","position","playMode","playState","isBuffering","isPaused","isSeeking","volume","muted","bufferedAhead","isPipAvailable","isAirPlayAvailable","isPipActive","isAirPlayActive","bitrates","audioTracks","textTracks","absolutePosition","absoluteStartPosition","lifeCycleStage","log","setStage","notifyInitialState","pauseStreamRangeUpdater","notifyTerminalState","cleanup","getPlaybackLifeCycleManager"],"mappings":";;;;;;AAIO,MAAMA,WAAkC,GAAxC,EAAA,C,CAA+C;;;AACtD,MAAMC,aAA4B,GAAlC,EAAA;AACA,MAAMC,UAAU,GAAG,IAAA,IAAA,CAAnB,CAAmB,CAAnB;;AAEA,SAAA,kBAAA,CAAA,iBAAA,EAAyE;AACvEC,EAAAA,iBAAiB,CAAC;AAChBC,IAAAA,QAAQ,EADQ,CAAA;AAEhBC,IAAAA,QAAQ,EAFQ,CAAA;AAGhBC,IAAAA,QAAQ,EAHQ,UAAA;AAIhBC,IAAAA,SAAS,EAJO,UAAA;AAKhBC,IAAAA,WAAW,EALK,KAAA;AAMhBC,IAAAA,QAAQ,EANQ,KAAA;AAOhBC,IAAAA,SAAS,EAPO,KAAA;AAQhBC,IAAAA,MAAM,EARU,CAAA;AAShBC,IAAAA,KAAK,EATW,KAAA;AAUhBC,IAAAA,aAAa,EAVG,CAAA;AAWhBC,IAAAA,cAAc,EAXE,KAAA;AAYhBC,IAAAA,kBAAkB,EAZF,KAAA;AAahBC,IAAAA,WAAW,EAbK,KAAA;AAchBC,IAAAA,eAAe,EAdC,KAAA;AAehBC,IAAAA,QAAQ,EAfQ,aAAA;AAgBhBC,IAAAA,WAAW,EAhBK,WAAA;AAiBhBC,IAAAA,UAAU,EAjBM,WAAA;AAkBhBC,IAAAA,gBAAgB,EAlBA,UAAA;AAmBhBC,IAAAA,qBAAqB,EAAEpB;AAnBP,GAAD,CAAjBC;AAqBD;;AAED,SAAA,mBAAA,CAAA,iBAAA,EAA0E;AACxEA,EAAAA,iBAAiB,CAAC;AAChB;AACA;AACA;AACAI,IAAAA,SAAS,EAJO,UAAA;AAIO;AACvBC,IAAAA,WAAW,EALK,KAAA;AAMhBC,IAAAA,QAAQ,EANQ,KAAA;AAOhBC,IAAAA,SAAS,EAPO,KAAA;AAQhB;AACA;AACA;AACAI,IAAAA,cAAc,EAXE,KAAA;AAYhBC,IAAAA,kBAAkB,EAZF,KAAA,CAahB;AACA;AACA;AACA;AACA;AACA;AACA;;AAnBgB,GAAD,CAAjBZ;AAqBD;;AAED,SAAA,2BAAA,CAAA,iBAAA,EAAA,uBAAA,EAAA,GAAA,EAOE;AACA,MAAIoB,cAAiC,GAArC,SAAA;AACAC,EAAAA,GAAG,IAAIA,GAAG,CAAVA,cAAU,CAAVA;;AAEA,WAAA,QAAA,GAAoB;AAClB,WAAA,cAAA;AACD;;AAED,WAAA,QAAA,CAAA,QAAA,EAA+C;AAC7CA,IAAAA,GAAG,IAAIA,GAAG,CAAVA,QAAU,CAAVA;AACAD,IAAAA,cAAc,GAAdA,QAAAA;AACD;;AAED,WAAA,oBAAA,GAAgC;AAC9BE,IAAAA,QAAQ,CAARA,KAAQ,CAARA;AACAC,IAAAA,kBAAkB,CAAlBA,iBAAkB,CAAlBA;AACAC,IAAAA,uBAAuB,CAAvBA,IAAAA;AACD;;AAED,WAAA,kBAAA,CAAA,QAAA,EAA0D;AACxD,QAAA,QAAA,EAAc;AACZF,MAAAA,QAAQ,CAARA,QAAQ,CAARA;AACD;;AACDG,IAAAA,mBAAmB,CAAnBA,iBAAmB,CAAnBA;AACAD,IAAAA,uBAAuB,CAAvBA,IAAAA;AACD;;AAED,WAAA,OAAA,GAAmB;AACjBA,IAAAA,uBAAuB,CAAvBA,IAAAA;AACD;;AAED,SAAO;AAAA,IAAA,oBAAA;AAAA,IAAA,kBAAA;AAAA,IAAA,QAAA;AAAA,IAAA,QAAA;AAKLE,IAAAA;AALK,GAAP;AAOD;;eAEcC,2B","sourcesContent":["// @flow\nimport type { AvailableTrack, VideoStreamState } from '../types';\nimport type { PlaybackLifeCycle } from './types';\n\nexport const emptyTracks: Array<AvailableTrack> = []; // Keeping the same array instance for all updates as long as not in use.\nconst emptyBitrates: Array<number> = [];\nconst dawnOfTime = new Date(0);\n\nfunction notifyInitialState(updateStreamState: VideoStreamState => void) {\n  updateStreamState({\n    duration: 0,\n    position: 0,\n    playMode: 'ondemand',\n    playState: 'inactive',\n    isBuffering: false,\n    isPaused: false,\n    isSeeking: false,\n    volume: 1,\n    muted: false,\n    bufferedAhead: 0,\n    isPipAvailable: false,\n    isAirPlayAvailable: false,\n    isPipActive: false,\n    isAirPlayActive: false,\n    bitrates: emptyBitrates,\n    audioTracks: emptyTracks,\n    textTracks: emptyTracks,\n    absolutePosition: dawnOfTime,\n    absoluteStartPosition: dawnOfTime\n  });\n}\n\nfunction notifyTerminalState(updateStreamState: VideoStreamState => void) {\n  updateStreamState({\n    // duration: 0,\n    // position: 0,\n    // playMode: 'ondemand',\n    playState: 'inactive', // Different\n    isBuffering: false,\n    isPaused: false,\n    isSeeking: false,\n    // volume: 1,\n    // muted: false,\n    // bufferedAhead: 0,\n    isPipAvailable: false,\n    isAirPlayAvailable: false\n    // isPipActive: false,\n    // isAirPlayActive: false,\n    // bitrates: emptyBitrates,\n    // audioTracks: emptyTracks,\n    // textTracks: emptyTracks,\n    // absolutePosition: dawnOfTime,\n    // absoluteStartPosition: dawnOfTime\n  });\n}\n\nfunction getPlaybackLifeCycleManager(\n  updateStreamState: VideoStreamState => void,\n  pauseStreamRangeUpdater: {\n    start: () => void,\n    stop: () => void\n  },\n  log?: string => void\n) {\n  let lifeCycleStage: PlaybackLifeCycle = 'unknown';\n  log && log(lifeCycleStage);\n\n  function getStage() {\n    return lifeCycleStage;\n  }\n\n  function setStage(newValue: PlaybackLifeCycle) {\n    log && log(newValue);\n    lifeCycleStage = newValue;\n  }\n\n  function startPlaybackSession() {\n    setStage('new');\n    notifyInitialState(updateStreamState);\n    pauseStreamRangeUpdater.stop();\n  }\n\n  function endPlaybackSession(endStage?: PlaybackLifeCycle) {\n    if (endStage) {\n      setStage(endStage);\n    }\n    notifyTerminalState(updateStreamState);\n    pauseStreamRangeUpdater.stop();\n  }\n\n  function cleanup() {\n    pauseStreamRangeUpdater.stop();\n  }\n\n  return {\n    startPlaybackSession,\n    endPlaybackSession,\n    getStage,\n    setStage,\n    cleanup\n  };\n}\n\nexport default getPlaybackLifeCycleManager;\n"]},"metadata":{},"sourceType":"script"}