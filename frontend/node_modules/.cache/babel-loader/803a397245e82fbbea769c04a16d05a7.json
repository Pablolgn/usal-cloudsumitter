{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _common = require(\"../../../common\");\n\nconst saneNumberFilter = value => value == null || isNaN(value) || value === Infinity || typeof value !== 'number' || value < 0 ? 0 : value;\n\nconst defaultFilters = {\n  position: saneNumberFilter,\n  duration: saneNumberFilter,\n  volume: saneNumberFilter\n};\n\nfunction getFilteredStreamStateUpdater(videoStreamer, filters = defaultFilters) {\n  const currentValues = {};\n\n  function update(property) {\n    const callback = videoStreamer.props && videoStreamer.props.onStreamStateChange;\n\n    if (callback) {\n      // $FlowFixMe Yet to understand how to safely iterate through objects as maps.\n      Object.entries(property).forEach(([key, value]) => {\n        const saneValue = filters[key] ? filters[key](value) : value;\n\n        if ((0, _common.isDifferent)(currentValues[key], saneValue)) {\n          // $FlowFixMe\n          currentValues[key] = saneValue;\n          callback({\n            [key]: saneValue\n          });\n        }\n      });\n    }\n  }\n\n  return update;\n}\n\nvar _default = getFilteredStreamStateUpdater;\nexports.default = _default;","map":{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/common/filteredStreamStateUpdater.js"],"names":["saneNumberFilter","value","isNaN","defaultFilters","position","duration","volume","filters","currentValues","callback","videoStreamer","Object","saneValue","getFilteredStreamStateUpdater"],"mappings":";;;;;;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AASA,MAAMA,gBAAgB,GAAOC,KAAJ,IACvBA,KAAK,IAALA,IAAAA,IAAiBC,KAAK,CAAtBD,KAAsB,CAAtBA,IAAiCA,KAAK,KAAtCA,QAAAA,IAAuD,OAAA,KAAA,KAAvDA,QAAAA,IAAoFA,KAAK,GAAzFA,CAAAA,GAAAA,CAAAA,GADF,KAAA;;AAGA,MAAME,cAAc,GAAG;AACrBC,EAAAA,QAAQ,EADa,gBAAA;AAErBC,EAAAA,QAAQ,EAFa,gBAAA;AAGrBC,EAAAA,MAAM,EAAEN;AAHa,CAAvB;;AAQA,SAAA,6BAAA,CAAA,aAAA,EAEEO,OAAiD,GAFnD,cAAA,EAGE;AACA,QAAMC,aAA+B,GAArC,EAAA;;AAEA,WAAA,MAAA,CAAA,QAAA,EAA4C;AAC1C,UAAMC,QAAQ,GAAGC,aAAa,CAAbA,KAAAA,IAAuBA,aAAa,CAAbA,KAAAA,CAAxC,mBAAA;;AACA,QAAA,QAAA,EAAc;AACZ;AACAC,MAAAA,MAAM,CAANA,OAAAA,CAAAA,QAAAA,EAAAA,OAAAA,CAAiC,CAAC,CAAA,GAAA,EAAD,KAAC,CAAD,KAAkB;AACjD,cAAMC,SAAS,GAAGL,OAAO,CAAPA,GAAO,CAAPA,GAAeA,OAAO,CAAPA,GAAO,CAAPA,CAAfA,KAAeA,CAAfA,GAAlB,KAAA;;AACA,YAAI,CAAA,GAAA,OAAA,CAAA,WAAA,EAAYC,aAAa,CAAzB,GAAyB,CAAzB,EAAJ,SAAI,CAAJ,EAAgD;AAC9C;AACAA,UAAAA,aAAa,CAAbA,GAAa,CAAbA,GAAAA,SAAAA;AACAC,UAAAA,QAAQ,CAAC;AAAE,aAAA,GAAA,GAAOG;AAAT,WAAD,CAARH;AACD;AANHE,OAAAA;AAQD;AACF;;AACD,SAAA,MAAA;AACD;;eAEcE,6B","sourcesContent":["// @flow\nimport { type VideoStreamState } from '../types';\nimport { isDifferent } from '../../../common';\nimport type { VideoStreamerImplProps, VideoStreamStateKeys, VideoStreamStateValues } from '../types';\nimport type { SimplifiedVideoStreamer } from './types';\nimport type { VideoStreamerConfiguration } from '../types';\n\ndeclare class Object {\n  static entries<TKey, TValue>({ [key: TKey]: TValue }): [TKey, TValue][];\n}\n\nconst saneNumberFilter = <T>(value: ?T) =>\n  value == null || isNaN(value) || value === Infinity || typeof value !== 'number' || value < 0 ? 0 : value;\n\nconst defaultFilters = {\n  position: saneNumberFilter,\n  duration: saneNumberFilter,\n  volume: saneNumberFilter\n};\n\nexport type SanityFilter = <T: ?VideoStreamStateValues>(val: T) => T;\n\nfunction getFilteredStreamStateUpdater<C: VideoStreamerConfiguration, P: VideoStreamerImplProps<C>>(\n  videoStreamer: SimplifiedVideoStreamer<C, P>,\n  filters: { [VideoStreamStateKeys]: SanityFilter } = defaultFilters\n) {\n  const currentValues: VideoStreamState = {};\n\n  function update(property: VideoStreamState) {\n    const callback = videoStreamer.props && videoStreamer.props.onStreamStateChange;\n    if (callback) {\n      // $FlowFixMe Yet to understand how to safely iterate through objects as maps.\n      Object.entries(property).forEach(([key, value]) => {\n        const saneValue = filters[key] ? filters[key](value) : value;\n        if (isDifferent(currentValues[key], saneValue)) {\n          // $FlowFixMe\n          currentValues[key] = saneValue;\n          callback({ [key]: saneValue });\n        }\n      });\n    }\n  }\n  return update;\n}\n\nexport default getFilteredStreamStateUpdater;\n"]},"metadata":{},"sourceType":"script"}