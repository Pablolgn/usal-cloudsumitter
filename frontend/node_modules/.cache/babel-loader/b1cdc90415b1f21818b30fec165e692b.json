{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _common = require(\"../components/common\");\n\nvar _ControlsBar = _interopRequireDefault(require(\"../components/controls/ControlsBar/ControlsBar\"));\n\nvar _FullscreenButton = _interopRequireDefault(require(\"../components/controls/FullscreenButton/FullscreenButton\"));\n\nvar _ExitButton = _interopRequireDefault(require(\"../components/controls/ExitButton/ExitButton\"));\n\nvar _PlaybackMonitor = _interopRequireDefault(require(\"../components/controls/PlaybackMonitor/PlaybackMonitor\"));\n\nvar _connectedControls = require(\"../components/player/PlayerController/connectedControls\");\n\nvar _connectControl = require(\"../components/player/PlayerController/connectControl\");\n\nvar _RenderIfEnabled = _interopRequireDefault(require(\"../components/player/RenderIfEnabled\"));\n\nvar _PreferredSettingsApplicator = _interopRequireDefault(require(\"../components/player/settings-helpers/PreferredSettingsApplicator\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst AudioSelector = _connectedControls.SettingsStorage.AudioSelector,\n      SubtitlesSelector = _connectedControls.SettingsStorage.SubtitlesSelector,\n      Volume = _connectedControls.SettingsStorage.Volume;\n\nconst getSkipBackOffset = conf => conf && conf.controls && conf.controls.skipButtonOffset;\n\nconst getLiveDisplayMode = conf => conf && conf.controls && conf.controls.liveDisplayMode;\n\nconst getQSStrategy = conf => conf && conf.controls && conf.controls.qualitySelectionStrategy;\n\nconst merge = (strings, graphics) => {\n  const merged = {};\n  Object.entries(strings).forEach(([control, props]) => {\n    merged[control] = _objectSpread({}, merged[control], {}, props);\n  });\n  Object.entries(graphics).forEach(([control, props]) => {\n    merged[control] = _objectSpread({}, merged[control], {}, props);\n  });\n  return merged;\n}; // The following method is assembling all controls into the player UI. Create a copy for assembling custom player UIs.\n\n\nconst getPlayerUIRenderer = (graphics, strings, classNamePrefix = _common.defaultClassNamePrefix) => {\n  const u = merge(strings, graphics);\n\n  const renderPlayerUI = ({\n    configuration,\n    externalProps\n  }) => {\n    const prefix = {\n      classNamePrefix: configuration && configuration.classNamePrefix || classNamePrefix\n    };\n    const includedControlsList = configuration.controls && configuration.controls.includeControls;\n    return /*#__PURE__*/React.createElement(_connectedControls.PlayerUIContainer, _extends({\n      configuration: configuration\n    }, prefix, {\n      render: ({\n        fullscreenState\n      }) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_connectControl.ControlledVideoStreamer, prefix), /*#__PURE__*/React.createElement(_RenderIfEnabled.default, {\n        configuration: includedControlsList\n      }, /*#__PURE__*/React.createElement(_ExitButton.default, _extends({}, u.exitButton, prefix, {\n        onClick: externalProps && externalProps.onExit\n      })), /*#__PURE__*/React.createElement(_PlaybackMonitor.default, _extends({}, u.playbackMonitor, {\n        configuration: configuration\n      }))), /*#__PURE__*/React.createElement(_ControlsBar.default, prefix, /*#__PURE__*/React.createElement(_RenderIfEnabled.default, {\n        configuration: includedControlsList\n      }, /*#__PURE__*/React.createElement(_connectedControls.PlayPauseButton, _extends({}, u.playPauseButton, prefix)), /*#__PURE__*/React.createElement(_connectedControls.SkipButton, _extends({}, u.skipButton, prefix, {\n        offset: getSkipBackOffset(configuration)\n      })), /*#__PURE__*/React.createElement(_connectedControls.Timeline, _extends({}, u.timeline, prefix), /*#__PURE__*/React.createElement(_connectedControls.TimelineInformation, prefix)), /*#__PURE__*/React.createElement(_connectedControls.TimeDisplay, _extends({}, u.timeDisplay, prefix, {\n        liveDisplayMode: getLiveDisplayMode(configuration)\n      })), /*#__PURE__*/React.createElement(_connectedControls.GotoLiveButton, _extends({}, u.gotoLiveButton, prefix)), /*#__PURE__*/React.createElement(Volume, _extends({}, u.volume, prefix, {\n        configuration: configuration\n      })), /*#__PURE__*/React.createElement(AudioSelector, _extends({}, u.audioSelector, prefix, {\n        configuration: configuration\n      })), /*#__PURE__*/React.createElement(SubtitlesSelector, _extends({}, u.subtitlesSelector, prefix, {\n        configuration: configuration\n      })), /*#__PURE__*/React.createElement(_connectedControls.QualitySelector, _extends({}, u.qualitySelector, prefix, {\n        selectionStrategy: getQSStrategy(configuration)\n      })), /*#__PURE__*/React.createElement(_connectedControls.PipButton, _extends({}, u.pipButton, prefix)), /*#__PURE__*/React.createElement(_connectedControls.AirPlayButton, _extends({}, u.airPlayButton, prefix)), /*#__PURE__*/React.createElement(_FullscreenButton.default, _extends({}, u.fullscreenButton, prefix, fullscreenState)))), /*#__PURE__*/React.createElement(_connectedControls.BufferingIndicator, _extends({}, u.bufferingIndicator, prefix)), /*#__PURE__*/React.createElement(_PreferredSettingsApplicator.default, _extends({\n        configuration: configuration\n      }, externalProps.initialPlaybackProps)))\n    }));\n  };\n\n  return renderPlayerUI;\n};\n\nvar _default = getPlayerUIRenderer;\nexports.default = _default;","map":{"version":3,"sources":["../src/replay/default-player/playerUI.js"],"names":["AudioSelector","SubtitlesSelector","Volume","SettingsStorage","getSkipBackOffset","conf","getLiveDisplayMode","getQSStrategy","merge","merged","Object","getPlayerUIRenderer","classNamePrefix","defaultClassNamePrefix","u","renderPlayerUI","externalProps","prefix","configuration","includedControlsList","fullscreenState","onExit"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport type { RenderMethod } from '../components/player/PlayerController/PlayerController';\nimport type {\n  GraphicAndStringResources,\n  GraphicResources,\n  PlayerConfiguration,\n  StringResources,\n  UIResources\n} from './types';\nimport { defaultClassNamePrefix } from '../components/common';\n\n// Non-connected controls\nimport ControlsBar from '../components/controls/ControlsBar/ControlsBar';\nimport FullscreenButton from '../components/controls/FullscreenButton/FullscreenButton';\nimport ExitButton from '../components/controls/ExitButton/ExitButton';\n\n// Connected controls\nimport PlaybackMonitor from '../components/controls/PlaybackMonitor/PlaybackMonitor';\nimport {\n  BufferingIndicator,\n  GotoLiveButton,\n  PlayerUIContainer,\n  PlayPauseButton,\n  QualitySelector,\n  SettingsStorage,\n  SkipButton,\n  TimeDisplay,\n  TimelineInformation,\n  Timeline,\n  PipButton,\n  AirPlayButton\n} from '../components/player/PlayerController/connectedControls';\nimport { ControlledVideoStreamer } from '../components/player/PlayerController/connectControl';\nimport RenderIfEnabled from '../components/player/RenderIfEnabled';\nimport PreferredSettingsApplicator from '../components/player/settings-helpers/PreferredSettingsApplicator';\n\nconst { AudioSelector, SubtitlesSelector, Volume } = SettingsStorage;\nconst getSkipBackOffset = (conf: PlayerConfiguration) => conf && conf.controls && conf.controls.skipButtonOffset;\nconst getLiveDisplayMode = (conf: PlayerConfiguration) => conf && conf.controls && conf.controls.liveDisplayMode;\nconst getQSStrategy = (conf: PlayerConfiguration) => conf && conf.controls && conf.controls.qualitySelectionStrategy;\n\ndeclare class Object {\n  static entries<TKey, TValue>({ [key: TKey]: TValue }): [TKey, TValue][];\n}\n\nconst merge = (\n  strings: UIResources<StringResources>,\n  graphics: UIResources<GraphicResources>\n): UIResources<GraphicAndStringResources> => {\n  const merged = {};\n  Object.entries(strings).forEach(([control, props]) => {\n    merged[control] = { ...merged[control], ...props };\n  });\n  Object.entries(graphics).forEach(([control, props]) => {\n    merged[control] = { ...merged[control], ...props };\n  });\n  return merged;\n};\n\n// The following method is assembling all controls into the player UI. Create a copy for assembling custom player UIs.\n\nconst getPlayerUIRenderer = (\n  graphics: UIResources<GraphicResources>,\n  strings: UIResources<StringResources>,\n  classNamePrefix?: string = defaultClassNamePrefix\n) => {\n  const u = merge(strings, graphics);\n  const renderPlayerUI: RenderMethod = ({ configuration, externalProps }) => {\n    const prefix = { classNamePrefix: (configuration && configuration.classNamePrefix) || classNamePrefix };\n    const includedControlsList = configuration.controls && configuration.controls.includeControls;\n    return (\n      <PlayerUIContainer\n        configuration={configuration}\n        {...prefix}\n        render={({ fullscreenState }) => (\n          <>\n            <ControlledVideoStreamer {...prefix} />\n            <RenderIfEnabled configuration={includedControlsList}>\n              <ExitButton {...u.exitButton} {...prefix} onClick={externalProps && externalProps.onExit} />\n              <PlaybackMonitor {...u.playbackMonitor} configuration={configuration} />\n            </RenderIfEnabled>\n            <ControlsBar {...prefix}>\n              <RenderIfEnabled configuration={includedControlsList}>\n                <PlayPauseButton {...u.playPauseButton} {...prefix} />\n                <SkipButton {...u.skipButton} {...prefix} offset={getSkipBackOffset(configuration)} />\n                <Timeline {...u.timeline} {...prefix}>\n                  <TimelineInformation {...prefix} />\n                </Timeline>\n                <TimeDisplay {...u.timeDisplay} {...prefix} liveDisplayMode={getLiveDisplayMode(configuration)} />\n                <GotoLiveButton {...u.gotoLiveButton} {...prefix} />\n                <Volume {...u.volume} {...prefix} configuration={configuration} />\n                <AudioSelector {...u.audioSelector} {...prefix} configuration={configuration} />\n                <SubtitlesSelector {...u.subtitlesSelector} {...prefix} configuration={configuration} />\n                <QualitySelector {...u.qualitySelector} {...prefix} selectionStrategy={getQSStrategy(configuration)} />\n                <PipButton {...u.pipButton} {...prefix} />\n                <AirPlayButton {...u.airPlayButton} {...prefix} />\n                <FullscreenButton {...u.fullscreenButton} {...prefix} {...fullscreenState} />\n              </RenderIfEnabled>\n            </ControlsBar>\n            <BufferingIndicator {...u.bufferingIndicator} {...prefix} />\n            <PreferredSettingsApplicator configuration={configuration} {...externalProps.initialPlaybackProps} />\n          </>\n        )}\n      />\n    );\n  };\n  return renderPlayerUI;\n};\n\nexport default getPlayerUIRenderer;\n"]},"metadata":{},"sourceType":"script"}