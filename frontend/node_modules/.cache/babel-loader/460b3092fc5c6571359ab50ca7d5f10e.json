{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _crossBrowserFullscreen = require(\"./ponyfills/crossBrowserFullscreen\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass Fullscreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"fullscreenTarget\", void 0);\n\n    _defineProperty(this, \"unsubscribe\", void 0);\n\n    _defineProperty(this, \"onRef\", element => {\n      this.fullscreenTarget = element;\n      this.setState({\n        isFullscreen: (0, _crossBrowserFullscreen.getFullscreenElement)() === element\n      });\n    });\n\n    _defineProperty(this, \"onFullscreenChange\", () => {\n      const fullscreenElement = (0, _crossBrowserFullscreen.getFullscreenElement)();\n      this.setState({\n        isFullscreen: !!(fullscreenElement && fullscreenElement === this.fullscreenTarget)\n      });\n    });\n\n    _defineProperty(this, \"enterFullscreen\", () => {\n      if (this.fullscreenTarget) {\n        (0, _crossBrowserFullscreen.enterFullscreen)(this.fullscreenTarget);\n      }\n    });\n\n    _defineProperty(this, \"exitFullscreen\", () => {\n      if (this.fullscreenTarget) {\n        (0, _crossBrowserFullscreen.exitFullscreen)(this.fullscreenTarget);\n      }\n    });\n\n    _defineProperty(this, \"setProperties\", ({\n      isFullscreen\n    } = {}) => {\n      if (isFullscreen) {\n        this.enterFullscreen();\n      } else {\n        this.exitFullscreen();\n      }\n    });\n\n    this.state = {\n      isFullscreen: false\n    };\n    this.unsubscribe = (0, _crossBrowserFullscreen.notifyFullscreenChange)(this.onFullscreenChange);\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe && this.unsubscribe();\n  }\n\n  render() {\n    const render = this.props.render;\n    const isFullscreen = this.state.isFullscreen;\n    const enterFullscreen = this.enterFullscreen,\n          exitFullscreen = this.exitFullscreen,\n          onRef = this.onRef,\n          setProperties = this.setProperties;\n    return render({\n      isFullscreen,\n      enterFullscreen,\n      exitFullscreen,\n      setProperties,\n      onRef\n    });\n  }\n\n}\n\nvar _default = Fullscreen;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/replay/components/player/containment-helpers/Fullscreen.js"],"names":["React","constructor","isFullscreen","componentWillUnmount","element","fullscreenElement","render","enterFullscreen","exitFullscreen","onRef","setProperties","Fullscreen"],"mappings":";;;;;;;AAEA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,uBAAA,GAAA,OAAA,CAAA,oCAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,MAAA,UAAA,SAAyBA,KAAK,CAA9B,SAAA,CAAuD;AACrDC,EAAAA,WAAW,CAAA,KAAA,EAAe;AACxB,UAAA,KAAA;;AADwB,IAAA,eAAA,CAAA,IAAA,EAAA,kBAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAajBG,OAAD,IAA2B;AACjC,WAAA,gBAAA,GAAA,OAAA;AACA,WAAA,QAAA,CAAc;AAAEF,QAAAA,YAAY,EAAE,CAAA,GAAA,uBAAA,CAAA,oBAAA,QAA2BE;AAA3C,OAAd;AAfwB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,oBAAA,EAkBL,MAAM;AACzB,YAAMC,iBAAiB,GAAG,CAAA,GAAA,uBAAA,CAA1B,oBAA0B,GAA1B;AACA,WAAA,QAAA,CAAc;AAAEH,QAAAA,YAAY,EAAE,CAAC,EAAEG,iBAAiB,IAAIA,iBAAiB,KAAK,KAA7C,gBAAA;AAAjB,OAAd;AApBwB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EAuBR,MAAM;AACtB,UAAI,KAAJ,gBAAA,EAA2B;AACzB,SAAA,GAAA,uBAAA,CAAA,eAAA,EAAgB,KAAhB,gBAAA;AACD;AA1BuB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,gBAAA,EA6BT,MAAM;AACrB,UAAI,KAAJ,gBAAA,EAA2B;AACzB,SAAA,GAAA,uBAAA,CAAA,cAAA,EAAe,KAAf,gBAAA;AACD;AAhCuB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EAmCV,CAAC;AAAEH,MAAAA;AAAF,QAAD,EAAA,KAAsD;AACpE,UAAA,YAAA,EAAkB;AAChB,aAAA,eAAA;AADF,OAAA,MAEO;AACL,aAAA,cAAA;AACD;AAxCuB,KAAA,CAAA;;AAExB,SAAA,KAAA,GAAa;AAAEA,MAAAA,YAAY,EAAE;AAAhB,KAAb;AACA,SAAA,WAAA,GAAmB,CAAA,GAAA,uBAAA,CAAA,sBAAA,EAAuB,KAA1C,kBAAmB,CAAnB;AACD;;AAKDC,EAAAA,oBAAoB,GAAG;AACrB,SAAA,WAAA,IAAoB,KAApB,WAAoB,EAApB;AACD;;AAgCDG,EAAAA,MAAM,GAAG;AAAA,UACCA,MADD,GACY,KADZ,KACY,CADZ,MAAA;AAAA,UAECJ,YAFD,GAEkB,KAFlB,KAEkB,CAFlB,YAAA;AAAA,UAGCK,eAHD,GAAA,KAAA,eAAA;AAAA,UAGkBC,cAHlB,GAAA,KAAA,cAAA;AAAA,UAGkCC,KAHlC,GAAA,KAAA,KAAA;AAAA,UAGyCC,aAHzC,GAAA,KAAA,aAAA;AAIP,WAAOJ,MAAM,CAAC;AAAA,MAAA,YAAA;AAAA,MAAA,eAAA;AAAA,MAAA,cAAA;AAAA,MAAA,aAAA;AAAgEG,MAAAA;AAAhE,KAAD,CAAb;AACD;;AAjDoD;;eAmDxCE,U","sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport {\n  enterFullscreen,\n  exitFullscreen,\n  getFullscreenElement,\n  notifyFullscreenChange\n} from './ponyfills/crossBrowserFullscreen';\n\nexport type FullscreenState = {\n  isFullscreen: boolean,\n  setProperties: ({ isFullscreen: boolean }) => void,\n  enterFullscreen: () => void,\n  exitFullscreen: () => void\n};\n\ntype FullscreenRenderParameters = FullscreenState & {\n  onRef: (?HTMLElement) => void\n};\n\ntype Props = {\n  render: FullscreenRenderParameters => React.Node\n};\n\ntype State = {\n  isFullscreen: boolean\n};\n\nclass Fullscreen extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isFullscreen: false };\n    this.unsubscribe = notifyFullscreenChange(this.onFullscreenChange);\n  }\n\n  fullscreenTarget: ?HTMLElement;\n  unsubscribe: () => void;\n\n  componentWillUnmount() {\n    this.unsubscribe && this.unsubscribe();\n  }\n\n  onRef = (element: ?HTMLElement) => {\n    this.fullscreenTarget = element;\n    this.setState({ isFullscreen: getFullscreenElement() === element });\n  };\n\n  onFullscreenChange = () => {\n    const fullscreenElement = getFullscreenElement();\n    this.setState({ isFullscreen: !!(fullscreenElement && fullscreenElement === this.fullscreenTarget) });\n  };\n\n  enterFullscreen = () => {\n    if (this.fullscreenTarget) {\n      enterFullscreen(this.fullscreenTarget);\n    }\n  };\n\n  exitFullscreen = () => {\n    if (this.fullscreenTarget) {\n      exitFullscreen(this.fullscreenTarget);\n    }\n  };\n\n  setProperties = ({ isFullscreen }: { isFullscreen: boolean } = {}) => {\n    if (isFullscreen) {\n      this.enterFullscreen();\n    } else {\n      this.exitFullscreen();\n    }\n  };\n\n  render() {\n    const { render } = this.props;\n    const { isFullscreen } = this.state;\n    const { enterFullscreen, exitFullscreen, onRef, setProperties } = this;\n    return render({ isFullscreen, enterFullscreen, exitFullscreen, setProperties, onRef });\n  }\n}\nexport default Fullscreen;\n"]},"metadata":{},"sourceType":"script"}