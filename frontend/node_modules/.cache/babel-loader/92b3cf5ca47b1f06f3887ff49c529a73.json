{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _common = require(\"../../common\");\n\nvar _ToggleButton = _interopRequireDefault(require(\"../../generic/ToggleButton/ToggleButton\"));\n\nvar _Slider = _interopRequireDefault(require(\"../../generic/Slider/Slider\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst className = 'volume';\nconst disabledClassName = 'volume-disabled';\nconst muteToggleClassName = 'mute-toggle';\nconst volumeSliderClassName = 'volume-slider';\nconst volumeSliderHandleClassName = 'volume-slider-handle';\nconst volumeSliderTrackClassName = 'volume-slider-track';\nconst maxVolume = 1;\n\nclass Volume extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleMuteToggleClick\", isMuted => {\n      if (this.props.setProperties) {\n        this.props.setProperties({\n          isMuted\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleVolumeSliderChange\", volume => {\n      const setProperties = this.props.setProperties;\n\n      if (setProperties) {\n        setProperties({\n          isMuted: false,\n          volume\n        });\n      }\n    });\n  }\n\n  render() {\n    const isIos = navigator.userAgent.match(/(iPad|iPhone|iPod)/i);\n    const _this$props = this.props,\n          volume = _this$props.volume,\n          isMuted = _this$props.isMuted,\n          label = _this$props.label,\n          volumeSliderLabel = _this$props.volumeSliderLabel,\n          muteToggleLabel = _this$props.muteToggleLabel,\n          classNamePrefix = _this$props.classNamePrefix,\n          mutedContent = _this$props.mutedContent,\n          unmutedContent = _this$props.unmutedContent,\n          volumeSliderHandleContent = _this$props.volumeSliderHandleContent,\n          volumeSliderTrackContent = _this$props.volumeSliderTrackContent;\n    const prefixedClassName = (0, _common.prefixClassNames)(classNamePrefix, className, isIos && disabledClassName);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: prefixedClassName,\n      title: label\n    }, /*#__PURE__*/React.createElement(_ToggleButton.default, {\n      label: muteToggleLabel,\n      isOn: isMuted,\n      toggledOffContent: unmutedContent,\n      toggledOnContent: mutedContent,\n      onToggle: this.handleMuteToggleClick,\n      classNamePrefix: classNamePrefix,\n      className: muteToggleClassName\n    }), !isIos && /*#__PURE__*/React.createElement(_Slider.default, {\n      label: volumeSliderLabel,\n      value: isMuted ? 0 : volume,\n      maxValue: maxVolume,\n      handleContent: volumeSliderHandleContent,\n      trackContent: volumeSliderTrackContent,\n      onValueChange: this.handleVolumeSliderChange,\n      classNamePrefix: classNamePrefix,\n      className: volumeSliderClassName,\n      trackClassName: volumeSliderTrackClassName,\n      handleClassName: volumeSliderHandleClassName\n    }));\n  }\n\n}\n\n_defineProperty(Volume, \"defaultProps\", {\n  classNamePrefix: _common.defaultClassNamePrefix\n});\n\n_defineProperty(Volume, \"streamStateKeysForObservation\", ['volume', 'isMuted']);\n\nVolume.displayName = 'Volume';\nvar _default = Volume;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/replay/components/controls/Volume/Volume.js"],"names":["className","disabledClassName","muteToggleClassName","volumeSliderClassName","volumeSliderHandleClassName","volumeSliderTrackClassName","maxVolume","Volume","React","classNamePrefix","defaultClassNamePrefix","isMuted","volume","setProperties","render","isIos","navigator","label","volumeSliderLabel","muteToggleLabel","mutedContent","unmutedContent","volumeSliderHandleContent","volumeSliderTrackContent","prefixedClassName"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { defaultClassNamePrefix, prefixClassNames } from '../../common';\nimport type { CommonProps } from '../../common';\nimport ToggleButton from '../../generic/ToggleButton/ToggleButton';\nimport Slider from '../../generic/Slider/Slider';\nimport type { StreamStateKeysForObservation } from '../../player/PlayerController/ControllerContext';\n\ntype Props = CommonProps & {\n  /** ⇘︎ The current volume level, a number between 0 and 1. */\n  volume?: number,\n  /** ⇘︎ The current mute state. false means unmuted. */\n  isMuted?: boolean,\n  volumeSliderLabel?: string,\n  muteToggleLabel?: string,\n  /** Element(s) displayed when isMuted is set to true The convention is to display a disabled or \"silent\" loudspeaker icon. */\n  mutedContent: React.Node,\n  /** Element(s) displayed when isMuted is set to false The convention is to display a loudspeaker icon with sound waves. */\n  unmutedContent: React.Node,\n  volumeSliderHandleContent?: React.Node,\n  volumeSliderTrackContent?: React.Node,\n  /** ⇗ This callback is invoked with { isMuted: true } or { isMuted: false } when the mute button is toggled. If the volume slider handle position is changed, it is invoked with { volume: newLevel } */\n  setProperties?: ({ volume: number } | { isMuted: boolean }) => void\n};\n\nconst className = 'volume';\nconst disabledClassName = 'volume-disabled';\nconst muteToggleClassName = 'mute-toggle';\nconst volumeSliderClassName = 'volume-slider';\nconst volumeSliderHandleClassName = 'volume-slider-handle';\nconst volumeSliderTrackClassName = 'volume-slider-track';\nconst maxVolume = 1;\n\nclass Volume extends React.Component<Props> {\n  static defaultProps = {\n    classNamePrefix: defaultClassNamePrefix\n  };\n\n  static streamStateKeysForObservation: StreamStateKeysForObservation = ['volume', 'isMuted'];\n\n  handleMuteToggleClick = (isMuted: boolean) => {\n    if (this.props.setProperties) {\n      this.props.setProperties({ isMuted });\n    }\n  };\n\n  handleVolumeSliderChange = (volume: number) => {\n    const setProperties = this.props.setProperties;\n    if (setProperties) {\n      setProperties({ isMuted: false, volume });\n    }\n  };\n\n  render() {\n    const isIos = navigator.userAgent.match(/(iPad|iPhone|iPod)/i);\n    const {\n      volume,\n      isMuted,\n      label,\n      volumeSliderLabel,\n      muteToggleLabel,\n      classNamePrefix,\n      mutedContent,\n      unmutedContent,\n      volumeSliderHandleContent,\n      volumeSliderTrackContent\n    } = this.props;\n    const prefixedClassName = prefixClassNames(classNamePrefix, className, isIos && disabledClassName);\n    return (\n      <div className={prefixedClassName} title={label}>\n        <ToggleButton\n          label={muteToggleLabel}\n          isOn={isMuted}\n          toggledOffContent={unmutedContent}\n          toggledOnContent={mutedContent}\n          onToggle={this.handleMuteToggleClick}\n          classNamePrefix={classNamePrefix}\n          className={muteToggleClassName}\n        />\n        {!isIos && (\n          <Slider\n            label={volumeSliderLabel}\n            value={isMuted ? 0 : volume}\n            maxValue={maxVolume}\n            handleContent={volumeSliderHandleContent}\n            trackContent={volumeSliderTrackContent}\n            onValueChange={this.handleVolumeSliderChange}\n            classNamePrefix={classNamePrefix}\n            className={volumeSliderClassName}\n            trackClassName={volumeSliderTrackClassName}\n            handleClassName={volumeSliderHandleClassName}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nVolume.displayName = 'Volume';\nexport default Volume;\n"]},"metadata":{},"sourceType":"script"}