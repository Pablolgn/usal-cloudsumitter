{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _ControllerContext = _interopRequireDefault(require(\"./ControllerContext\"));\n\nvar _common = require(\"../../common\");\n\nvar _memoizeOne = _interopRequireDefault(require(\"memoize-one\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst passPropsToVideoStreamer = (children, props) => {\n  return React.Children.map(children, (child, i) => {\n    if (i === 0) {\n      return React.cloneElement(child, props);\n    } else {\n      return child;\n    }\n  })[0];\n};\n\nconst getObserveManager = () => {\n  const observers = {};\n\n  const observe = (key, callback) => {\n    if (!(key in observers)) {\n      observers[key] = [];\n    }\n\n    observers[key].push(callback);\n  };\n\n  const unobserve = (key, callback) => {\n    if (Array.isArray(observers[key])) {\n      const index = observers[key].indexOf(callback);\n\n      if (index !== -1) {\n        observers[key].splice(index, 1);\n      }\n    }\n  };\n\n  const unobserveAll = () => {\n    Object.entries(observers).forEach(([key, handlers]) => {\n      while (handlers.length) {\n        handlers.pop();\n      }\n    });\n  };\n\n  const update = prop => {\n    Object.keys(prop).forEach(key => {\n      if (Array.isArray(observers[key])) {\n        observers[key].forEach(callback => {\n          callback(prop);\n        });\n      }\n    });\n  };\n\n  return {\n    observe,\n    unobserve,\n    update,\n    unobserveAll\n  };\n};\n\nconst createPlaybackActions = (inspect, setProperties) => {\n  const play = () => setProperties({\n    isPaused: false\n  });\n\n  const pause = () => setProperties({\n    isPaused: true\n  });\n\n  const setPosition = position => setProperties({\n    position\n  });\n\n  const gotoLive = () => setProperties({\n    isAtLiveEdge: true\n  });\n\n  const setVolume = volume => setProperties({\n    volume\n  });\n\n  const setIsMuted = isMuted => setProperties({\n    isMuted\n  });\n\n  const mute = () => setProperties({\n    isMuted: true\n  });\n\n  const unmute = () => setProperties({\n    isMuted: false\n  });\n\n  const requestPictureInPicture = () => setProperties({\n    isPipActive: true\n  });\n\n  const exitPictureInPicture = () => setProperties({\n    isPipActive: false\n  });\n\n  const showAirPlayTargetPicker = () => setProperties({\n    isAirPlayTargetPickerVisible: true\n  });\n\n  const setSelectedTextTrack = selectedTextTrack => setProperties({\n    selectedTextTrack\n  });\n\n  const setSelectedAudioTrack = selectedAudioTrack => setProperties({\n    selectedAudioTrack\n  });\n\n  const capBitrate = bitrateCap => setProperties({\n    bitrateCap\n  });\n\n  const fixBitrate = bitrateFix => setProperties({\n    bitrateFix\n  });\n\n  return {\n    play,\n    pause,\n    setPosition,\n    gotoLive,\n    setVolume,\n    setIsMuted,\n    mute,\n    unmute,\n    requestPictureInPicture,\n    exitPictureInPicture,\n    showAirPlayTargetPicker,\n    setSelectedAudioTrack,\n    setSelectedTextTrack,\n    capBitrate,\n    fixBitrate,\n    setProperties,\n    inspect\n  };\n};\n\nclass PlayerController extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    _defineProperty(this, \"inspectableStreamState\", {});\n\n    _defineProperty(this, \"observeManager\", getObserveManager());\n\n    _defineProperty(this, \"inspect\", () => this.inspectableStreamState);\n\n    _defineProperty(this, \"mergeConfiguration\", (0, _memoizeOne.default)(_common.override));\n\n    _defineProperty(this, \"setProperties\", props => this.state.setProperties(props));\n\n    _defineProperty(this, \"onVideoStreamerReady\", ({\n      setProperties\n    }) => {\n      this.inspectableStreamState = {};\n      this.setState({\n        setProperties\n      });\n    });\n\n    _defineProperty(this, \"onStreamStateChange\", property => {\n      // if (!('position' in property) && !('bufferedAhead' in property)) { console.log('Updating %s', Object.keys(property).join(', '), property); }\n      this.observeManager.update(property);\n      this.inspectableStreamState = _objectSpread({}, this.inspectableStreamState, {}, property);\n\n      if (this.props.onStreamStateChange) {\n        this.props.onStreamStateChange(property);\n      }\n    });\n\n    const videoStreamerProps = {\n      initialPlaybackProps: this.props.initialPlaybackProps,\n      //TODO: This is overwritten by preferred settings. Reconsider.\n      onReady: this.onVideoStreamerReady,\n      onPlaybackError: this.props.onStreamerError,\n      onStreamStateChange: this.onStreamStateChange\n    };\n    this.state = {\n      videoStreamerProps,\n      setProperties: () => {}\n    };\n  }\n\n  componentDidMount() {\n    const onReady = this.props.onPlaybackActionsReady;\n\n    if (onReady) {\n      onReady(createPlaybackActions(() => this.inspect(), props => this.setProperties(props)));\n    }\n  }\n\n  componentWillUnmount() {\n    this.observeManager.unobserveAll();\n  }\n\n  render() {\n    const _this$state = this.state,\n          setProperties = _this$state.setProperties,\n          videoStreamerProps = _this$state.videoStreamerProps;\n    const observeManager = this.observeManager;\n    const _this$props = this.props,\n          render = _this$props.render,\n          externalProps = _this$props.externalProps,\n          configuration = _this$props.configuration,\n          options = _this$props.options;\n    const mergedConfiguration = this.mergeConfiguration(configuration, options);\n    const observe = observeManager.observe,\n          unobserve = observeManager.unobserve;\n    const controllerApi = {\n      setProperties,\n      videoStreamer: passPropsToVideoStreamer(this.props.children, _objectSpread({}, videoStreamerProps, {\n        configuration: mergedConfiguration.videoStreamer\n      })),\n      observe,\n      inspect: this.inspect,\n      unobserve\n    };\n    return /*#__PURE__*/React.createElement(_ControllerContext.default.Provider, {\n      value: controllerApi\n    }, render({\n      controllerApi,\n      configuration: mergedConfiguration,\n      externalProps\n    }));\n  }\n\n}\n\nvar _default = PlayerController;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/replay/components/player/PlayerController/PlayerController.js"],"names":["passPropsToVideoStreamer","i","React","getObserveManager","observers","observe","key","unobserve","Array","index","unobserveAll","Object","handlers","update","prop","callback","createPlaybackActions","play","setProperties","isPaused","pause","setPosition","position","gotoLive","isAtLiveEdge","setVolume","volume","setIsMuted","isMuted","mute","unmute","requestPictureInPicture","isPipActive","exitPictureInPicture","showAirPlayTargetPicker","isAirPlayTargetPickerVisible","setSelectedTextTrack","selectedTextTrack","setSelectedAudioTrack","selectedAudioTrack","capBitrate","bitrateCap","fixBitrate","bitrateFix","inspect","constructor","videoStreamerProps","initialPlaybackProps","onReady","onPlaybackError","onStreamStateChange","componentDidMount","props","componentWillUnmount","override","property","render","observeManager","externalProps","configuration","options","mergedConfiguration","controllerApi","videoStreamer","PlayerController"],"mappings":";;;;;;;AACA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,kBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,qBAAA,CAAA,CAAA;;AAWA,IAAA,OAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA,MAAMA,wBAAwB,GAAG,CAAA,QAAA,EAAA,KAAA,KAA0D;AACzF,SAAO,KAAK,CAAL,QAAA,CAAA,GAAA,CAAA,QAAA,EAA6B,CAAA,KAAA,EAAA,CAAA,KAAc;AAChD,QAAIC,CAAC,KAAL,CAAA,EAAa;AACX,aAAOC,KAAK,CAALA,YAAAA,CAAAA,KAAAA,EAAP,KAAOA,CAAP;AADF,KAAA,MAEO;AACL,aAAA,KAAA;AACD;AALI,GAAA,EAAP,CAAO,CAAP;AADF,CAAA;;AAUA,MAAMC,iBAAiB,GAAG,MAAM;AAC9B,QAAMC,SAA6D,GAAnE,EAAA;;AAEA,QAAMC,OAAO,GAAG,CAAA,GAAA,EAAA,QAAA,KAA0D;AACxE,QAAI,EAAEC,GAAG,IAAT,SAAI,CAAJ,EAAyB;AACvBF,MAAAA,SAAS,CAATA,GAAS,CAATA,GAAAA,EAAAA;AACD;;AACDA,IAAAA,SAAS,CAATA,GAAS,CAATA,CAAAA,IAAAA,CAAAA,QAAAA;AAJF,GAAA;;AAOA,QAAMG,SAAS,GAAG,CAAA,GAAA,EAAA,QAAA,KAA0D;AAC1E,QAAIC,KAAK,CAALA,OAAAA,CAAcJ,SAAS,CAA3B,GAA2B,CAAvBI,CAAJ,EAAmC;AACjC,YAAMC,KAAK,GAAGL,SAAS,CAATA,GAAS,CAATA,CAAAA,OAAAA,CAAd,QAAcA,CAAd;;AACA,UAAIK,KAAK,KAAK,CAAd,CAAA,EAAkB;AAChBL,QAAAA,SAAS,CAATA,GAAS,CAATA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,CAAAA;AACD;AACF;AANH,GAAA;;AASA,QAAMM,YAAY,GAAG,MAAM;AACzBC,IAAAA,MAAM,CAANA,OAAAA,CAAAA,SAAAA,EAAAA,OAAAA,CAAkC,CAAC,CAAA,GAAA,EAAD,QAAC,CAAD,KAAqB;AACrD,aAAOC,QAAQ,CAAf,MAAA,EAAwB;AACtBA,QAAAA,QAAQ,CAARA,GAAAA;AACD;AAHHD,KAAAA;AADF,GAAA;;AAQA,QAAME,MAAM,GAAIC,IAAD,IAA4B;AACzCH,IAAAA,MAAM,CAANA,IAAAA,CAAAA,IAAAA,EAAAA,OAAAA,CAA0BL,GAAG,IAAI;AAC/B,UAAIE,KAAK,CAALA,OAAAA,CAAcJ,SAAS,CAA3B,GAA2B,CAAvBI,CAAJ,EAAmC;AACjCJ,QAAAA,SAAS,CAATA,GAAS,CAATA,CAAAA,OAAAA,CAAuBW,QAAQ,IAAI;AACjCA,UAAAA,QAAQ,CAARA,IAAQ,CAARA;AADFX,SAAAA;AAGD;AALHO,KAAAA;AADF,GAAA;;AAUA,SAAO;AAAA,IAAA,OAAA;AAAA,IAAA,SAAA;AAAA,IAAA,MAAA;AAILD,IAAAA;AAJK,GAAP;AArCF,CAAA;;AA6CA,MAAMM,qBAAqB,GAAG,CAAA,OAAA,EAAA,aAAA,KAAoE;AAChG,QAAMC,IAAI,GAAG,MAAMC,aAAa,CAAC;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAD,CAAhC;;AACA,QAAMC,KAAK,GAAG,MAAMF,aAAa,CAAC;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAD,CAAjC;;AACA,QAAME,WAAW,GAAIC,QAAD,IAAsBJ,aAAa,CAAC;AAAEI,IAAAA;AAAF,GAAD,CAAvD;;AACA,QAAMC,QAAQ,GAAG,MAAML,aAAa,CAAC;AAAEM,IAAAA,YAAY,EAAE;AAAhB,GAAD,CAApC;;AACA,QAAMC,SAAS,GAAIC,MAAD,IAAoBR,aAAa,CAAC;AAAEQ,IAAAA;AAAF,GAAD,CAAnD;;AACA,QAAMC,UAAU,GAAIC,OAAD,IAAsBV,aAAa,CAAC;AAAEU,IAAAA;AAAF,GAAD,CAAtD;;AACA,QAAMC,IAAI,GAAG,MAAMX,aAAa,CAAC;AAAEU,IAAAA,OAAO,EAAE;AAAX,GAAD,CAAhC;;AACA,QAAME,MAAM,GAAG,MAAMZ,aAAa,CAAC;AAAEU,IAAAA,OAAO,EAAE;AAAX,GAAD,CAAlC;;AACA,QAAMG,uBAAuB,GAAG,MAAMb,aAAa,CAAC;AAAEc,IAAAA,WAAW,EAAE;AAAf,GAAD,CAAnD;;AACA,QAAMC,oBAAoB,GAAG,MAAMf,aAAa,CAAC;AAAEc,IAAAA,WAAW,EAAE;AAAf,GAAD,CAAhD;;AACA,QAAME,uBAAuB,GAAG,MAAMhB,aAAa,CAAC;AAAEiB,IAAAA,4BAA4B,EAAE;AAAhC,GAAD,CAAnD;;AACA,QAAMC,oBAAoB,GAAIC,iBAAD,IAA8CnB,aAAa,CAAC;AAAEmB,IAAAA;AAAF,GAAD,CAAxF;;AACA,QAAMC,qBAAqB,GAAIC,kBAAD,IAAwCrB,aAAa,CAAC;AAAEqB,IAAAA;AAAF,GAAD,CAAnF;;AACA,QAAMC,UAAU,GAAIC,UAAD,IAAwBvB,aAAa,CAAC;AAAEuB,IAAAA;AAAF,GAAD,CAAxD;;AACA,QAAMC,UAAU,GAAIC,UAAD,IAAwCzB,aAAa,CAAC;AAAEyB,IAAAA;AAAF,GAAD,CAAxE;;AACA,SAAO;AAAA,IAAA,IAAA;AAAA,IAAA,KAAA;AAAA,IAAA,WAAA;AAAA,IAAA,QAAA;AAAA,IAAA,SAAA;AAAA,IAAA,UAAA;AAAA,IAAA,IAAA;AAAA,IAAA,MAAA;AAAA,IAAA,uBAAA;AAAA,IAAA,oBAAA;AAAA,IAAA,uBAAA;AAAA,IAAA,qBAAA;AAAA,IAAA,oBAAA;AAAA,IAAA,UAAA;AAAA,IAAA,UAAA;AAAA,IAAA,aAAA;AAiBLC,IAAAA;AAjBK,GAAP;AAhBF,CAAA;;AAqCA,MAAA,gBAAA,SAA+B1C,KAAK,CAApC,SAAA,CAA6F;AAC3F2C,EAAAA,WAAW,CAAA,MAAA,EAA+B;AACxC,UAAA,MAAA;;AADwC,IAAA,eAAA,CAAA,IAAA,EAAA,wBAAA,EAAA,EAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,gBAAA,EA+BzB1C,iBA/ByB,EAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAiChC,MAAM,KAjC0B,sBAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,oBAAA,EAmCrB,CAAA,GAAA,WAAA,CAAA,OAAA,EAAQmD,OAAAA,CAnCa,QAmCrB,CAnCqB,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EAqCzBF,KAAD,IAA0B,KAAA,KAAA,CAAA,aAAA,CArCA,KAqCA,CArCA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,sBAAA,EAuCnB,CAAC;AAAElC,MAAAA;AAAF,KAAD,KAA6C;AAClE,WAAA,sBAAA,GAAA,EAAA;AACA,WAAA,QAAA,CAAc;AAAEA,QAAAA;AAAF,OAAd;AAzCwC,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,qBAAA,EA6CnBqC,QAAD,IAAgC;AACpD;AACA,WAAA,cAAA,CAAA,MAAA,CAAA,QAAA;AACA,WAAA,sBAAA,GAAA,aAAA,CAAA,EAAA,EAAmC,KAAnC,sBAAA,EAAA,EAAA,EAAA,QAAA,CAAA;;AACA,UAAI,KAAA,KAAA,CAAJ,mBAAA,EAAoC;AAClC,aAAA,KAAA,CAAA,mBAAA,CAAA,QAAA;AACD;AAnDuC,KAAA,CAAA;;AAExC,UAAMT,kBAAsC,GAAG;AAC7CC,MAAAA,oBAAoB,EAAE,KAAA,KAAA,CADuB,oBAAA;AACU;AACvDC,MAAAA,OAAO,EAAE,KAFoC,oBAAA;AAG7CC,MAAAA,eAAe,EAAE,KAAA,KAAA,CAH4B,eAAA;AAI7CC,MAAAA,mBAAmB,EAAE,KAAKA;AAJmB,KAA/C;AAMA,SAAA,KAAA,GAAa;AAAA,MAAA,kBAAA;AAEXhC,MAAAA,aAAa,EAAE,MAAM,CAAE;AAFZ,KAAb;AAID;;AAEDiC,EAAAA,iBAAiB,GAAG;AAClB,UAAMH,OAAO,GAAG,KAAA,KAAA,CAAhB,sBAAA;;AACA,QAAA,OAAA,EAAa;AACXA,MAAAA,OAAO,CACLhC,qBAAqB,CACnB,MAAM,KADa,OACb,EADa,EAEnBoC,KAAK,IAAI,KAAA,aAAA,CAHbJ,KAGa,CAFU,CADhB,CAAPA;AAMD;AACF;;AAEDK,EAAAA,oBAAoB,GAAG;AACrB,SAAA,cAAA,CAAA,YAAA;AACD;;AA0BDG,EAAAA,MAAM,GAAG;AAAA,UAAA,WAAA,GACuC,KADvC,KAAA;AAAA,UACCtC,aADD,GAAA,WAAA,CAAA,aAAA;AAAA,UACgB4B,kBADhB,GAAA,WAAA,CAAA,kBAAA;AAAA,UAECW,cAFD,GAAA,KAAA,cAAA;AAAA,UAAA,WAAA,GAGmD,KAHnD,KAAA;AAAA,UAGCD,MAHD,GAAA,WAAA,CAAA,MAAA;AAAA,UAGSE,aAHT,GAAA,WAAA,CAAA,aAAA;AAAA,UAGwBC,aAHxB,GAAA,WAAA,CAAA,aAAA;AAAA,UAGuCC,OAHvC,GAAA,WAAA,CAAA,OAAA;AAIP,UAAMC,mBAAmB,GAAG,KAAA,kBAAA,CAAA,aAAA,EAA5B,OAA4B,CAA5B;AAJO,UAKCxD,OALD,GAKwBoD,cALxB,CAAA,OAAA;AAAA,UAKUlD,SALV,GAKwBkD,cALxB,CAAA,SAAA;AAMP,UAAMK,aAAa,GAAG;AAAA,MAAA,aAAA;AAEpBC,MAAAA,aAAa,EAAE/D,wBAAwB,CAAC,KAAA,KAAA,CAAD,QAAA,EAAA,aAAA,CAAA,EAAA,EAAA,kBAAA,EAAA;AAErC2D,QAAAA,aAAa,EAAEE,mBAAmB,CAACE;AAFE,OAAA,CAAA,CAFnB;AAAA,MAAA,OAAA;AAOpBnB,MAAAA,OAAO,EAAE,KAPW,OAAA;AAQpBrC,MAAAA;AARoB,KAAtB;AAWA,WAAA,aACE,KAAA,CAAA,aAAA,CAAC,kBAAA,CAAD,OAAC,CAAD,QAAA,EAAA;AAA4B,MAAA,KAAK,EAAEuD;AAAnC,KAAA,EACGN,MAAM,CAAC;AAAA,MAAA,aAAA;AAAiBG,MAAAA,aAAa,EAA9B,mBAAA;AAAqDD,MAAAA;AAArD,KAAD,CADT,CADF;AAKD;;AA7E0F;;eAgF9EM,gB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport ControllerContext from './ControllerContext';\nimport type {\n  AvailableTrack,\n  InitialPlaybackProps,\n  VideoStreamerMethods,\n  PlaybackProps,\n  VideoStreamerProps,\n  VideoStreamState,\n  VideoStreamStateKeys\n} from '../VideoStreamer/types';\nimport type { ObserveCallback, ControllerApi, SetPropertiesMethod } from './ControllerContext';\nimport { override } from '../../common';\nimport memoize from 'memoize-one';\n\ndeclare class Object {\n  static entries<TKey, TValue>({ [key: TKey]: TValue }): [TKey, TValue][];\n}\n\nexport type RenderParameters = {\n  controllerApi: ControllerApi,\n  externalProps: any,\n  configuration: any\n};\n\nexport type RenderMethod = RenderParameters => React.Node;\n\nexport type PlaybackActions = {\n  play: () => void,\n  pause: () => void,\n  setPosition: number => void,\n  gotoLive: () => void,\n  setVolume: number => void,\n  setIsMuted: boolean => void,\n  mute: () => void,\n  unmute: () => void,\n  requestPictureInPicture: () => void,\n  exitPictureInPicture: () => void,\n  showAirPlayTargetPicker: () => void,\n  setSelectedAudioTrack: AvailableTrack => void,\n  setSelectedTextTrack: (AvailableTrack | null) => void,\n  capBitrate: number => void,\n  fixBitrate: (number | 'max' | 'min') => void,\n  inspect: () => VideoStreamState,\n  setProperties: PlaybackProps => void\n};\n\ntype PlayerControllerProps = {\n  render: RenderMethod,\n  children: React.Node,\n  externalProps?: any,\n  configuration?: any,\n  options?: any,\n  onPlaybackActionsReady?: PlaybackActions => void,\n  onStreamStateChange?: VideoStreamState => void,\n  onStreamerError?: any => void,\n  initialPlaybackProps?: InitialPlaybackProps\n};\n\ntype PlayerControllerState = {\n  videoStreamerProps: VideoStreamerProps,\n  setProperties: SetPropertiesMethod\n};\n\nconst passPropsToVideoStreamer = (children: React.Node, props: any): React.Element<any> => {\n  return React.Children.map(children, (child, i) => {\n    if (i === 0) {\n      return React.cloneElement(child, props);\n    } else {\n      return child;\n    }\n  })[0];\n};\n\nconst getObserveManager = () => {\n  const observers: { [VideoStreamStateKeys]: Array<ObserveCallback> } = {};\n\n  const observe = (key: VideoStreamStateKeys, callback: ObserveCallback) => {\n    if (!(key in observers)) {\n      observers[key] = [];\n    }\n    observers[key].push(callback);\n  };\n\n  const unobserve = (key: VideoStreamStateKeys, callback: ObserveCallback) => {\n    if (Array.isArray(observers[key])) {\n      const index = observers[key].indexOf(callback);\n      if (index !== -1) {\n        observers[key].splice(index, 1);\n      }\n    }\n  };\n\n  const unobserveAll = () => {\n    Object.entries(observers).forEach(([key, handlers]) => {\n      while (handlers.length) {\n        handlers.pop();\n      }\n    });\n  };\n\n  const update = (prop: VideoStreamState) => {\n    Object.keys(prop).forEach(key => {\n      if (Array.isArray(observers[key])) {\n        observers[key].forEach(callback => {\n          callback(prop);\n        });\n      }\n    });\n  };\n\n  return {\n    observe,\n    unobserve,\n    update,\n    unobserveAll\n  };\n};\n\nconst createPlaybackActions = (inspect, setProperties: PlaybackProps => void): PlaybackActions => {\n  const play = () => setProperties({ isPaused: false });\n  const pause = () => setProperties({ isPaused: true });\n  const setPosition = (position: number) => setProperties({ position });\n  const gotoLive = () => setProperties({ isAtLiveEdge: true });\n  const setVolume = (volume: number) => setProperties({ volume });\n  const setIsMuted = (isMuted: boolean) => setProperties({ isMuted });\n  const mute = () => setProperties({ isMuted: true });\n  const unmute = () => setProperties({ isMuted: false });\n  const requestPictureInPicture = () => setProperties({ isPipActive: true });\n  const exitPictureInPicture = () => setProperties({ isPipActive: false });\n  const showAirPlayTargetPicker = () => setProperties({ isAirPlayTargetPickerVisible: true });\n  const setSelectedTextTrack = (selectedTextTrack: AvailableTrack | null) => setProperties({ selectedTextTrack });\n  const setSelectedAudioTrack = (selectedAudioTrack: AvailableTrack) => setProperties({ selectedAudioTrack });\n  const capBitrate = (bitrateCap: number) => setProperties({ bitrateCap });\n  const fixBitrate = (bitrateFix: number | 'max' | 'min') => setProperties({ bitrateFix });\n  return {\n    play,\n    pause,\n    setPosition,\n    gotoLive,\n    setVolume,\n    setIsMuted,\n    mute,\n    unmute,\n    requestPictureInPicture,\n    exitPictureInPicture,\n    showAirPlayTargetPicker,\n    setSelectedAudioTrack,\n    setSelectedTextTrack,\n    capBitrate,\n    fixBitrate,\n    setProperties,\n    inspect\n  };\n};\n\nclass PlayerController extends React.Component<PlayerControllerProps, PlayerControllerState> {\n  constructor(props: PlayerControllerProps) {\n    super(props);\n    const videoStreamerProps: VideoStreamerProps = {\n      initialPlaybackProps: this.props.initialPlaybackProps, //TODO: This is overwritten by preferred settings. Reconsider.\n      onReady: this.onVideoStreamerReady,\n      onPlaybackError: this.props.onStreamerError,\n      onStreamStateChange: this.onStreamStateChange\n    };\n    this.state = {\n      videoStreamerProps,\n      setProperties: () => {}\n    };\n  }\n\n  componentDidMount() {\n    const onReady = this.props.onPlaybackActionsReady;\n    if (onReady) {\n      onReady(\n        createPlaybackActions(\n          () => this.inspect(),\n          props => this.setProperties(props)\n        )\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.observeManager.unobserveAll();\n  }\n\n  inspectableStreamState: VideoStreamState = {};\n  observeManager = getObserveManager();\n\n  inspect = () => this.inspectableStreamState;\n\n  mergeConfiguration = memoize(override);\n\n  setProperties = (props: PlaybackProps) => this.state.setProperties(props);\n\n  onVideoStreamerReady = ({ setProperties }: VideoStreamerMethods) => {\n    this.inspectableStreamState = {};\n    this.setState({ setProperties });\n  };\n\n  // Video streamer -> UI\n  onStreamStateChange = (property: VideoStreamState) => {\n    // if (!('position' in property) && !('bufferedAhead' in property)) { console.log('Updating %s', Object.keys(property).join(', '), property); }\n    this.observeManager.update(property);\n    this.inspectableStreamState = { ...this.inspectableStreamState, ...property };\n    if (this.props.onStreamStateChange) {\n      this.props.onStreamStateChange(property);\n    }\n  };\n\n  render() {\n    const { setProperties, videoStreamerProps } = this.state;\n    const { observeManager } = this;\n    const { render, externalProps, configuration, options } = this.props;\n    const mergedConfiguration = this.mergeConfiguration(configuration, options);\n    const { observe, unobserve } = observeManager;\n    const controllerApi = {\n      setProperties,\n      videoStreamer: passPropsToVideoStreamer(this.props.children, {\n        ...videoStreamerProps,\n        configuration: mergedConfiguration.videoStreamer\n      }),\n      observe,\n      inspect: this.inspect,\n      unobserve\n    };\n\n    return (\n      <ControllerContext.Provider value={controllerApi}>\n        {render({ controllerApi, configuration: mergedConfiguration, externalProps })}\n      </ControllerContext.Provider>\n    );\n  }\n}\n\nexport default PlayerController;\n"]},"metadata":{},"sourceType":"script"}