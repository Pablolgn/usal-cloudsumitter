{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _common = require(\"../../common\");\n\nconst volumeMappings = ['low', 'medium', 'high'];\n\nconst isStreamOpen = playState => playState && playState !== 'inactive' && playState !== 'starting';\n\nconst playerStateClassNameBuilder = ({\n  isPaused,\n  isSeeking,\n  isBuffering,\n  isMuted,\n  volume,\n  isAtLiveEdge,\n  playState,\n  playMode,\n  error,\n  isUserActive,\n  isFullscreen\n}, classNameDefinitions, classNamePrefix, extraClassNames = []) => {\n  const cd = classNameDefinitions || {};\n  const resultingClassNames = []; // Is paused, playing\n\n  if (isStreamOpen(playState) && isPaused != null) {\n    if (isPaused) {\n      resultingClassNames.push(cd.isPaused);\n    } else {\n      resultingClassNames.push(cd.isPlaying);\n    }\n  }\n\n  if (isBuffering) {\n    resultingClassNames.push(cd.isBuffering);\n  }\n\n  if (isSeeking) {\n    resultingClassNames.push(cd.isSeeking);\n  }\n\n  if (isMuted) {\n    resultingClassNames.push(cd.isMuted);\n  }\n\n  if (isAtLiveEdge) {\n    resultingClassNames.push(cd.isAtLiveEdge);\n  }\n\n  if (playState === 'starting') {\n    resultingClassNames.push(cd.isStarting);\n  }\n\n  if (playMode === 'ondemand') {\n    resultingClassNames.push(cd.isOnDemand);\n  } else if (playMode === 'live') {\n    resultingClassNames.push(cd.isLive);\n  } else if (playMode === 'livedvr') {\n    resultingClassNames.push(cd.isLive);\n    resultingClassNames.push(cd.isDvrEnabled);\n  }\n\n  if (volume != null && cd.volumePrefix != null) {\n    const i = Math.min(Math.floor(volume * volumeMappings.length), volumeMappings.length - 1);\n    resultingClassNames.push(cd.volumePrefix + volumeMappings[i]);\n  }\n\n  if (isFullscreen) {\n    resultingClassNames.push(cd.isFullscreen);\n  }\n\n  if (isUserActive != null) {\n    if (isUserActive) {\n      resultingClassNames.push(cd.isUserActive);\n    } else {\n      resultingClassNames.push(cd.isUserInactive);\n    }\n  }\n\n  if (error) {\n    resultingClassNames.push(cd.isFailed);\n  }\n\n  return (0, _common.prefixClassNames)(classNamePrefix, ...resultingClassNames.concat(extraClassNames));\n};\n\nvar _default = playerStateClassNameBuilder;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/replay/components/player/containment-helpers/playerStateClassNameBuilder.js"],"names":["volumeMappings","isStreamOpen","playState","playerStateClassNameBuilder","isFullscreen","extraClassNames","cd","classNameDefinitions","resultingClassNames","isPaused","playMode","volume","i","Math","isUserActive"],"mappings":"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","sourcesContent":["// @flow\n\nimport { type PlayState, type PlayMode } from '../VideoStreamer/types';\nimport { prefixClassNames } from '../../common';\n\nexport type ClassNameKeys =\n  | 'isBuffering'\n  | 'isStarting'\n  | 'isPlaying'\n  | 'isPaused'\n  | 'isSeeking'\n  | 'isMuted'\n  | 'isAtLiveEdge'\n  | 'isLive'\n  | 'isOnDemand'\n  | 'isDvrEnabled'\n  | 'isFailed'\n  | 'isFullscreen'\n  | 'isUserActive'\n  | 'isUserInactive'\n  | 'volumePrefix';\n\nexport type RecognizedPlayerStateProperties = {\n  isPaused?: boolean,\n  isSeeking?: boolean,\n  isBuffering?: boolean,\n  isMuted?: boolean,\n  volume?: number,\n  isAtLiveEdge?: boolean,\n  playState?: PlayState,\n  playMode?: PlayMode,\n  error?: any,\n  isUserActive?: boolean,\n  isFullscreen?: boolean\n};\n\nconst volumeMappings = ['low', 'medium', 'high'];\n\nconst isStreamOpen = (playState?: PlayState) => playState && playState !== 'inactive' && playState !== 'starting';\n\nconst playerStateClassNameBuilder = (\n  {\n    isPaused,\n    isSeeking,\n    isBuffering,\n    isMuted,\n    volume,\n    isAtLiveEdge,\n    playState,\n    playMode,\n    error,\n    isUserActive,\n    isFullscreen\n  }: RecognizedPlayerStateProperties,\n  classNameDefinitions: { [ClassNameKeys]: string },\n  classNamePrefix?: string,\n  extraClassNames?: Array<string> = []\n): string => {\n  const cd = classNameDefinitions || {};\n  const resultingClassNames = [];\n\n  // Is paused, playing\n  if (isStreamOpen(playState) && isPaused != null) {\n    if (isPaused) {\n      resultingClassNames.push(cd.isPaused);\n    } else {\n      resultingClassNames.push(cd.isPlaying);\n    }\n  }\n  if (isBuffering) {\n    resultingClassNames.push(cd.isBuffering);\n  }\n  if (isSeeking) {\n    resultingClassNames.push(cd.isSeeking);\n  }\n  if (isMuted) {\n    resultingClassNames.push(cd.isMuted);\n  }\n  if (isAtLiveEdge) {\n    resultingClassNames.push(cd.isAtLiveEdge);\n  }\n  if (playState === 'starting') {\n    resultingClassNames.push(cd.isStarting);\n  }\n  if (playMode === 'ondemand') {\n    resultingClassNames.push(cd.isOnDemand);\n  } else if (playMode === 'live') {\n    resultingClassNames.push(cd.isLive);\n  } else if (playMode === 'livedvr') {\n    resultingClassNames.push(cd.isLive);\n    resultingClassNames.push(cd.isDvrEnabled);\n  }\n  if (volume != null && cd.volumePrefix != null) {\n    const i = Math.min(Math.floor(volume * volumeMappings.length), volumeMappings.length - 1);\n    resultingClassNames.push(cd.volumePrefix + volumeMappings[i]);\n  }\n  if (isFullscreen) {\n    resultingClassNames.push(cd.isFullscreen);\n  }\n  if (isUserActive != null) {\n    if (isUserActive) {\n      resultingClassNames.push(cd.isUserActive);\n    } else {\n      resultingClassNames.push(cd.isUserInactive);\n    }\n  }\n  if (error) {\n    resultingClassNames.push(cd.isFailed);\n  }\n  return prefixClassNames(classNamePrefix, ...resultingClassNames.concat(extraClassNames));\n};\n\nexport default playerStateClassNameBuilder;\n"]},"metadata":{},"sourceType":"script"}