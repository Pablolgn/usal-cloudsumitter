{"ast":null,"code":"var _jsxFileName = \"/home/pablo/go/src/gitlab.com/Pablolgn/usal-cloudsubmitter/frontend/src/components/Preview.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\n\nfunction Preview() {\n  const mount = useRef(null);\n  const [isAnimating, setAnimating] = useState(true);\n  const controls = useRef(null);\n  useEffect(() => {\n    let width = mount.current.clientWidth;\n    let height = mount.current.clientHeight;\n    let frameId;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    const material = new THREE.MeshBasicMaterial({\n      color: 0x464448\n    });\n    const cube = new THREE.Mesh(geometry, material);\n    camera.position.z = 4;\n    scene.add(cube);\n    renderer.setClearColor('#000000');\n    renderer.setSize(width, height);\n\n    var STLLoader = require('three-stl-loader')(THREE);\n\n    var loader = new STLLoader();\n    loader.load('../models/gear.stl', function (geometry) {\n      var material = new THREE.MeshPhongMaterial({\n        color: 0xff5533,\n        specular: 0x111111,\n        shininess: 200\n      });\n      var mesh = new THREE.Mesh(geometry, material);\n      mesh.position.set(0, -0.25, 0.6);\n      mesh.rotation.set(0, -Math.PI / 2, 0);\n      mesh.scale.set(0.5, 0.5, 0.5);\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      scene.add(mesh);\n    });\n\n    const renderScene = () => {\n      renderer.render(scene, camera);\n    };\n\n    const handleResize = () => {\n      width = mount.current.clientWidth;\n      height = mount.current.clientHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderScene();\n    };\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      mount.current.removeChild(renderer.domElement);\n      scene.remove(cube);\n      geometry.dispose();\n      material.dispose();\n    };\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"vis\",\n    ref: mount,\n    onClick: () => setAnimating(!isAnimating),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  });\n}\n\nexport default Preview;","map":{"version":3,"sources":["/home/pablo/go/src/gitlab.com/Pablolgn/usal-cloudsubmitter/frontend/src/components/Preview.js"],"names":["React","useRef","useEffect","useState","THREE","Preview","mount","isAnimating","setAnimating","controls","width","current","clientWidth","height","clientHeight","frameId","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","antialias","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","position","z","add","setClearColor","setSize","STLLoader","require","loader","load","MeshPhongMaterial","specular","shininess","mesh","set","rotation","Math","PI","scale","castShadow","receiveShadow","renderScene","render","handleResize","aspect","updateProjectionMatrix","window","removeEventListener","removeChild","domElement","remove","dispose"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three'\n\n\nfunction Preview(){\n\n  const mount = useRef(null)\n  const [isAnimating, setAnimating] = useState(true)\n  const controls = useRef(null)\n  \n  useEffect(() => {\n    let width = mount.current.clientWidth\n    let height = mount.current.clientHeight\n    let frameId\n\n    const scene = new THREE.Scene()\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000)\n    const renderer = new THREE.WebGLRenderer({ antialias: true })\n    const geometry = new THREE.BoxGeometry(1, 1, 1)\n    const material = new THREE.MeshBasicMaterial({ color: 0x464448})\n    const cube = new THREE.Mesh(geometry, material)\n\n    camera.position.z = 4\n    scene.add(cube)\n    renderer.setClearColor('#000000')\n    renderer.setSize(width, height)\n\n    var STLLoader = require('three-stl-loader')(THREE)\n\n    var loader = new STLLoader();\n    loader.load( '../models/gear.stl', function ( geometry ) {\n\n      var material = new THREE.MeshPhongMaterial( { color: 0xff5533, specular: 0x111111, shininess: 200 } );\n      var mesh = new THREE.Mesh( geometry, material );\n\n      mesh.position.set( 0, - 0.25, 0.6 );\n      mesh.rotation.set( 0, - Math.PI / 2, 0 );\n      mesh.scale.set( 0.5, 0.5, 0.5 );\n\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n\n      scene.add( mesh );\n\n    } );\n\n    const renderScene = () => {\n      renderer.render(scene, camera)\n    }\n\n    const handleResize = () => {\n      width = mount.current.clientWidth\n      height = mount.current.clientHeight\n      renderer.setSize(width, height)\n      camera.aspect = width / height\n      camera.updateProjectionMatrix()\n      renderScene()\n    }\n\n    \n    return () => {\n      window.removeEventListener('resize', handleResize)\n      mount.current.removeChild(renderer.domElement)\n\n      scene.remove(cube)\n      geometry.dispose()\n      material.dispose()\n    }\n  }, [])\n\n\n  return <div className=\"vis\" ref={mount} onClick={() => setAnimating(!isAnimating)} />\n}\nexport default Preview;"]},"metadata":{},"sourceType":"module"}