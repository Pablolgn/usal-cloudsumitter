{"ast":null,"code":"var _jsxFileName = \"/home/pablo/go/src/gitlab.com/Pablolgn/usal-cloudsubmitter/frontend/src/components/Preview.js\";\nimport React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as THREE from \"three\";\nconst drawerWidth = 240;\nconst useStyles = makeStyles(theme => ({\n  general: {\n    width: 30,\n    height: 30\n  }\n}));\n\nfunction Preview(props) {\n  const classes = useStyles();\n  useEffect(() => {\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    var renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight); // document.body.appendChild( renderer.domElement );\n    // use ref as a mount point of the Three.js scene instead of the document.body\n\n    this.mount.appendChild(renderer.domElement);\n    var geometry = new THREE.BoxGeometry(1, 1, 1);\n    var material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    });\n    var cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    camera.position.z = 5;\n\n    var animate = function () {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h6\",\n    className: classes.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"My online 3d printer\"), React.createElement(\"canvas\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }));\n}\n\nexport default Preview;","map":{"version":3,"sources":["/home/pablo/go/src/gitlab.com/Pablolgn/usal-cloudsubmitter/frontend/src/components/Preview.js"],"names":["React","useEffect","makeStyles","Typography","THREE","drawerWidth","useStyles","theme","general","width","height","Preview","props","classes","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","mount","appendChild","domElement","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","position","z","animate","requestAnimationFrame","rotation","x","y","render","title"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAGA,MAAMC,WAAW,GAAG,GAApB;AAEA,MAAMC,SAAS,GAAGJ,UAAU,CAACK,KAAK,KAAK;AACrCC,EAAAA,OAAO,EAAC;AACNC,IAAAA,KAAK,EAAE,EADD;AAENC,IAAAA,MAAM,EAAE;AAFF;AAD6B,CAAL,CAAN,CAA5B;;AAQA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,QAAMC,OAAO,GAAGP,SAAS,EAAzB;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,KAAK,GAAG,IAAIV,KAAK,CAACW,KAAV,EAAZ;AACA,QAAIC,MAAM,GAAG,IAAIZ,KAAK,CAACa,iBAAV,CAA6B,EAA7B,EAAiCC,MAAM,CAACC,UAAP,GAAkBD,MAAM,CAACE,WAA1D,EAAuE,GAAvE,EAA4E,IAA5E,CAAb;AACA,QAAIC,QAAQ,GAAG,IAAIjB,KAAK,CAACkB,aAAV,EAAf;AACAD,IAAAA,QAAQ,CAACE,OAAT,CAAkBL,MAAM,CAACC,UAAzB,EAAqCD,MAAM,CAACE,WAA5C,EAJc,CAKd;AACA;;AACA,SAAKI,KAAL,CAAWC,WAAX,CAAwBJ,QAAQ,CAACK,UAAjC;AACA,QAAIC,QAAQ,GAAG,IAAIvB,KAAK,CAACwB,WAAV,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CAAf;AACA,QAAIC,QAAQ,GAAG,IAAIzB,KAAK,CAAC0B,iBAAV,CAA6B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA7B,CAAf;AACA,QAAIC,IAAI,GAAG,IAAI5B,KAAK,CAAC6B,IAAV,CAAgBN,QAAhB,EAA0BE,QAA1B,CAAX;AACAf,IAAAA,KAAK,CAACoB,GAAN,CAAWF,IAAX;AACAhB,IAAAA,MAAM,CAACmB,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;;AACA,QAAIC,OAAO,GAAG,YAAY;AACxBC,MAAAA,qBAAqB,CAAED,OAAF,CAArB;AACAL,MAAAA,IAAI,CAACO,QAAL,CAAcC,CAAd,IAAmB,IAAnB;AACAR,MAAAA,IAAI,CAACO,QAAL,CAAcE,CAAd,IAAmB,IAAnB;AACApB,MAAAA,QAAQ,CAACqB,MAAT,CAAiB5B,KAAjB,EAAwBE,MAAxB;AACD,KALD;;AAMAqB,IAAAA,OAAO;AACR,GApBQ,CAAT;AAsBA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACF,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,SAAS,EAAExB,OAAO,CAAC8B,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADE,EAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJA,CADJ;AASD;;AAED,eAAehC,OAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as THREE from \"three\";\n\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  general:{\n    width: 30,\n    height: 30,\n  },\n}));\n\n\nfunction Preview(props) {\n  const classes = useStyles();\n\n  useEffect(() => {\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    var renderer = new THREE.WebGLRenderer();\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    // document.body.appendChild( renderer.domElement );\n    // use ref as a mount point of the Three.js scene instead of the document.body\n    this.mount.appendChild( renderer.domElement );\n    var geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    var cube = new THREE.Mesh( geometry, material );\n    scene.add( cube );\n    camera.position.z = 5;\n    var animate = function () {\n      requestAnimationFrame( animate );\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render( scene, camera );\n    };\n    animate();\n  });\n\n  return (\n      <div>\n    <Typography variant='h6' className={classes.title}>\n    My online 3d printer\n    </Typography>\n      <canvas>\n      </canvas>\n      </div>\n  );\n}\n\nexport default Preview;"]},"metadata":{},"sourceType":"module"}