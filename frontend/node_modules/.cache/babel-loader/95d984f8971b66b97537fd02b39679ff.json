{"ast":null,"code":"var _jsxFileName = \"/home/pablo/go/src/gitlab.com/Pablolgn/usal-cloudsubmitter/frontend/src/components/Preview.js\";\nimport * as THREE from \"three\";\nimport React, { useEffect } from 'react';\n\nfunction Preview() {\n  const {\n    useRef,\n    useEffect,\n    useState\n  } = React;\n  const mount = useRef(null);\n  const [isAnimating, setAnimating] = useState(true);\n  const controls = useRef(null);\n  useEffect(() => {\n    let width = mount.current.clientWidth;\n    let height = mount.current.clientHeight;\n    let frameId;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    const material = new THREE.MeshBasicMaterial({\n      color: 0xff00ff\n    });\n    const cube = new THREE.Mesh(geometry, material);\n    camera.position.z = 4;\n    scene.add(cube);\n    renderer.setClearColor('#000000');\n    renderer.setSize(width, height);\n\n    const renderScene = () => {\n      renderer.render(scene, camera);\n    };\n\n    const handleResize = () => {\n      width = mount.current.clientWidth;\n      height = mount.current.clientHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderScene();\n    };\n\n    const animate = () => {\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderScene();\n      frameId = window.requestAnimationFrame(animate);\n    };\n\n    const start = () => {\n      if (!frameId) {\n        frameId = requestAnimationFrame(animate);\n      }\n    };\n\n    const stop = () => {\n      cancelAnimationFrame(frameId);\n      frameId = null;\n    };\n\n    mount.current.appendChild(renderer.domElement);\n    window.addEventListener('resize', handleResize);\n    start();\n    controls.current = {\n      start,\n      stop\n    };\n    return () => {\n      stop();\n      window.removeEventListener('resize', handleResize);\n      mount.current.removeChild(renderer.domElement);\n      scene.remove(cube);\n      geometry.dispose();\n      material.dispose();\n    };\n  }, []);\n  useEffect(() => {\n    if (isAnimating) {\n      controls.current.start();\n    } else {\n      controls.current.stop();\n    }\n  }, [isAnimating]);\n  return React.createElement(\"div\", {\n    className: \"Preview\",\n    ref: mount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  });\n}\n\nexport default Preview;","map":{"version":3,"sources":["/home/pablo/go/src/gitlab.com/Pablolgn/usal-cloudsubmitter/frontend/src/components/Preview.js"],"names":["THREE","React","useEffect","Preview","useRef","useState","mount","isAnimating","setAnimating","controls","width","current","clientWidth","height","clientHeight","frameId","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","antialias","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","position","z","add","setClearColor","setSize","renderScene","render","handleResize","aspect","updateProjectionMatrix","animate","rotation","x","y","window","requestAnimationFrame","start","stop","cancelAnimationFrame","appendChild","domElement","addEventListener","removeEventListener","removeChild","remove","dispose"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport React, { useEffect } from 'react';\n\nfunction Preview(){\n  const { useRef, useEffect, useState } = React\n  const mount = useRef(null)\n  const [isAnimating, setAnimating] = useState(true)\n  const controls = useRef(null)\n  \n  useEffect(() => {\n    let width = mount.current.clientWidth\n    let height = mount.current.clientHeight\n    let frameId\n\n    const scene = new THREE.Scene()\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000)\n    const renderer = new THREE.WebGLRenderer({ antialias: true })\n    const geometry = new THREE.BoxGeometry(1, 1, 1)\n    const material = new THREE.MeshBasicMaterial({ color: 0xff00ff })\n    const cube = new THREE.Mesh(geometry, material)\n\n    camera.position.z = 4\n    scene.add(cube)\n    renderer.setClearColor('#000000')\n    renderer.setSize(width, height)\n\n    const renderScene = () => {\n      renderer.render(scene, camera)\n    }\n\n    const handleResize = () => {\n      width = mount.current.clientWidth\n      height = mount.current.clientHeight\n      renderer.setSize(width, height)\n      camera.aspect = width / height\n      camera.updateProjectionMatrix()\n      renderScene()\n    }\n    \n    const animate = () => {\n      cube.rotation.x += 0.01\n      cube.rotation.y += 0.01\n\n      renderScene()\n      frameId = window.requestAnimationFrame(animate)\n    }\n\n    const start = () => {\n      if (!frameId) {\n        frameId = requestAnimationFrame(animate)\n      }\n    }\n\n    const stop = () => {\n      cancelAnimationFrame(frameId)\n      frameId = null\n    }\n\n    mount.current.appendChild(renderer.domElement)\n    window.addEventListener('resize', handleResize)\n    start()\n\n    controls.current = { start, stop }\n    \n    return () => {\n      stop()\n      window.removeEventListener('resize', handleResize)\n      mount.current.removeChild(renderer.domElement)\n\n      scene.remove(cube)\n      geometry.dispose()\n      material.dispose()\n    }\n  }, [])\n\n  useEffect(() => {\n    if (isAnimating) {\n      controls.current.start()\n    } else {\n      controls.current.stop()\n    }\n  }, [isAnimating])\n  \n  return <div className=\"Preview\" ref={mount} />\n}\n\nexport default Preview\n"]},"metadata":{},"sourceType":"module"}