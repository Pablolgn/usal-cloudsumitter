{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _common = require(\"../../common\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nconst className = 'buffering-indicator';\nconst isActiveClassName = 'buffering';\n\nconst BufferingIndicator = ({\n  children,\n  content,\n  isBuffering,\n  isSeeking,\n  playState,\n  renderStrategy = 'when-buffering',\n  label,\n  classNamePrefix = _common.defaultClassNamePrefix\n}) => {\n  const isActive = isBuffering || isSeeking || playState === 'starting' || playState === 'buffering' || playState === 'seeking';\n\n  if (renderStrategy === 'always') {\n    if (isActive) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        title: label,\n        className: (0, _common.prefixClassNames)(classNamePrefix, className, isActiveClassName)\n      }, children || content);\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: (0, _common.prefixClassNames)(classNamePrefix, className)\n      }, children || content);\n    }\n  } else {\n    if (isActive) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        title: label,\n        className: (0, _common.prefixClassNames)(classNamePrefix, className, isActiveClassName)\n      }, children || content);\n    } else {\n      return null;\n    }\n  }\n};\n\nBufferingIndicator.streamStateKeysForObservation = ['isBuffering', 'isSeeking', 'playState'];\nBufferingIndicator.displayName = 'BufferingIndicator';\nvar _default = BufferingIndicator;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/replay/components/controls/BufferingIndicator/BufferingIndicator.js"],"names":["className","isActiveClassName","BufferingIndicator","renderStrategy","classNamePrefix","defaultClassNamePrefix","isActive","isBuffering","playState","children"],"mappings":";;;;;;;AACA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,MAAMA,SAAS,GAAf,qBAAA;AACA,MAAMC,iBAAiB,GAAvB,WAAA;;AAIA,MAAMC,kBAA0C,GAAG,CAAC;AAAA,EAAA,QAAA;AAAA,EAAA,OAAA;AAAA,EAAA,WAAA;AAAA,EAAA,SAAA;AAAA,EAAA,SAAA;AAMlDC,EAAAA,cAAc,GANoC,gBAAA;AAAA,EAAA,KAAA;AAQlDC,EAAAA,eAAe,GAAGC,OAAAA,CAAAA;AARgC,CAAD,KAStC;AACX,QAAMC,QAAQ,GACZC,WAAW,IAAXA,SAAAA,IAA4BC,SAAS,KAArCD,UAAAA,IAAwDC,SAAS,KAAjED,WAAAA,IAAqFC,SAAS,KADhG,SAAA;;AAEA,MAAIL,cAAc,KAAlB,QAAA,EAAiC;AAC/B,QAAA,QAAA,EAAc;AACZ,aAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,KAAK,EAAV,KAAA;AAAmB,QAAA,SAAS,EAAE,CAAA,GAAA,OAAA,CAAA,gBAAA,EAAA,eAAA,EAAA,SAAA,EAAA,iBAAA;AAA9B,OAAA,EACGM,QAAQ,IAFb,OACE,CADF;AADF,KAAA,MAMO;AACL,aAAA,aAAO,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,SAAS,EAAE,CAAA,GAAA,OAAA,CAAA,gBAAA,EAAA,eAAA,EAAA,SAAA;AAAhB,OAAA,EAA+DA,QAAQ,IAA9E,OAAO,CAAP;AACD;AATH,GAAA,MAUO;AACL,QAAA,QAAA,EAAc;AACZ,aAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,KAAK,EAAV,KAAA;AAAmB,QAAA,SAAS,EAAE,CAAA,GAAA,OAAA,CAAA,gBAAA,EAAA,eAAA,EAAA,SAAA,EAAA,iBAAA;AAA9B,OAAA,EACGA,QAAQ,IAFb,OACE,CADF;AADF,KAAA,MAMO;AACL,aAAA,IAAA;AACD;AACF;AAhCH,CAAA;;AAmCAP,kBAAkB,CAAlBA,6BAAAA,GAAmD,CAAA,aAAA,EAAA,WAAA,EAAnDA,WAAmD,CAAnDA;AACAA,kBAAkB,CAAlBA,WAAAA,GAAAA,oBAAAA;eAEeA,kB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { defaultClassNamePrefix, prefixClassNames } from '../../common';\nimport type { PlayState } from '../../player/VideoStreamer/types';\nimport type { CommonProps } from '../../common';\nimport type { ObservingControlStaticProps } from '../../player/PlayerController/ControllerContext';\n\ntype Props = CommonProps & {\n  /** ⇘︎ If true, the buffering indicator is shown or the root element has a class name indicating buffering. */\n  isBuffering?: boolean,\n  /** ⇘︎ If true, the buffering indicator is shown or the root element has a class name indicating buffering. */\n  isSeeking?: boolean,\n  /** ⇘︎ If set to 'starting', 'buffering', or 'seeking', the buffering indicator is shown or the root element has a class name indicating buffering. */\n  playState?: PlayState,\n  /** The content to show if buffering, or always if renderingStrategy is 'always'. */\n  children?: React.Node,\n  /** Alternative to specifying children. Other Replay controls use content as the convention. */\n  content?: React.Node,\n  /** When set to 'always', the content is always rendered, but buffering is indicated through a class name on the component's root element. This option is used when controlling display through CSS. */\n  renderStrategy?: 'when-buffering' | 'always'\n};\n\nconst className = 'buffering-indicator';\nconst isActiveClassName = 'buffering';\n\ntype BufferingIndicatorType = React.StatelessFunctionalComponent<Props> & ObservingControlStaticProps;\n\nconst BufferingIndicator: BufferingIndicatorType = ({\n  children,\n  content,\n  isBuffering,\n  isSeeking,\n  playState,\n  renderStrategy = 'when-buffering',\n  label,\n  classNamePrefix = defaultClassNamePrefix\n}: Props) => {\n  const isActive =\n    isBuffering || isSeeking || playState === 'starting' || playState === 'buffering' || playState === 'seeking';\n  if (renderStrategy === 'always') {\n    if (isActive) {\n      return (\n        <div title={label} className={prefixClassNames(classNamePrefix, className, isActiveClassName)}>\n          {children || content}\n        </div>\n      );\n    } else {\n      return <div className={prefixClassNames(classNamePrefix, className)}>{children || content}</div>;\n    }\n  } else {\n    if (isActive) {\n      return (\n        <div title={label} className={prefixClassNames(classNamePrefix, className, isActiveClassName)}>\n          {children || content}\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n};\n\nBufferingIndicator.streamStateKeysForObservation = ['isBuffering', 'isSeeking', 'playState'];\nBufferingIndicator.displayName = 'BufferingIndicator';\n\nexport default BufferingIndicator;\n"]},"metadata":{},"sourceType":"script"}