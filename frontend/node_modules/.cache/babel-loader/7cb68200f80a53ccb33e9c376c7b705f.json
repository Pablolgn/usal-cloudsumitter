{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _ToggleButton = _interopRequireDefault(require(\"../../generic/ToggleButton/ToggleButton\"));\n\nvar _common = require(\"../../common\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst className = 'fullscreen-button';\n\nclass FullscreenButton extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleToggle\", value => {\n      if (this.props.setProperties) {\n        this.props.setProperties({\n          isFullscreen: value\n        });\n      }\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          isFullscreen = _this$props.isFullscreen,\n          fullscreenContent = _this$props.fullscreenContent,\n          normalContent = _this$props.normalContent,\n          label = _this$props.label,\n          classNamePrefix = _this$props.classNamePrefix;\n    return /*#__PURE__*/React.createElement(_ToggleButton.default, {\n      classNamePrefix: classNamePrefix,\n      isOn: isFullscreen,\n      className: className,\n      label: label,\n      onToggle: this.handleToggle,\n      toggledOnContent: fullscreenContent,\n      toggledOffContent: normalContent\n    });\n  }\n\n}\n\n_defineProperty(FullscreenButton, \"defaultProps\", {\n  classNamePrefix: _common.defaultClassNamePrefix\n});\n\nFullscreenButton.displayName = 'FullscreenButton';\nvar _default = FullscreenButton;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/replay/components/controls/FullscreenButton/FullscreenButton.js"],"names":["className","FullscreenButton","React","classNamePrefix","defaultClassNamePrefix","value","isFullscreen","render","fullscreenContent","normalContent","label"],"mappings":";;;;;;;AACA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,yCAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA,MAAMA,SAAS,GAAf,mBAAA;;AAEA,MAAA,gBAAA,SAA+BE,KAAK,CAApC,SAAA,CAAsD;AAAA,EAAA,WAAA,CAAA,GAAA,IAAA,EAAA;AAAA,UAAA,GAAA,IAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,EAKpCG,KAAD,IAAoB;AACjC,UAAI,KAAA,KAAA,CAAJ,aAAA,EAA8B;AAC5B,aAAA,KAAA,CAAA,aAAA,CAAyB;AAAEC,UAAAA,YAAY,EAAED;AAAhB,SAAzB;AACD;AARiD,KAAA,CAAA;AAAA;;AAWpDE,EAAAA,MAAM,GAAG;AAAA,UAAA,WAAA,GAC4E,KAD5E,KAAA;AAAA,UACCD,YADD,GAAA,WAAA,CAAA,YAAA;AAAA,UACeE,iBADf,GAAA,WAAA,CAAA,iBAAA;AAAA,UACkCC,aADlC,GAAA,WAAA,CAAA,aAAA;AAAA,UACiDC,KADjD,GAAA,WAAA,CAAA,KAAA;AAAA,UACwDP,eADxD,GAAA,WAAA,CAAA,eAAA;AAEP,WAAA,aACE,KAAA,CAAA,aAAA,CAAC,aAAA,CAAD,OAAA,EAAA;AACE,MAAA,eAAe,EADjB,eAAA;AAEE,MAAA,IAAI,EAFN,YAAA;AAGE,MAAA,SAAS,EAHX,SAAA;AAIE,MAAA,KAAK,EAJP,KAAA;AAKE,MAAA,QAAQ,EAAE,KALZ,YAAA;AAME,MAAA,gBAAgB,EANlB,iBAAA;AAOE,MAAA,iBAAiB,EAAEM;AAPrB,KAAA,CADF;AAWD;;AAxBmD;;gBAAhDR,gB,kBACkB;AACpBE,EAAAA,eAAe,EAAEC,OAAAA,CAAAA;AADG,C;;AA0BxBH,gBAAgB,CAAhBA,WAAAA,GAAAA,kBAAAA;eACeA,gB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport ToggleButton from '../../generic/ToggleButton/ToggleButton';\nimport { defaultClassNamePrefix } from '../../common';\nimport type { CommonProps } from '../../common';\n\ntype Props = CommonProps & {\n  /** The current fullscreen state, as reported in the render method of the Fullscreen helper component. */\n  isFullscreen?: boolean,\n  /** Intended for the setProperties method passed in the render method of the Fullscreen helper component. When the button is clicked, this callback is invoked with an object having an isFullscreen property with the opposite boolean value as the isFullscreen prop. */\n  setProperties?: ({ isFullscreen: boolean }) => void,\n  /** The button content to be displayed while isFullscreen is true. */\n  fullscreenContent: React.Node,\n  /** The button content to be displayed while isFullscreen is false. */\n  normalContent: React.Node\n};\n\nconst className = 'fullscreen-button';\n\nclass FullscreenButton extends React.Component<Props> {\n  static defaultProps = {\n    classNamePrefix: defaultClassNamePrefix\n  };\n\n  handleToggle = (value: boolean) => {\n    if (this.props.setProperties) {\n      this.props.setProperties({ isFullscreen: value });\n    }\n  };\n\n  render() {\n    const { isFullscreen, fullscreenContent, normalContent, label, classNamePrefix } = this.props;\n    return (\n      <ToggleButton\n        classNamePrefix={classNamePrefix}\n        isOn={isFullscreen}\n        className={className}\n        label={label}\n        onToggle={this.handleToggle}\n        toggledOnContent={fullscreenContent}\n        toggledOffContent={normalContent}\n      />\n    );\n  }\n}\n\nFullscreenButton.displayName = 'FullscreenButton';\nexport default FullscreenButton;\n"]},"metadata":{},"sourceType":"script"}