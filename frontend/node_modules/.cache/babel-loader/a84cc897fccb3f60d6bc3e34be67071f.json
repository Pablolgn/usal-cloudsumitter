{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst dawnOfTime = new Date(0);\nconst minimumDvrLength = 100; // seconds\n\nconst defaultLiveEdgeMargin = 10; // seconds\n\nconst dvrStartCorrection = 10; // yep, seconds\n\nfunction getSeekableNetRange(videoElement) {\n  return videoElement.seekable.length > 0 ? videoElement.seekable.end(0) - videoElement.seekable.start(0) : 0;\n}\n\nfunction getPosition(videoElement) {\n  return videoElement.currentTime - (videoElement.seekable.length > 0 ? videoElement.seekable.start(0) : 0);\n}\n\nfunction getDuration(videoElement, isLive, seekableRange) {\n  return isLive ? seekableRange : videoElement.duration;\n}\n\nfunction getStartOffset(videoElement) {\n  return videoElement.seekable.length > 0 ? videoElement.seekable.start(0) : 0;\n}\n\nfunction resolvePlayMode(videoElement, seekableRange, isLive) {\n  if (isLive) {\n    if (seekableRange === Infinity || seekableRange === 0 || seekableRange < minimumDvrLength) {\n      return 'live';\n    } else {\n      return 'livedvr';\n    }\n  } else {\n    return 'ondemand';\n  }\n}\n\nfunction getAbsolutePositions(videoElement, isLive, position) {\n  if (isLive) {\n    // $FlowFixMe getStartDate() is Safari only and not part of the DOM standard API.\n    const startDate = videoElement.getStartDate && videoElement.getStartDate();\n\n    if (isNaN(startDate)) {\n      const absolutePosition = new Date();\n      const absoluteStartPosition = new Date(absolutePosition.getTime() - position * 1000);\n      return {\n        absolutePosition,\n        absoluteStartPosition\n      };\n    } else {\n      return {\n        absolutePosition: new Date(startDate.getTime() + videoElement.currentTime * 1000),\n        absoluteStartPosition: new Date(startDate.getTime() + getStartOffset(videoElement) * 1000)\n      };\n    }\n  } else {\n    return {\n      absolutePosition: dawnOfTime,\n      absoluteStartPosition: dawnOfTime\n    };\n  }\n}\n\nconst getStreamRangeHelper = (videoElement, configuration) => {\n  const liveMargin = configuration && configuration.liveEdgeMargin || defaultLiveEdgeMargin;\n\n  function calculateNewState() {\n    const seekableRange = getSeekableNetRange(videoElement);\n    const isLive = videoElement.duration === Infinity;\n    const position = getPosition(videoElement);\n    const duration = getDuration(videoElement, isLive, seekableRange);\n    const playMode = resolvePlayMode(videoElement, seekableRange, isLive);\n    const isAtLiveEdge = isLive && position > duration - liveMargin;\n\n    const _getAbsolutePositions = getAbsolutePositions(videoElement, isLive, position),\n          absolutePosition = _getAbsolutePositions.absolutePosition,\n          absoluteStartPosition = _getAbsolutePositions.absoluteStartPosition;\n\n    return {\n      position,\n      duration,\n      playMode,\n      isAtLiveEdge,\n      absolutePosition,\n      absoluteStartPosition\n    };\n  }\n\n  function adjustForDvrStartOffset() {\n    if (videoElement && videoElement.paused && videoElement.duration === Infinity) {\n      const seekableStart = getStartOffset(videoElement);\n\n      if (seekableStart !== Infinity && seekableStart >= videoElement.currentTime) {\n        videoElement.currentTime = seekableStart + dvrStartCorrection;\n      }\n    }\n  }\n\n  function setPosition(newPosition) {\n    if (!(isNaN(newPosition) && newPosition === Infinity)) {\n      videoElement.currentTime = getStartOffset(videoElement) + newPosition;\n    }\n  }\n\n  function gotoLive() {\n    if (videoElement.duration === Infinity && videoElement.seekable.length > 0) {\n      videoElement.currentTime = videoElement.seekable.end(0);\n    }\n  }\n\n  return {\n    adjustForDvrStartOffset,\n    calculateNewState,\n    setPosition,\n    gotoLive\n  };\n};\n\nvar _default = getStreamRangeHelper;\nexports.default = _default;","map":{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/BasicVideoStreamer/streamRangeHelper.js"],"names":["dawnOfTime","minimumDvrLength","defaultLiveEdgeMargin","dvrStartCorrection","videoElement","isLive","seekableRange","startDate","isNaN","absolutePosition","absoluteStartPosition","position","getStartOffset","getStreamRangeHelper","liveMargin","configuration","getSeekableNetRange","getPosition","duration","getDuration","playMode","resolvePlayMode","isAtLiveEdge","getAbsolutePositions","seekableStart","newPosition","gotoLive"],"mappings":"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","sourcesContent":["// @flow\nimport type { PlayMode } from '../types';\nimport type { StreamRangeHelper } from '../common/types';\n\nconst dawnOfTime = new Date(0);\nconst minimumDvrLength = 100; // seconds\nconst defaultLiveEdgeMargin = 10; // seconds\nconst dvrStartCorrection = 10; // yep, seconds\n\nfunction getSeekableNetRange(videoElement: HTMLVideoElement): number {\n  return videoElement.seekable.length > 0 ? videoElement.seekable.end(0) - videoElement.seekable.start(0) : 0;\n}\n\nfunction getPosition(videoElement: HTMLVideoElement): number {\n  return videoElement.currentTime - (videoElement.seekable.length > 0 ? videoElement.seekable.start(0) : 0);\n}\n\nfunction getDuration(videoElement: HTMLVideoElement, isLive: boolean, seekableRange: number): number {\n  return isLive ? seekableRange : videoElement.duration;\n}\n\nfunction getStartOffset(videoElement: HTMLVideoElement) {\n  return videoElement.seekable.length > 0 ? videoElement.seekable.start(0) : 0;\n}\n\nfunction resolvePlayMode(videoElement: HTMLVideoElement, seekableRange: number, isLive: boolean): PlayMode {\n  if (isLive) {\n    if (seekableRange === Infinity || seekableRange === 0 || seekableRange < minimumDvrLength) {\n      return 'live';\n    } else {\n      return 'livedvr';\n    }\n  } else {\n    return 'ondemand';\n  }\n}\n\nfunction getAbsolutePositions(\n  videoElement: HTMLVideoElement,\n  isLive: boolean,\n  position: number\n): { absolutePosition: Date, absoluteStartPosition: Date } {\n  if (isLive) {\n    // $FlowFixMe getStartDate() is Safari only and not part of the DOM standard API.\n    const startDate: Date = videoElement.getStartDate && videoElement.getStartDate();\n    if (isNaN(startDate)) {\n      const absolutePosition = new Date();\n      const absoluteStartPosition = new Date(absolutePosition.getTime() - position * 1000);\n      return {\n        absolutePosition,\n        absoluteStartPosition\n      };\n    } else {\n      return {\n        absolutePosition: new Date(startDate.getTime() + videoElement.currentTime * 1000),\n        absoluteStartPosition: new Date(startDate.getTime() + getStartOffset(videoElement) * 1000)\n      };\n    }\n  } else {\n    return {\n      absolutePosition: dawnOfTime,\n      absoluteStartPosition: dawnOfTime\n    };\n  }\n}\n\nconst getStreamRangeHelper = (\n  videoElement: HTMLVideoElement,\n  configuration: ?{ liveEdgeMargin: ?number }\n): StreamRangeHelper => {\n  const liveMargin = (configuration && configuration.liveEdgeMargin) || defaultLiveEdgeMargin;\n\n  function calculateNewState() {\n    const seekableRange = getSeekableNetRange(videoElement);\n    const isLive = videoElement.duration === Infinity;\n\n    const position = getPosition(videoElement);\n    const duration = getDuration(videoElement, isLive, seekableRange);\n    const playMode = resolvePlayMode(videoElement, seekableRange, isLive);\n    const isAtLiveEdge = isLive && position > duration - liveMargin;\n    const { absolutePosition, absoluteStartPosition } = getAbsolutePositions(videoElement, isLive, position);\n    return {\n      position,\n      duration,\n      playMode,\n      isAtLiveEdge,\n      absolutePosition,\n      absoluteStartPosition\n    };\n  }\n\n  function adjustForDvrStartOffset() {\n    if (videoElement && videoElement.paused && videoElement.duration === Infinity) {\n      const seekableStart = getStartOffset(videoElement);\n      if (seekableStart !== Infinity && seekableStart >= videoElement.currentTime) {\n        videoElement.currentTime = seekableStart + dvrStartCorrection;\n      }\n    }\n  }\n\n  function setPosition(newPosition: number) {\n    if (!(isNaN(newPosition) && newPosition === Infinity)) {\n      videoElement.currentTime = getStartOffset(videoElement) + newPosition;\n    }\n  }\n\n  function gotoLive() {\n    if (videoElement.duration === Infinity && videoElement.seekable.length > 0) {\n      videoElement.currentTime = videoElement.seekable.end(0);\n    }\n  }\n\n  return {\n    adjustForDvrStartOffset,\n    calculateNewState,\n    setPosition,\n    gotoLive\n  };\n};\n\nexport default getStreamRangeHelper;\n"]},"metadata":{},"sourceType":"script"}