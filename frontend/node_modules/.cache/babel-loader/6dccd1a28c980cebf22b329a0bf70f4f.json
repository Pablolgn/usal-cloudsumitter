{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _common = require(\"../../common\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst baseClassName = 'toggle-button';\nconst offClassName = 'toggled-off';\nconst onClassName = 'toggled-on';\n\nconst selectOffClasses = classes => classes.toggleButtonOff || classes.toggleButton;\n\nconst selectOnClasses = classes => classes.toggleButtonOn || classes.toggleButton;\n/**\n * Renders a button with two states - toggled on and off. When clicked, it reports back the opposite state.\n */\n\n\nclass ToggleButton extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleClick\", () => this.props.onToggle && this.props.onToggle(!this.props.isOn));\n\n    _defineProperty(this, \"handleKeyDown\", (0, _common.getKeyboardShortcutBlocker)(['Enter', ' ']));\n\n    _defineProperty(this, \"handleKeyUp\", keyboardEvent => {\n      if (keyboardEvent.key === 'Enter' || keyboardEvent.key === ' ') {\n        keyboardEvent.preventDefault();\n        this.handleClick();\n      }\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          isOn = _this$props.isOn,\n          label = _this$props.label,\n          className = _this$props.className,\n          classNamePrefix = _this$props.classNamePrefix,\n          toggledOnContent = _this$props.toggledOnContent,\n          toggledOffContent = _this$props.toggledOffContent,\n          onRef = _this$props.onRef,\n          classes = _this$props.classes;\n    const toggleClassName = isOn ? onClassName : offClassName;\n    const classNames = (0, _common.hydrateClassNames)({\n      classes,\n      selectClasses: isOn ? selectOnClasses : selectOffClasses,\n      classNamePrefix,\n      classNames: [className, baseClassName, toggleClassName]\n    });\n    const content = isOn ? toggledOnContent : toggledOffContent;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      role: \"button\",\n      \"aria-pressed\": isOn,\n      title: label,\n      onClick: this.handleClick,\n      onKeyUp: this.handleKeyUp,\n      onKeyDown: this.handleKeyDown,\n      ref: onRef,\n      className: classNames,\n      tabIndex: 0\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      tabIndex: -1\n    }, content));\n  }\n\n}\n\n_defineProperty(ToggleButton, \"defaultProps\", {\n  useDefaultClassNaming: true\n});\n\nvar _default = ToggleButton;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/replay/components/generic/ToggleButton/ToggleButton.js"],"names":["baseClassName","offClassName","onClassName","selectOffClasses","classes","selectOnClasses","ToggleButton","React","useDefaultClassNaming","keyboardEvent","render","isOn","label","className","classNamePrefix","toggledOnContent","toggledOffContent","onRef","toggleClassName","classNames","selectClasses","content"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { type CommonGenericProps, getKeyboardShortcutBlocker, hydrateClassNames } from '../../common';\n\ntype Props = CommonGenericProps & {\n  /** Set to true if the button should be in the toggled on mode. */\n  isOn?: boolean,\n  /** The label will appear in the title attribute of the root DOM element of the toggle button. */\n  label?: string,\n  /** The button content to be displayed when the button is toggled off. */\n  toggledOffContent?: React.Node,\n  /** The button content to be displayed when the button is toggled on. */\n  toggledOnContent?: React.Node,\n  /** A callback method that will be invoked when the button is clicked and the value toggled. If the button has been toggled on, true is passed to the callback. */\n  onToggle?: boolean => void,\n  /** A callback method invoked with the rendered button element, for focus purposes. */\n  onRef?: (?HTMLElement) => void\n};\n\nconst baseClassName = 'toggle-button';\nconst offClassName = 'toggled-off';\nconst onClassName = 'toggled-on';\n\nconst selectOffClasses = classes => classes.toggleButtonOff || classes.toggleButton;\nconst selectOnClasses = classes => classes.toggleButtonOn || classes.toggleButton;\n\n/**\n * Renders a button with two states - toggled on and off. When clicked, it reports back the opposite state.\n */\nclass ToggleButton extends React.Component<Props> {\n  static defaultProps = {\n    useDefaultClassNaming: true\n  };\n\n  handleClick = () => this.props.onToggle && this.props.onToggle(!this.props.isOn);\n\n  handleKeyDown = getKeyboardShortcutBlocker(['Enter', ' ']);\n\n  handleKeyUp = (keyboardEvent: KeyboardEvent) => {\n    if (keyboardEvent.key === 'Enter' || keyboardEvent.key === ' ') {\n      keyboardEvent.preventDefault();\n      this.handleClick();\n    }\n  };\n\n  render() {\n    const { isOn, label, className, classNamePrefix, toggledOnContent, toggledOffContent, onRef, classes } = this.props;\n    const toggleClassName = isOn ? onClassName : offClassName;\n    const classNames = hydrateClassNames({\n      classes,\n      selectClasses: isOn ? selectOnClasses : selectOffClasses,\n      classNamePrefix,\n      classNames: [className, baseClassName, toggleClassName]\n    });\n    const content = isOn ? toggledOnContent : toggledOffContent;\n    return (\n      <div\n        role=\"button\"\n        aria-pressed={isOn}\n        title={label}\n        onClick={this.handleClick}\n        onKeyUp={this.handleKeyUp}\n        onKeyDown={this.handleKeyDown}\n        ref={onRef}\n        className={classNames}\n        tabIndex={0}>\n        <div tabIndex={-1}>{content}</div>\n      </div>\n    );\n  }\n}\n\nexport default ToggleButton;\n"]},"metadata":{},"sourceType":"script"}