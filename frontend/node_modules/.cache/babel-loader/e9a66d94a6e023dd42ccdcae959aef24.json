{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.renderWithSource = exports.renderWithoutSource = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _common = require(\"../../../common\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nconst createTrackElement = ({\n  src,\n  srclang,\n  kind,\n  label,\n  onRef\n}) =>\n/*#__PURE__*/\n// $FlowFixMe. ref doesn't accept HTMLTrackElement as subtype to HTMLElement.\nReact.createElement(\"track\", {\n  key: src + (label || ''),\n  kind: kind,\n  src: src,\n  srcLang: srclang,\n  label: label,\n  ref: onRef\n});\n\nconst renderWithoutSource = (videoRef, videoElementEventHandlers, props, baseClassName, playsInline, textTracks, style) => {\n  const className = props.className,\n        classNamePrefix = props.classNamePrefix;\n  const classNames = (0, _common.prefixClassNames)(classNamePrefix, baseClassName, className);\n  return /*#__PURE__*/React.createElement(\"video\", _extends({\n    autoPlay: true,\n    controls: false,\n    style: style,\n    className: classNames,\n    ref: videoRef,\n    playsInline: playsInline\n  }, videoElementEventHandlers), Array.isArray(textTracks) && textTracks.map(createTrackElement));\n};\n\nexports.renderWithoutSource = renderWithoutSource;\n\nconst renderWithSource = (videoRef, videoElementEventHandlers, props, baseClassName, playsInline, textTracks, style) => {\n  const className = props.className,\n        classNamePrefix = props.classNamePrefix,\n        source = props.source;\n  const classNames = (0, _common.prefixClassNames)(classNamePrefix, baseClassName, className);\n  const streamUrl = source && (typeof source === 'string' ? source : source.streamUrl);\n\n  if (streamUrl) {\n    return /*#__PURE__*/React.createElement(\"video\", _extends({\n      autoPlay: true,\n      controls: false,\n      style: style,\n      className: classNames,\n      src: streamUrl,\n      ref: videoRef,\n      playsInline: playsInline\n    }, videoElementEventHandlers), Array.isArray(textTracks) && textTracks.map(createTrackElement));\n  } else {\n    return /*#__PURE__*/React.createElement(\"video\", {\n      className: classNames,\n      ref: videoRef,\n      src: '',\n      controls: false,\n      style: style\n    });\n  }\n};\n\nexports.renderWithSource = renderWithSource;","map":{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/common/renderers.js"],"names":["createTrackElement","onRef","src","label","renderWithoutSource","className","classNamePrefix","props","classNames","playsInline","Array","textTracks","renderWithSource","source","streamUrl","style"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { prefixClassNames } from '../../../common';\nimport type { TrackElementData, VideoStreamerRenderer } from './types';\n\nconst createTrackElement = ({ src, srclang, kind, label, onRef }: TrackElementData) => (\n  // $FlowFixMe. ref doesn't accept HTMLTrackElement as subtype to HTMLElement.\n  <track key={src + (label || '')} kind={kind} src={src} srcLang={srclang} label={label} ref={onRef} />\n);\n\nexport const renderWithoutSource: VideoStreamerRenderer = (\n  videoRef,\n  videoElementEventHandlers,\n  props,\n  baseClassName,\n  playsInline,\n  textTracks,\n  style\n) => {\n  const { className, classNamePrefix } = props;\n  const classNames = prefixClassNames(classNamePrefix, baseClassName, className);\n  return (\n    <video\n      autoPlay={true}\n      controls={false}\n      style={style}\n      className={classNames}\n      ref={videoRef}\n      playsInline={playsInline}\n      {...videoElementEventHandlers}>\n      {Array.isArray(textTracks) && textTracks.map(createTrackElement)}\n    </video>\n  );\n};\n\nexport const renderWithSource: VideoStreamerRenderer = (\n  videoRef,\n  videoElementEventHandlers,\n  props,\n  baseClassName,\n  playsInline,\n  textTracks,\n  style\n) => {\n  const { className, classNamePrefix, source } = props;\n  const classNames = prefixClassNames(classNamePrefix, baseClassName, className);\n  const streamUrl = source && (typeof source === 'string' ? source : source.streamUrl);\n  if (streamUrl) {\n    return (\n      <video\n        autoPlay={true}\n        controls={false}\n        style={style}\n        className={classNames}\n        src={streamUrl}\n        ref={videoRef}\n        playsInline={playsInline}\n        {...videoElementEventHandlers}>\n        {Array.isArray(textTracks) && textTracks.map(createTrackElement)}\n      </video>\n    );\n  } else {\n    return <video className={classNames} ref={videoRef} src={''} controls={false} style={style} />;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}