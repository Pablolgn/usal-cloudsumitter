{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _ToggleButton = _interopRequireDefault(require(\"../../generic/ToggleButton/ToggleButton\"));\n\nvar _common = require(\"../../common\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst className = 'goto-live-button';\n\nclass GotoLiveButton extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleToggle\", value => {\n      if (value && this.props.setProperties) {\n        this.props.setProperties({\n          isAtLiveEdge: true\n        });\n      }\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          playMode = _this$props.playMode,\n          isAtLiveEdge = _this$props.isAtLiveEdge,\n          isAtLiveEdgeContent = _this$props.isAtLiveEdgeContent,\n          isNotAtLiveEdgeContent = _this$props.isNotAtLiveEdgeContent,\n          label = _this$props.label,\n          classNamePrefix = _this$props.classNamePrefix;\n    return playMode === 'livedvr' ? /*#__PURE__*/React.createElement(_ToggleButton.default, {\n      classNamePrefix: classNamePrefix,\n      isOn: isAtLiveEdge,\n      className: className,\n      label: label,\n      onToggle: this.handleToggle,\n      toggledOnContent: isAtLiveEdgeContent,\n      toggledOffContent: isNotAtLiveEdgeContent\n    }) : null;\n  }\n\n}\n\n_defineProperty(GotoLiveButton, \"defaultProps\", {\n  classNamePrefix: _common.defaultClassNamePrefix\n});\n\n_defineProperty(GotoLiveButton, \"streamStateKeysForObservation\", ['isAtLiveEdge', 'playMode']);\n\nGotoLiveButton.displayName = 'GotoLiveButton';\nvar _default = GotoLiveButton;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/replay/components/controls/GotoLiveButton/GotoLiveButton.js"],"names":["className","GotoLiveButton","React","classNamePrefix","defaultClassNamePrefix","value","isAtLiveEdge","render","playMode","isAtLiveEdgeContent","isNotAtLiveEdgeContent","label"],"mappings":";;;;;;;AACA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,yCAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,MAAMA,SAAS,GAAf,kBAAA;;AAEA,MAAA,cAAA,SAA6BE,KAAK,CAAlC,SAAA,CAAoD;AAAA,EAAA,WAAA,CAAA,GAAA,IAAA,EAAA;AAAA,UAAA,GAAA,IAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,EAOlCG,KAAD,IAAoB;AACjC,UAAIA,KAAK,IAAI,KAAA,KAAA,CAAb,aAAA,EAAuC;AACrC,aAAA,KAAA,CAAA,aAAA,CAAyB;AAAEC,UAAAA,YAAY,EAAE;AAAhB,SAAzB;AACD;AAV+C,KAAA,CAAA;AAAA;;AAalDC,EAAAA,MAAM,GAAG;AAAA,UAAA,WAAA,GACiG,KADjG,KAAA;AAAA,UACCC,QADD,GAAA,WAAA,CAAA,QAAA;AAAA,UACWF,YADX,GAAA,WAAA,CAAA,YAAA;AAAA,UACyBG,mBADzB,GAAA,WAAA,CAAA,mBAAA;AAAA,UAC8CC,sBAD9C,GAAA,WAAA,CAAA,sBAAA;AAAA,UACsEC,KADtE,GAAA,WAAA,CAAA,KAAA;AAAA,UAC6ER,eAD7E,GAAA,WAAA,CAAA,eAAA;AAEP,WAAO,QAAQ,KAAR,SAAA,GAAA,aACL,KAAA,CAAA,aAAA,CAAC,aAAA,CAAD,OAAA,EAAA;AACE,MAAA,eAAe,EADjB,eAAA;AAEE,MAAA,IAAI,EAFN,YAAA;AAGE,MAAA,SAAS,EAHX,SAAA;AAIE,MAAA,KAAK,EAJP,KAAA;AAKE,MAAA,QAAQ,EAAE,KALZ,YAAA;AAME,MAAA,gBAAgB,EANlB,mBAAA;AAOE,MAAA,iBAAiB,EAAEO;AAPrB,KAAA,CADK,GAAP,IAAA;AAWD;;AA1BiD;;gBAA9CT,c,kBACkB;AACpBE,EAAAA,eAAe,EAAEC,OAAAA,CAAAA;AADG,C;;gBADlBH,c,mCAKkE,CAAA,cAAA,EAAA,UAAA,C;;AAwBxEA,cAAc,CAAdA,WAAAA,GAAAA,gBAAAA;eACeA,c","sourcesContent":["// @flow\nimport * as React from 'react';\nimport ToggleButton from '../../generic/ToggleButton/ToggleButton';\nimport { defaultClassNamePrefix } from '../../common';\nimport type { PlayMode } from '../../player/VideoStreamer/types';\nimport type { CommonProps } from '../../common';\nimport type { StreamStateKeysForObservation } from '../../player/PlayerController/ControllerContext';\n\ntype Props = CommonProps & {\n  /** ⇘︎ The current timeshift state of the playback. False means timeshifting. */\n  isAtLiveEdge?: boolean,\n  /** ⇘︎ The stream mode. Must be 'livedvr' in order for this control to render. */\n  playMode?: PlayMode,\n  /** ⇗ When the button is clicked, and the isAtLiveEdge prop is false, this callback is invoked with an object containing an isAtLiveEdge property with the value true. */\n  setProperties?: ({ isAtLiveEdge: true }) => void,\n  /** The button content to be displayed while isAtLiveEdge is true. */\n  isAtLiveEdgeContent: React.Node,\n  /** The button content to be displayed while isAtLiveEdge is false, i.e. when timeshifting. */\n  isNotAtLiveEdgeContent: React.Node\n};\n\nconst className = 'goto-live-button';\n\nclass GotoLiveButton extends React.Component<Props> {\n  static defaultProps = {\n    classNamePrefix: defaultClassNamePrefix\n  };\n\n  static streamStateKeysForObservation: StreamStateKeysForObservation = ['isAtLiveEdge', 'playMode'];\n\n  handleToggle = (value: boolean) => {\n    if (value && this.props.setProperties) {\n      this.props.setProperties({ isAtLiveEdge: true });\n    }\n  };\n\n  render() {\n    const { playMode, isAtLiveEdge, isAtLiveEdgeContent, isNotAtLiveEdgeContent, label, classNamePrefix } = this.props;\n    return playMode === 'livedvr' ? (\n      <ToggleButton\n        classNamePrefix={classNamePrefix}\n        isOn={isAtLiveEdge}\n        className={className}\n        label={label}\n        onToggle={this.handleToggle}\n        toggledOnContent={isAtLiveEdgeContent}\n        toggledOffContent={isNotAtLiveEdgeContent}\n      />\n    ) : null;\n  }\n}\n\nGotoLiveButton.displayName = 'GotoLiveButton';\nexport default GotoLiveButton;\n"]},"metadata":{},"sourceType":"script"}