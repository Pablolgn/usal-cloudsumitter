{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _common = require(\"../../common\");\n\nvar _ToggleButton = _interopRequireDefault(require(\"../ToggleButton/ToggleButton\"));\n\nvar _helpers = require(\"./helpers\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst defaultSelectorClassName = 'selector';\nconst expandToggleClassName = 'selector-toggle';\nconst selectorItemsClassName = 'selector-items';\nconst expandedClassName = 'expanded';\nconst collapsedClassName = 'collapsed';\nconst defaultItemClassName = 'selector-item';\nconst selectedClassName = 'selected';\n\nconst selectCollapsedClasses = classes => classes.selectorCollapsed || classes.selector;\n\nconst selectExpandedClasses = classes => classes.selectorExpanded || classes.selector;\n\nconst selectItemsContainerClasses = classes => classes.selectorItemsContainer;\n\nclass Selector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"focusableItems\", []);\n\n    _defineProperty(this, \"toggleElement\", null);\n\n    _defineProperty(this, \"onToggleRef\", toggleElement => {\n      this.toggleElement = toggleElement;\n    });\n\n    _defineProperty(this, \"handleToggle\", isOn => this.setState({\n      isExpanded: isOn\n    }));\n\n    _defineProperty(this, \"handleItemRef\", (itemElement, index) => {\n      this.focusableItems[index] = itemElement;\n    });\n\n    _defineProperty(this, \"renderSelectorItem\", (item, index) => {\n      const itemData = this.props.itemMapper(item);\n      return /*#__PURE__*/React.createElement(_helpers.SelectorItem, {\n        key: itemData.id,\n        item: itemData,\n        index: index,\n        onSelect: this.props.onSelect,\n        onRef: this.handleItemRef,\n        isSelected: item === this.props.selectedItem,\n        canReceiveFocus: this.state.isExpanded,\n        selectedClassName: selectedClassName,\n        defaultItemClassName: defaultItemClassName,\n        className: this.props.itemClassName,\n        classes: this.props.classes,\n        classNamePrefix: this.props.classNamePrefix\n      });\n    });\n\n    _defineProperty(this, \"handleKeyDown\", keyboardEvent => {\n      switch (keyboardEvent.key) {\n        case 'ArrowUp':\n        case 'Up':\n          keyboardEvent.preventDefault();\n          return;\n\n        case 'ArrowDown':\n        case 'Down':\n          if (this.state.isExpanded) {\n            keyboardEvent.preventDefault();\n          }\n\n          return;\n\n        default:\n          return;\n      }\n    });\n\n    _defineProperty(this, \"handleKeyUp\", keyboardEvent => {\n      if (this.state.isExpanded) {\n        if (keyboardEvent.key === 'ArrowUp' || keyboardEvent.key === 'Up') {\n          keyboardEvent.preventDefault();\n          (0, _helpers.focusElement)(true, this.props.reverseOrder || false, this.focusableItems, this.toggleElement);\n        }\n\n        if (keyboardEvent.key === 'ArrowDown' || keyboardEvent.key === 'Down') {\n          keyboardEvent.preventDefault();\n          const focusedElement = (0, _helpers.focusElement)(false, this.props.reverseOrder || false, this.focusableItems, this.toggleElement);\n\n          if (focusedElement === this.toggleElement) {\n            this.setState({\n              isExpanded: false\n            });\n          }\n        }\n      } else {\n        if (keyboardEvent.key === 'ArrowUp' || keyboardEvent.key === 'Up') {\n          keyboardEvent.preventDefault();\n          this.setState({\n            isExpanded: true\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"handleMouseLeave\", () => {\n      this.setState({\n        isExpanded: false\n      });\n    });\n\n    this.state = {\n      isExpanded: false\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          className = _this$props.className,\n          classNamePrefix = _this$props.classNamePrefix,\n          classes = _this$props.classes,\n          items = _this$props.items,\n          collapsedToggleContent = _this$props.collapsedToggleContent,\n          expandedToggleContent = _this$props.expandedToggleContent,\n          reverseOrder = _this$props.reverseOrder,\n          label = _this$props.label;\n    const renderedItems = items ? reverseOrder ? items.map(this.renderSelectorItem).reverse() : items.map(this.renderSelectorItem) : null;\n    const classNames = (0, _common.hydrateClassNames)({\n      classes,\n      classNamePrefix,\n      selectClasses: this.state.isExpanded ? selectExpandedClasses : selectCollapsedClasses,\n      classNames: [className, defaultSelectorClassName, this.state.isExpanded ? expandedClassName : collapsedClassName]\n    });\n    const itemsContainerClassNames = (0, _common.hydrateClassNames)({\n      classes,\n      selectClasses: selectItemsContainerClasses,\n      classNamePrefix,\n      classNames: [selectorItemsClassName]\n    });\n    const toggleButtonClasses = classes ? {\n      toggleButtonOff: classes.selectorToggle || classes.selectorToggleOff,\n      toggleButtonOn: classes.selectorToggleOn\n    } : null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames,\n      onKeyUp: this.handleKeyUp,\n      onKeyDown: this.handleKeyDown,\n      onMouseLeave: this.handleMouseLeave\n    }, /*#__PURE__*/React.createElement(_ToggleButton.default, {\n      isOn: this.state.isExpanded,\n      className: expandToggleClassName,\n      classNamePrefix: classNamePrefix,\n      classes: toggleButtonClasses,\n      label: label,\n      onToggle: this.handleToggle,\n      onRef: this.onToggleRef,\n      toggledOffContent: collapsedToggleContent,\n      toggledOnContent: expandedToggleContent\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      role: \"listbox\",\n      className: itemsContainerClassNames\n    }, renderedItems));\n  }\n\n}\n\n_defineProperty(Selector, \"defaultProps\", {\n  useDefaultClassNaming: true\n});\n\nvar _default = Selector;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/replay/components/generic/Selector/Selector.js"],"names":["defaultSelectorClassName","expandToggleClassName","selectorItemsClassName","expandedClassName","collapsedClassName","defaultItemClassName","selectedClassName","selectCollapsedClasses","classes","selectExpandedClasses","selectItemsContainerClasses","Selector","React","useDefaultClassNaming","constructor","isExpanded","toggleElement","isOn","itemData","item","classNamePrefix","keyboardEvent","focusedElement","render","className","items","collapsedToggleContent","expandedToggleContent","reverseOrder","label","renderedItems","classNames","selectClasses","itemsContainerClassNames","toggleButtonClasses","toggleButtonOff","toggleButtonOn","selectorToggleOn","handleMouseLeave"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { type CommonGenericProps, hydrateClassNames } from '../../common';\nimport ToggleButton from '../ToggleButton/ToggleButton';\nimport { focusElement, SelectorItem } from './helpers';\nimport type { ItemData } from './helpers';\n\ntype Props = CommonGenericProps & {\n  items: Array<any>,\n  selectedItem?: any,\n  reverseOrder?: boolean,\n  itemClassName?: string,\n  collapsedToggleContent?: React.Node,\n  expandedToggleContent?: React.Node,\n  label?: string,\n  itemMapper: any => ItemData,\n  onSelect?: any => void\n};\n\ntype SelectorState = {\n  isExpanded: boolean\n};\n\nconst defaultSelectorClassName = 'selector';\nconst expandToggleClassName = 'selector-toggle';\nconst selectorItemsClassName = 'selector-items';\nconst expandedClassName = 'expanded';\nconst collapsedClassName = 'collapsed';\nconst defaultItemClassName = 'selector-item';\nconst selectedClassName = 'selected';\n\nconst selectCollapsedClasses = classes => classes.selectorCollapsed || classes.selector;\nconst selectExpandedClasses = classes => classes.selectorExpanded || classes.selector;\nconst selectItemsContainerClasses = classes => classes.selectorItemsContainer;\n\nclass Selector extends React.Component<Props, SelectorState> {\n  static defaultProps = {\n    useDefaultClassNaming: true\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isExpanded: false\n    };\n  }\n\n  focusableItems: Array<?HTMLElement> = [];\n  toggleElement: ?HTMLElement = null;\n\n  onToggleRef = (toggleElement: ?HTMLElement) => {\n    this.toggleElement = toggleElement;\n  };\n\n  handleToggle = (isOn: boolean) => this.setState({ isExpanded: isOn });\n\n  handleItemRef = (itemElement: ?HTMLElement, index: number) => {\n    this.focusableItems[index] = itemElement;\n  };\n\n  renderSelectorItem = (item: any, index: number) => {\n    const itemData = this.props.itemMapper(item);\n    return (\n      <SelectorItem\n        key={itemData.id}\n        item={itemData}\n        index={index}\n        onSelect={this.props.onSelect}\n        onRef={this.handleItemRef}\n        isSelected={item === this.props.selectedItem}\n        canReceiveFocus={this.state.isExpanded}\n        selectedClassName={selectedClassName}\n        defaultItemClassName={defaultItemClassName}\n        className={this.props.itemClassName}\n        classes={this.props.classes}\n        classNamePrefix={this.props.classNamePrefix}\n      />\n    );\n  };\n\n  handleKeyDown = (keyboardEvent: KeyboardEvent) => {\n    switch (keyboardEvent.key) {\n      case 'ArrowUp':\n      case 'Up':\n        keyboardEvent.preventDefault();\n        return;\n      case 'ArrowDown':\n      case 'Down':\n        if (this.state.isExpanded) {\n          keyboardEvent.preventDefault();\n        }\n        return;\n      default:\n        return;\n    }\n  };\n\n  handleKeyUp = (keyboardEvent: KeyboardEvent) => {\n    if (this.state.isExpanded) {\n      if (keyboardEvent.key === 'ArrowUp' || keyboardEvent.key === 'Up') {\n        keyboardEvent.preventDefault();\n        focusElement(true, this.props.reverseOrder || false, this.focusableItems, this.toggleElement);\n      }\n      if (keyboardEvent.key === 'ArrowDown' || keyboardEvent.key === 'Down') {\n        keyboardEvent.preventDefault();\n        const focusedElement = focusElement(\n          false,\n          this.props.reverseOrder || false,\n          this.focusableItems,\n          this.toggleElement\n        );\n        if (focusedElement === this.toggleElement) {\n          this.setState({ isExpanded: false });\n        }\n      }\n    } else {\n      if (keyboardEvent.key === 'ArrowUp' || keyboardEvent.key === 'Up') {\n        keyboardEvent.preventDefault();\n        this.setState({ isExpanded: true });\n      }\n    }\n  };\n\n  handleMouseLeave = () => {\n    this.setState({ isExpanded: false });\n  };\n\n  render() {\n    const {\n      className,\n      classNamePrefix,\n      classes,\n      items,\n      collapsedToggleContent,\n      expandedToggleContent,\n      reverseOrder,\n      label\n    } = this.props;\n    const renderedItems = items\n      ? reverseOrder\n        ? items.map(this.renderSelectorItem).reverse()\n        : items.map(this.renderSelectorItem)\n      : null;\n    const classNames = hydrateClassNames({\n      classes,\n      classNamePrefix,\n      selectClasses: this.state.isExpanded ? selectExpandedClasses : selectCollapsedClasses,\n      classNames: [className, defaultSelectorClassName, this.state.isExpanded ? expandedClassName : collapsedClassName]\n    });\n    const itemsContainerClassNames = hydrateClassNames({\n      classes,\n      selectClasses: selectItemsContainerClasses,\n      classNamePrefix,\n      classNames: [selectorItemsClassName]\n    });\n    const toggleButtonClasses = classes\n      ? {\n          toggleButtonOff: classes.selectorToggle || classes.selectorToggleOff,\n          toggleButtonOn: classes.selectorToggleOn\n        }\n      : null;\n\n    return (\n      <div\n        className={classNames}\n        onKeyUp={this.handleKeyUp}\n        onKeyDown={this.handleKeyDown}\n        onMouseLeave={this.handleMouseLeave}>\n        <ToggleButton\n          isOn={this.state.isExpanded}\n          className={expandToggleClassName}\n          classNamePrefix={classNamePrefix}\n          classes={toggleButtonClasses}\n          label={label}\n          onToggle={this.handleToggle}\n          onRef={this.onToggleRef}\n          toggledOffContent={collapsedToggleContent}\n          toggledOnContent={expandedToggleContent}\n        />\n        <div role=\"listbox\" className={itemsContainerClassNames}>\n          {renderedItems}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Selector;\n"]},"metadata":{},"sourceType":"script"}