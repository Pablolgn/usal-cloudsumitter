{"ast":null,"code":"var _jsxFileName = \"/home/pablo/go/src/gitlab.com/Pablolgn/usal-cloudsubmitter/frontend/src/components/Box.js\";\nimport React, { useState, useRef, useEffect } from 'react';\n\nfunction Box() {\n  const [hovered, setHovered] = useState(false);\n  const [active, setActive] = useState(false);\n  return (// mesh is what hold the object  \n    React.createElement(\"mesh\", {\n      onPointerOver: () => setHovered(true),\n      onPointerOut: () => setHovered(false),\n      onClick: () => setActive(!active),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    }, React.createElement(\"boxBufferGeometry\", {\n      attach: \"geometry\",\n      args: [1.5, 1.5, 1.5],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }), React.createElement(\"meshPhysicalMaterial\", {\n      attach: \"material\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }))\n  );\n}\n\nexport default Box;","map":{"version":3,"sources":["/home/pablo/go/src/gitlab.com/Pablolgn/usal-cloudsubmitter/frontend/src/components/Box.js"],"names":["React","useState","useRef","useEffect","Box","hovered","setHovered","active","setActive"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;;AAEA,SAASC,GAAT,GAAc;AACV,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,KAAD,CAApC;AACA,SACA;AACA;AACA,MAAA,aAAa,EAAE,MAAMK,UAAU,CAAC,IAAD,CAD/B;AAEA,MAAA,YAAY,EAAE,MAAMA,UAAU,CAAC,KAAD,CAF9B;AAGA,MAAA,OAAO,EAAE,MAAME,SAAS,CAAC,CAACD,MAAF,CAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKI;AAAmB,MAAA,MAAM,EAAC,UAA1B;AAAqC,MAAA,IAAI,EAAE,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,EAMI;AAAsB,MAAA,MAAM,EAAC,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ;AAFA;AAWI;;AAED,eAAeH,GAAf","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\n\nfunction Box(){\n    const [hovered, setHovered] = useState(false) \n    const [active, setActive] = useState(false) \n    return(\n    // mesh is what hold the object  \n    <mesh  \n    onPointerOver={() => setHovered(true)}  \n    onPointerOut={() => setHovered(false)}  \n    onClick={() => setActive(!active)}>    \n    \n        <boxBufferGeometry attach=\"geometry\" args={[1.5,1.5,1.5]} />\n        <meshPhysicalMaterial attach=\"material\" />  \n    \n       </mesh> )\n       }\n\n       export default Box;"]},"metadata":{},"sourceType":"module"}