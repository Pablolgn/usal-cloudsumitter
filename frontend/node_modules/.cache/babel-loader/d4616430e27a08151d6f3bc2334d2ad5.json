{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _ToggleButton = _interopRequireDefault(require(\"../../generic/ToggleButton/ToggleButton\"));\n\nvar _common = require(\"../../common\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst className = 'play-pause-button';\n\nclass PlayPauseButton extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleToggle\", value => {\n      if (this.props.setProperties) {\n        this.props.setProperties({\n          isPaused: value\n        });\n      }\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          isPaused = _this$props.isPaused,\n          pausedContent = _this$props.pausedContent,\n          playingContent = _this$props.playingContent,\n          label = _this$props.label,\n          classNamePrefix = _this$props.classNamePrefix;\n    return /*#__PURE__*/React.createElement(_ToggleButton.default, {\n      classNamePrefix: classNamePrefix,\n      isOn: isPaused,\n      className: className,\n      useDefaultClassNaming: true,\n      label: label,\n      onToggle: this.handleToggle,\n      toggledOnContent: pausedContent,\n      toggledOffContent: playingContent\n    });\n  }\n\n}\n\n_defineProperty(PlayPauseButton, \"defaultProps\", {\n  classNamePrefix: _common.defaultClassNamePrefix\n});\n\n_defineProperty(PlayPauseButton, \"streamStateKeysForObservation\", ['isPaused']);\n\nPlayPauseButton.displayName = 'PlayPauseButton';\nvar _default = PlayPauseButton;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/replay/components/controls/PlayPauseButton/PlayPauseButton.js"],"names":["className","PlayPauseButton","React","classNamePrefix","defaultClassNamePrefix","value","isPaused","render","pausedContent","playingContent","label"],"mappings":";;;;;;;AACA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,aAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,yCAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,MAAMA,SAAS,GAAf,mBAAA;;AAEA,MAAA,eAAA,SAA8BE,KAAK,CAAnC,SAAA,CAAqD;AAAA,EAAA,WAAA,CAAA,GAAA,IAAA,EAAA;AAAA,UAAA,GAAA,IAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,EAOnCG,KAAD,IAAoB;AACjC,UAAI,KAAA,KAAA,CAAJ,aAAA,EAA8B;AAC5B,aAAA,KAAA,CAAA,aAAA,CAAyB;AAAEC,UAAAA,QAAQ,EAAED;AAAZ,SAAzB;AACD;AAVgD,KAAA,CAAA;AAAA;;AAanDE,EAAAA,MAAM,GAAG;AAAA,UAAA,WAAA,GACqE,KADrE,KAAA;AAAA,UACCD,QADD,GAAA,WAAA,CAAA,QAAA;AAAA,UACWE,aADX,GAAA,WAAA,CAAA,aAAA;AAAA,UAC0BC,cAD1B,GAAA,WAAA,CAAA,cAAA;AAAA,UAC0CC,KAD1C,GAAA,WAAA,CAAA,KAAA;AAAA,UACiDP,eADjD,GAAA,WAAA,CAAA,eAAA;AAEP,WAAA,aACE,KAAA,CAAA,aAAA,CAAC,aAAA,CAAD,OAAA,EAAA;AACE,MAAA,eAAe,EADjB,eAAA;AAEE,MAAA,IAAI,EAFN,QAAA;AAGE,MAAA,SAAS,EAHX,SAAA;AAIE,MAAA,qBAAqB,EAJvB,IAAA;AAKE,MAAA,KAAK,EALP,KAAA;AAME,MAAA,QAAQ,EAAE,KANZ,YAAA;AAOE,MAAA,gBAAgB,EAPlB,aAAA;AAQE,MAAA,iBAAiB,EAAEM;AARrB,KAAA,CADF;AAYD;;AA3BkD;;gBAA/CR,e,kBACkB;AACpBE,EAAAA,eAAe,EAAEC,OAAAA,CAAAA;AADG,C;;gBADlBH,e,mCAKkE,CAAA,UAAA,C;;AAyBxEA,eAAe,CAAfA,WAAAA,GAAAA,iBAAAA;eACeA,e","sourcesContent":["// @flow\nimport * as React from 'react';\nimport ToggleButton from '../../generic/ToggleButton/ToggleButton';\nimport { defaultClassNamePrefix } from '../../common';\nimport type { CommonProps } from '../../common';\nimport type { StreamStateKeysForObservation } from '../../player/PlayerController/ControllerContext';\n\ntype Props = CommonProps & {\n  isPaused?: boolean,\n  setProperties?: ({ isPaused: boolean }) => void,\n\n  playingContent: React.Node,\n  pausedContent: React.Node\n};\n\nconst className = 'play-pause-button';\n\nclass PlayPauseButton extends React.Component<Props> {\n  static defaultProps = {\n    classNamePrefix: defaultClassNamePrefix\n  };\n\n  static streamStateKeysForObservation: StreamStateKeysForObservation = ['isPaused'];\n\n  handleToggle = (value: boolean) => {\n    if (this.props.setProperties) {\n      this.props.setProperties({ isPaused: value });\n    }\n  };\n\n  render() {\n    const { isPaused, pausedContent, playingContent, label, classNamePrefix } = this.props;\n    return (\n      <ToggleButton\n        classNamePrefix={classNamePrefix}\n        isOn={isPaused}\n        className={className}\n        useDefaultClassNaming={true}\n        label={label}\n        onToggle={this.handleToggle}\n        toggledOnContent={pausedContent}\n        toggledOffContent={playingContent}\n      />\n    );\n  }\n}\n\nPlayPauseButton.displayName = 'PlayPauseButton';\nexport default PlayPauseButton;\n"]},"metadata":{},"sourceType":"script"}