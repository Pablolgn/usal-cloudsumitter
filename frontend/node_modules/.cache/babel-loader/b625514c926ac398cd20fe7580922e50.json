{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _common = require(\"../../common\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nconst className = 'time-display';\nconst positionClassName = 'time-display-position';\nconst durationClassName = 'time-display-duration';\nconst clockTimeClassName = 'time-display-clock-time';\nconst noDurationClassName = 'time-display-no-duration';\n\nconst isReasonableDateTime = date => date instanceof Date && !isNaN(date.getTime()) && date.getTime() > 1514761200000;\n\nconst formatAndLimitTime = (time, negativeMark, zeroAndBelow = false) => (0, _common.formatTime)(time == null ? 0 : Math[zeroAndBelow ? 'min' : 'max'](0, time), negativeMark);\n\nconst TimeDisplay = ({\n  position,\n  duration,\n  absolutePosition,\n  playMode,\n  liveDisplayMode = 'clock-time',\n  negativeMark,\n  label,\n  positionLabel,\n  durationLabel,\n  clockTimeLabel,\n  classNamePrefix = _common.defaultClassNamePrefix\n}) => {\n  if (playMode === 'ondemand') {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: (0, _common.prefixClassNames)(classNamePrefix, className),\n      title: label\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: (0, _common.prefixClassNames)(classNamePrefix, positionClassName),\n      title: positionLabel\n    }, formatAndLimitTime(position, negativeMark)), /*#__PURE__*/React.createElement(\"span\", {\n      className: (0, _common.prefixClassNames)(classNamePrefix, durationClassName),\n      title: durationLabel\n    }, formatAndLimitTime(duration, negativeMark)));\n  } else {\n    if (liveDisplayMode === 'live-offset' && playMode === 'livedvr' || !isReasonableDateTime(absolutePosition)) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: (0, _common.prefixClassNames)(classNamePrefix, className),\n        title: label\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: (0, _common.prefixClassNames)(classNamePrefix, positionClassName),\n        title: positionLabel\n      }, formatAndLimitTime((position || duration || 0) - (duration || 0), negativeMark, true)), playMode === 'livedvr' && /*#__PURE__*/React.createElement(\"span\", {\n        className: (0, _common.prefixClassNames)(classNamePrefix, durationClassName),\n        title: durationLabel\n      }, formatAndLimitTime(duration, negativeMark)));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: (0, _common.prefixClassNames)(classNamePrefix, className, noDurationClassName),\n        title: label\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: (0, _common.prefixClassNames)(classNamePrefix, clockTimeClassName),\n        title: positionLabel\n      }, (0, _common.formatClockTime)(absolutePosition)));\n    }\n  }\n};\n\nTimeDisplay.streamStateKeysForObservation = ['position', 'duration', 'absolutePosition', 'playMode'];\nTimeDisplay.displayName = 'TimeDisplay';\nvar _default = TimeDisplay;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/replay/components/controls/TimeDisplay/TimeDisplay.js"],"names":["className","positionClassName","durationClassName","clockTimeClassName","noDurationClassName","isReasonableDateTime","date","isNaN","formatAndLimitTime","zeroAndBelow","time","Math","TimeDisplay","liveDisplayMode","classNamePrefix","defaultClassNamePrefix","playMode","label","positionLabel","durationLabel","position","duration"],"mappings":"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","sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport type { CommonProps } from '../../common';\nimport { defaultClassNamePrefix, formatClockTime, formatTime, prefixClassNames } from '../../common';\nimport type { PlayMode } from '../../player/VideoStreamer/types';\nimport type { ObservingControlStaticProps } from '../../player/PlayerController/ControllerContext';\n\nexport type LiveDisplayMode = 'clock-time' | 'live-offset';\n\ntype Props = CommonProps & {\n  /** ⇘︎ The relative playback position, used for on demand position and timeshift offset display. */\n  position?: number,\n  /** ⇘︎ The duration of the stream, used for on demand position and timeshift offset display. */\n  duration?: number,\n  /** ⇘︎ The clock time, used for live streams and DVR streams when liveDisplayMode is set to 'live-offset'. */\n  absolutePosition?: ?Date,\n  /** ⇘︎ Play mode is used to decide what times to display. */\n  playMode?: PlayMode,\n  /** When set to 'live-offset', DVR times will be displayed as offsets from the live edge. Default is 'clock-time'. */\n  liveDisplayMode?: LiveDisplayMode,\n  negativeMark?: string,\n  positionLabel?: string,\n  durationLabel?: string,\n  clockTimeLabel?: string\n};\n\ntype TimeDisplayType = React.StatelessFunctionalComponent<Props> & ObservingControlStaticProps;\n\nconst className = 'time-display';\nconst positionClassName = 'time-display-position';\nconst durationClassName = 'time-display-duration';\nconst clockTimeClassName = 'time-display-clock-time';\nconst noDurationClassName = 'time-display-no-duration';\n\nconst isReasonableDateTime = date => date instanceof Date && !isNaN(date.getTime()) && date.getTime() > 1514761200000;\n\nconst formatAndLimitTime = (time: ?number, negativeMark?: string, zeroAndBelow: boolean = false) =>\n  formatTime(time == null ? 0 : Math[zeroAndBelow ? 'min' : 'max'](0, time), negativeMark);\n\nconst TimeDisplay: TimeDisplayType = ({\n  position,\n  duration,\n  absolutePosition,\n  playMode,\n  liveDisplayMode = 'clock-time',\n  negativeMark,\n  label,\n  positionLabel,\n  durationLabel,\n  clockTimeLabel,\n  classNamePrefix = defaultClassNamePrefix\n}: Props) => {\n  if (playMode === 'ondemand') {\n    return (\n      <div className={prefixClassNames(classNamePrefix, className)} title={label}>\n        <span className={prefixClassNames(classNamePrefix, positionClassName)} title={positionLabel}>\n          {formatAndLimitTime(position, negativeMark)}\n        </span>\n        <span className={prefixClassNames(classNamePrefix, durationClassName)} title={durationLabel}>\n          {formatAndLimitTime(duration, negativeMark)}\n        </span>\n      </div>\n    );\n  } else {\n    if ((liveDisplayMode === 'live-offset' && playMode === 'livedvr') || !isReasonableDateTime(absolutePosition)) {\n      return (\n        <div className={prefixClassNames(classNamePrefix, className)} title={label}>\n          <span className={prefixClassNames(classNamePrefix, positionClassName)} title={positionLabel}>\n            {formatAndLimitTime((position || duration || 0) - (duration || 0), negativeMark, true)}\n          </span>\n          {playMode === 'livedvr' && (\n            <span className={prefixClassNames(classNamePrefix, durationClassName)} title={durationLabel}>\n              {formatAndLimitTime(duration, negativeMark)}\n            </span>\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div className={prefixClassNames(classNamePrefix, className, noDurationClassName)} title={label}>\n          <span className={prefixClassNames(classNamePrefix, clockTimeClassName)} title={positionLabel}>\n            {formatClockTime(absolutePosition)}\n          </span>\n        </div>\n      );\n    }\n  }\n};\n\nTimeDisplay.streamStateKeysForObservation = ['position', 'duration', 'absolutePosition', 'playMode'];\nTimeDisplay.displayName = 'TimeDisplay';\n\nexport default TimeDisplay;\n"]},"metadata":{},"sourceType":"script"}