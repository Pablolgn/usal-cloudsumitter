{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getSourceChangeHandler;\n\nvar _sourceNormalizer = _interopRequireDefault(require(\"../common/sourceNormalizer\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getSourceChangeHandler(videoElement) {\n  const handleSourceChange = ({\n    source\n  }, prevProps) => {\n    const n = (0, _sourceNormalizer.default)(source);\n\n    if (n && n.streamUrl) {\n      if (typeof n.startPosition === 'number' && n.streamUrl.indexOf('#t=') < 0) {\n        videoElement.src = \"\".concat(n.streamUrl, \"#t=\").concat(n.startPosition.toFixed(2));\n      } else {\n        videoElement.src = n.streamUrl;\n      }\n    } else if (videoElement.src) {\n      videoElement.removeAttribute('src');\n      videoElement.load();\n    }\n\n    return Promise.resolve();\n  };\n\n  return handleSourceChange;\n}","map":{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/BasicVideoStreamer/sourceChangeHandler.js"],"names":["handleSourceChange","source","n","videoElement","Promise"],"mappings":";;;;;;;AAEA,IAAA,iBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,4BAAA,CAAA,CAAA;;;;;;;;AAEe,SAAA,sBAAA,CAAA,YAAA,EAAgE;AAC7E,QAAMA,kBAAkB,GAAG,CAAkC;AAAEC,IAAAA;AAAF,GAAlC,EAAA,SAAA,KAAmE;AAC5F,UAAMC,CAAC,GAAG,CAAA,GAAA,iBAAA,CAAA,OAAA,EAAV,MAAU,CAAV;;AACA,QAAIA,CAAC,IAAIA,CAAC,CAAV,SAAA,EAAsB;AACpB,UAAI,OAAOA,CAAC,CAAR,aAAA,KAAA,QAAA,IAAuCA,CAAC,CAADA,SAAAA,CAAAA,OAAAA,CAAAA,KAAAA,IAA3C,CAAA,EAA2E;AACzEC,QAAAA,YAAY,CAAZA,GAAAA,GAAAA,GAAAA,MAAAA,CAAsBD,CAAC,CAAvBC,SAAAA,EAAAA,KAAAA,EAAAA,MAAAA,CAAuCD,CAAC,CAADA,aAAAA,CAAAA,OAAAA,CAAvCC,CAAuCD,CAAvCC,CAAAA;AADF,OAAA,MAEO;AACLA,QAAAA,YAAY,CAAZA,GAAAA,GAAmBD,CAAC,CAApBC,SAAAA;AACD;AALH,KAAA,MAMO,IAAIA,YAAY,CAAhB,GAAA,EAAsB;AAC3BA,MAAAA,YAAY,CAAZA,eAAAA,CAAAA,KAAAA;AACAA,MAAAA,YAAY,CAAZA,IAAAA;AACD;;AACD,WAAOC,OAAO,CAAd,OAAOA,EAAP;AAZF,GAAA;;AAcA,SAAA,kBAAA;AACD","sourcesContent":["// @flow\nimport type { PlaybackSource } from '../types';\nimport normalizeSource from '../common/sourceNormalizer';\n\nexport default function getSourceChangeHandler(videoElement: HTMLVideoElement) {\n  const handleSourceChange = <P: { source?: ?PlaybackSource }>({ source }: P, prevProps: ?P) => {\n    const n = normalizeSource(source);\n    if (n && n.streamUrl) {\n      if (typeof n.startPosition === 'number' && n.streamUrl.indexOf('#t=') < 0) {\n        videoElement.src = `${n.streamUrl}#t=${n.startPosition.toFixed(2)}`;\n      } else {\n        videoElement.src = n.streamUrl;\n      }\n    } else if (videoElement.src) {\n      videoElement.removeAttribute('src');\n      videoElement.load();\n    }\n    return Promise.resolve();\n  };\n  return handleSourceChange;\n}\n"]},"metadata":{},"sourceType":"script"}