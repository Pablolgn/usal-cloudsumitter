{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactFeather = require(\"react-feather\");\n\nvar _LoadingAnimation = _interopRequireDefault(require(\"./LoadingAnimation\"));\n\nvar _strings = _interopRequireDefault(require(\"../strings\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nconst graphics = {\n  playPauseButton: {\n    playingContent: /*#__PURE__*/React.createElement(_reactFeather.Pause, null),\n    pausedContent: /*#__PURE__*/React.createElement(_reactFeather.Play, null)\n  },\n  skipButton: {\n    content: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(_reactFeather.RotateCcw, null)), /*#__PURE__*/React.createElement(\"span\", null, _strings.default.skipButton.seconds))\n  },\n  timeline: {\n    handleContent: '',\n    trackContent: /*#__PURE__*/React.createElement(\"div\", null)\n  },\n  gotoLiveButton: {\n    isAtLiveEdgeContent: /*#__PURE__*/React.createElement(\"span\", null, _strings.default.gotoLiveButton.isLive),\n    isNotAtLiveEdgeContent: /*#__PURE__*/React.createElement(\"span\", null, _strings.default.gotoLiveButton.gotoLive)\n  },\n  volume: {\n    unmutedContent: /*#__PURE__*/React.createElement(_reactFeather.Volume2, null),\n    mutedContent: /*#__PURE__*/React.createElement(_reactFeather.VolumeX, null),\n    volumeSliderHandleContent: ''\n  },\n  audioSelector: {\n    toggleContent: /*#__PURE__*/React.createElement(_reactFeather.MessageSquare, null)\n  },\n  subtitlesSelector: {\n    toggleContent: /*#__PURE__*/React.createElement(_reactFeather.Type, null)\n  },\n  qualitySelector: {\n    toggleContent: /*#__PURE__*/React.createElement(_reactFeather.Settings, null)\n  },\n  pipButton: {\n    pipActiveContent: /*#__PURE__*/React.createElement(_reactFeather.Square, null),\n    pipInactiveContent: /*#__PURE__*/React.createElement(_reactFeather.Copy, null)\n  },\n  airPlayButton: {\n    airPlayActiveContent: /*#__PURE__*/React.createElement(_reactFeather.Airplay, null),\n    airPlayInactiveContent: /*#__PURE__*/React.createElement(_reactFeather.Airplay, null)\n  },\n  fullscreenButton: {\n    normalContent: /*#__PURE__*/React.createElement(_reactFeather.Maximize, null),\n    fullscreenContent: /*#__PURE__*/React.createElement(_reactFeather.Minimize, null)\n  },\n  bufferingIndicator: {\n    content: /*#__PURE__*/React.createElement(_LoadingAnimation.default, null),\n    renderStrategy: 'always'\n  },\n  playbackMonitor: {\n    closeButtonContent: /*#__PURE__*/React.createElement(_reactFeather.XCircle, null)\n  },\n  exitButton: {\n    content: /*#__PURE__*/React.createElement(_reactFeather.XCircle, null)\n  }\n};\nvar _default = graphics;\nexports.default = _default;","map":{"version":3,"sources":["../../src/replay/default-player/default-skin/graphics.js"],"names":["graphics","playPauseButton","playingContent","pausedContent","skipButton","content","strings","timeline","handleContent","trackContent","gotoLiveButton","isAtLiveEdgeContent","isNotAtLiveEdgeContent","volume","unmutedContent","mutedContent","volumeSliderHandleContent","audioSelector","toggleContent","subtitlesSelector","qualitySelector","pipButton","pipActiveContent","pipInactiveContent","airPlayButton","airPlayActiveContent","airPlayInactiveContent","fullscreenButton","normalContent","fullscreenContent","bufferingIndicator","renderStrategy","playbackMonitor","closeButtonContent","exitButton"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport {\n  Play,\n  Pause,\n  RotateCcw,\n  Volume2,\n  VolumeX,\n  MessageSquare,\n  Type,\n  Settings,\n  Copy,\n  Square,\n  Airplay,\n  Maximize,\n  Minimize,\n  XCircle\n} from 'react-feather';\nimport LoadingAnimation from './LoadingAnimation';\nimport strings from '../strings';\n\nconst graphics = {\n  playPauseButton: {\n    playingContent: <Pause />,\n    pausedContent: <Play />\n  },\n  skipButton: {\n    content: (\n      <React.Fragment>\n        <span>\n          <RotateCcw />\n        </span>\n        <span>{strings.skipButton.seconds}</span>\n      </React.Fragment>\n    )\n  },\n  timeline: {\n    handleContent: '',\n    trackContent: <div />\n  },\n  gotoLiveButton: {\n    isAtLiveEdgeContent: <span>{strings.gotoLiveButton.isLive}</span>,\n    isNotAtLiveEdgeContent: <span>{strings.gotoLiveButton.gotoLive}</span>\n  },\n  volume: {\n    unmutedContent: <Volume2 />,\n    mutedContent: <VolumeX />,\n    volumeSliderHandleContent: ''\n  },\n  audioSelector: {\n    toggleContent: <MessageSquare />\n  },\n  subtitlesSelector: {\n    toggleContent: <Type />\n  },\n  qualitySelector: {\n    toggleContent: <Settings />\n  },\n  pipButton: {\n    pipActiveContent: <Square />,\n    pipInactiveContent: <Copy />\n  },\n  airPlayButton: {\n    airPlayActiveContent: <Airplay />,\n    airPlayInactiveContent: <Airplay />\n  },\n  fullscreenButton: {\n    normalContent: <Maximize />,\n    fullscreenContent: <Minimize />\n  },\n  bufferingIndicator: {\n    content: <LoadingAnimation />,\n    renderStrategy: 'always'\n  },\n  playbackMonitor: {\n    closeButtonContent: <XCircle />\n  },\n  exitButton: {\n    content: <XCircle />\n  }\n};\n\nexport default graphics;\n"]},"metadata":{},"sourceType":"script"}