{"ast":null,"code":"import * as THREE from 'three';\nvar container, camera, scene, renderer;\n\nfunction Stl(props) {\n  // renderer\n  renderer = new THREE.WebGLRenderer({\n    antialias: true\n  });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  container.appendChild(renderer.domElement); // scene\n\n  scene = new THREE.Scene(); // camera\n\n  camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 1, 10000);\n  camera.position.set(3, 0.5, 3);\n  scene.add(camera); // required, because we are adding a light as a child of the camera\n  // lights\n\n  scene.add(new THREE.AmbientLight(0x222222));\n  var light = new THREE.PointLight(0xffffff, 0.8);\n  camera.add(light);\n  var loader = new THREE.STLLoader();\n  loader.load('FIRSTFILE.stl', function (geometry) {\n    var material = new THREE.MeshPhongMaterial({\n      color: 0xff5533\n    });\n    var mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n  });\n  loader.load('SECONDFILE.stl', function (geometry) {\n    var material = new THREE.MeshPhongMaterial({\n      color: 0xff5533\n    });\n    var mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n  });\n}\n\n;\nexport default Stl;","map":{"version":3,"sources":["/home/pablo/go/src/gitlab.com/Pablolgn/usal-cloudsubmitter/frontend/src/components/Stl.js"],"names":["THREE","container","camera","scene","renderer","Stl","props","WebGLRenderer","antialias","setSize","window","innerWidth","innerHeight","appendChild","domElement","Scene","PerspectiveCamera","position","set","add","AmbientLight","light","PointLight","loader","STLLoader","load","geometry","material","MeshPhongMaterial","color","mesh","Mesh"],"mappings":"AAAE,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGE,IAAIC,SAAJ,EAAeC,MAAf,EAAuBC,KAAvB,EAA8BC,QAA9B;;AAEJ,SAASC,GAAT,CAAaC,KAAb,EAAmB;AAEf;AACAF,EAAAA,QAAQ,GAAG,IAAIJ,KAAK,CAACO,aAAV,CAAyB;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAAzB,CAAX;AACAJ,EAAAA,QAAQ,CAACK,OAAT,CAAkBC,MAAM,CAACC,UAAzB,EAAqCD,MAAM,CAACE,WAA5C;AACAX,EAAAA,SAAS,CAACY,WAAV,CAAuBT,QAAQ,CAACU,UAAhC,EALe,CAOf;;AACAX,EAAAA,KAAK,GAAG,IAAIH,KAAK,CAACe,KAAV,EAAR,CARe,CAUf;;AACAb,EAAAA,MAAM,GAAG,IAAIF,KAAK,CAACgB,iBAAV,CAA6B,EAA7B,EAAiCN,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAA5D,EAAyE,CAAzE,EAA4E,KAA5E,CAAT;AACAV,EAAAA,MAAM,CAACe,QAAP,CAAgBC,GAAhB,CAAqB,CAArB,EAAwB,GAAxB,EAA6B,CAA7B;AACAf,EAAAA,KAAK,CAACgB,GAAN,CAAWjB,MAAX,EAbe,CAaM;AAGrB;;AACAC,EAAAA,KAAK,CAACgB,GAAN,CAAW,IAAInB,KAAK,CAACoB,YAAV,CAAwB,QAAxB,CAAX;AAEA,MAAIC,KAAK,GAAG,IAAIrB,KAAK,CAACsB,UAAV,CAAsB,QAAtB,EAAgC,GAAhC,CAAZ;AACApB,EAAAA,MAAM,CAACiB,GAAP,CAAYE,KAAZ;AAGA,MAAIE,MAAM,GAAG,IAAIvB,KAAK,CAACwB,SAAV,EAAb;AACAD,EAAAA,MAAM,CAACE,IAAP,CAAa,eAAb,EAA8B,UAAWC,QAAX,EAAsB;AAChD,QAAIC,QAAQ,GAAG,IAAI3B,KAAK,CAAC4B,iBAAV,CAA6B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA7B,CAAf;AACA,QAAIC,IAAI,GAAG,IAAI9B,KAAK,CAAC+B,IAAV,CAAgBL,QAAhB,EAA0BC,QAA1B,CAAX;AACAxB,IAAAA,KAAK,CAACgB,GAAN,CAAWW,IAAX;AACH,GAJD;AAMAP,EAAAA,MAAM,CAACE,IAAP,CAAa,gBAAb,EAA+B,UAAWC,QAAX,EAAsB;AACjD,QAAIC,QAAQ,GAAG,IAAI3B,KAAK,CAAC4B,iBAAV,CAA6B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA7B,CAAf;AACA,QAAIC,IAAI,GAAG,IAAI9B,KAAK,CAAC+B,IAAV,CAAgBL,QAAhB,EAA0BC,QAA1B,CAAX;AACAxB,IAAAA,KAAK,CAACgB,GAAN,CAAWW,IAAX;AACH,GAJD;AAOH;;AAAA;AAED,eAAezB,GAAf","sourcesContent":["  import * as THREE from 'three'\n\n\n    var container, camera, scene, renderer;\n  \nfunction Stl(props){\n    \n    // renderer\n    renderer = new THREE.WebGLRenderer( { antialias: true } );\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    container.appendChild( renderer.domElement );\n\n    // scene\n    scene = new THREE.Scene();\n\n    // camera\n    camera = new THREE.PerspectiveCamera( 35, window.innerWidth / window.innerHeight, 1, 10000 );\n    camera.position.set( 3, 0.5, 3 );\n    scene.add( camera ); // required, because we are adding a light as a child of the camera\n\n\n    // lights\n    scene.add( new THREE.AmbientLight( 0x222222 ) );\n\n    var light = new THREE.PointLight( 0xffffff, 0.8 );\n    camera.add( light );\n\n\n    var loader = new THREE.STLLoader();\n    loader.load( 'FIRSTFILE.stl', function ( geometry ) {\n        var material = new THREE.MeshPhongMaterial( { color: 0xff5533 } );\n        var mesh = new THREE.Mesh( geometry, material );\n        scene.add( mesh );\n    } );\n    \n    loader.load( 'SECONDFILE.stl', function ( geometry ) {\n        var material = new THREE.MeshPhongMaterial( { color: 0xff5533 } );\n        var mesh = new THREE.Mesh( geometry, material );\n        scene.add( mesh );\n    } );\n\n\n};\n\nexport default Stl;"]},"metadata":{},"sourceType":"module"}