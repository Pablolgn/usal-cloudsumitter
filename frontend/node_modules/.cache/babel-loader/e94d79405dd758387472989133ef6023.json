{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _Selector = _interopRequireDefault(require(\"../../generic/Selector/Selector\"));\n\nvar _common = require(\"../../common\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst className = 'subtitles-selector';\nconst defaultKind = 'subtitles';\n\nconst buildId = (...str) => str.filter(s => s).join('.'); // TODO: Consider injectable label mapper, and also for audio selector and bitrate selector.\n\n\nconst buildLabel = ({\n  label,\n  kind = defaultKind,\n  language = 'unknown'\n}) => label || (kind !== defaultKind ? \"[\".concat(language, \"] \").concat(kind) : \"[\".concat(language, \"]\")) || '';\n\nconst textTrackToItem = track => {\n  if (track.noTrack) {\n    const label = track.label || '';\n    return {\n      id: 0,\n      label,\n      data: track\n    };\n  } else {\n    return {\n      id: track.id || buildId(track.language, track.kind, track.origin) || track.label,\n      label: buildLabel(track),\n      data: track\n    };\n  }\n};\n\nclass SubtitlesSelector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleSelect\", item => {\n      if (this.props.setProperties) {\n        if (item.noTrack) {\n          this.props.setProperties({\n            selectedTextTrack: null\n          });\n        } else {\n          this.props.setProperties({\n            selectedTextTrack: item\n          });\n        }\n      }\n    });\n\n    this.state = {\n      noSubtitlesItem: {\n        noTrack: true,\n        label: this.props.noSubtitlesLabel\n      }\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          textTracks = _this$props.textTracks,\n          currentTextTrack = _this$props.currentTextTrack,\n          label = _this$props.label,\n          toggleContent = _this$props.toggleContent,\n          classNamePrefix = _this$props.classNamePrefix;\n\n    if (Array.isArray(textTracks) && textTracks.length > 0) {\n      // TODO: Consider optimization, memoizing the array and all props involved in rendering.\n      const items = [this.state.noSubtitlesItem].concat(textTracks);\n      let selectedItem = this.state.noSubtitlesItem;\n\n      if (currentTextTrack) {\n        const selectedIndex = textTracks.indexOf(currentTextTrack) + 1; // Nasty detail. Including \"no subtitles\" when counting.\n\n        if (selectedIndex > 0) {\n          selectedItem = items[selectedIndex];\n        }\n      }\n\n      return /*#__PURE__*/React.createElement(_Selector.default, {\n        items: items,\n        itemMapper: textTrackToItem,\n        classNamePrefix: classNamePrefix,\n        className: className,\n        selectedItem: selectedItem,\n        label: label,\n        onSelect: this.handleSelect,\n        reverseOrder: true,\n        expandedToggleContent: toggleContent,\n        collapsedToggleContent: toggleContent\n      });\n    } else {\n      return null;\n    }\n  }\n\n}\n\n_defineProperty(SubtitlesSelector, \"defaultProps\", {\n  classNamePrefix: _common.defaultClassNamePrefix\n});\n\n_defineProperty(SubtitlesSelector, \"streamStateKeysForObservation\", ['textTracks', 'currentTextTrack']);\n\nSubtitlesSelector.displayName = 'SubtitlesSelector';\nvar _default = SubtitlesSelector;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/replay/components/controls/SubtitlesSelector/SubtitlesSelector.js"],"names":["className","defaultKind","buildId","str","s","buildLabel","kind","language","label","textTrackToItem","track","id","data","SubtitlesSelector","React","classNamePrefix","defaultClassNamePrefix","constructor","noSubtitlesItem","noTrack","noSubtitlesLabel","item","selectedTextTrack","render","textTracks","currentTextTrack","toggleContent","Array","items","selectedItem","selectedIndex"],"mappings":";;;;;;;AACA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,iCAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,MAAMA,SAAS,GAAf,oBAAA;AAEA,MAAMC,WAAW,GAAjB,WAAA;;AAEA,MAAMC,OAAO,GAAG,CAAC,GAAD,GAAA,KAA4BC,GAAG,CAAHA,MAAAA,CAAWC,CAAC,IAAZD,CAAAA,EAAAA,IAAAA,CAA5C,GAA4CA,CAA5C,C,CACA;;;AACA,MAAME,UAAU,GAAG,CAAC;AAAA,EAAA,KAAA;AAASC,EAAAA,IAAI,GAAb,WAAA;AAA6BC,EAAAA,QAAQ,GAAG;AAAxC,CAAD,KACjBC,KAAK,KAAKF,IAAI,KAAJA,WAAAA,GAAAA,IAAAA,MAAAA,CAAAA,QAAAA,EAAAA,IAAAA,EAAAA,MAAAA,CAAAA,IAAAA,CAAAA,GAAAA,IAAAA,MAAAA,CAAAA,QAAAA,EAAVE,GAAUF,CAAL,CAALE,IADF,EAAA;;AAGA,MAAMC,eAAe,GAAIC,KAAD,IAA8D;AACpF,MAAIA,KAAK,CAAT,OAAA,EAAmB;AACjB,UAAMF,KAAK,GAAGE,KAAK,CAALA,KAAAA,IAAd,EAAA;AACA,WAAO;AACLC,MAAAA,EAAE,EADG,CAAA;AAAA,MAAA,KAAA;AAGLC,MAAAA,IAAI,EAAEF;AAHD,KAAP;AAFF,GAAA,MAOO;AACL,WAAO;AACLC,MAAAA,EAAE,EAAED,KAAK,CAALA,EAAAA,IAAYR,OAAO,CAACQ,KAAK,CAAN,QAAA,EAAiBA,KAAK,CAAtB,IAAA,EAA6BA,KAAK,CAArDA,MAAmB,CAAnBA,IAAiEA,KAAK,CADrE,KAAA;AAELF,MAAAA,KAAK,EAAEH,UAAU,CAFZ,KAEY,CAFZ;AAGLO,MAAAA,IAAI,EAAEF;AAHD,KAAP;AAKD;AAdH,CAAA;;AAiBA,MAAA,iBAAA,SAAgCI,KAAK,CAArC,SAAA,CAA8D;AAO5DG,EAAAA,WAAW,CAAA,KAAA,EAAe;AACxB,UAAA,KAAA;;AADwB,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,EAOVI,IAAD,IAAe;AAC5B,UAAI,KAAA,KAAA,CAAJ,aAAA,EAA8B;AAC5B,YAAIA,IAAI,CAAR,OAAA,EAAkB;AAChB,eAAA,KAAA,CAAA,aAAA,CAAyB;AAAEC,YAAAA,iBAAiB,EAAE;AAArB,WAAzB;AADF,SAAA,MAEO;AACL,eAAA,KAAA,CAAA,aAAA,CAAyB;AAAEA,YAAAA,iBAAiB,EAAED;AAArB,WAAzB;AACD;AACF;AAduB,KAAA,CAAA;;AAExB,SAAA,KAAA,GAAa;AACXH,MAAAA,eAAe,EAAE;AAAEC,QAAAA,OAAO,EAAT,IAAA;AAAiBX,QAAAA,KAAK,EAAE,KAAA,KAAA,CAAWY;AAAnC;AADN,KAAb;AAGD;;AAYDG,EAAAA,MAAM,GAAG;AAAA,UAAA,WAAA,GACyE,KADzE,KAAA;AAAA,UACCC,UADD,GAAA,WAAA,CAAA,UAAA;AAAA,UACaC,gBADb,GAAA,WAAA,CAAA,gBAAA;AAAA,UAC+BjB,KAD/B,GAAA,WAAA,CAAA,KAAA;AAAA,UACsCkB,aADtC,GAAA,WAAA,CAAA,aAAA;AAAA,UACqDX,eADrD,GAAA,WAAA,CAAA,eAAA;;AAEP,QAAIY,KAAK,CAALA,OAAAA,CAAAA,UAAAA,KAA6BH,UAAU,CAAVA,MAAAA,GAAjC,CAAA,EAAwD;AACtD;AACA,YAAMI,KAAK,GAAG,CAAC,KAAA,KAAA,CAAD,eAAA,EAAA,MAAA,CAAd,UAAc,CAAd;AACA,UAAIC,YAAY,GAAG,KAAA,KAAA,CAAnB,eAAA;;AACA,UAAA,gBAAA,EAAsB;AACpB,cAAMC,aAAa,GAAGN,UAAU,CAAVA,OAAAA,CAAAA,gBAAAA,IADF,CACpB,CADoB,CAC4C;;AAChE,YAAIM,aAAa,GAAjB,CAAA,EAAuB;AACrBD,UAAAA,YAAY,GAAGD,KAAK,CAApBC,aAAoB,CAApBA;AACD;AACF;;AACD,aAAA,aACE,KAAA,CAAA,aAAA,CAAC,SAAA,CAAD,OAAA,EAAA;AACE,QAAA,KAAK,EADP,KAAA;AAEE,QAAA,UAAU,EAFZ,eAAA;AAGE,QAAA,eAAe,EAHjB,eAAA;AAIE,QAAA,SAAS,EAJX,SAAA;AAKE,QAAA,YAAY,EALd,YAAA;AAME,QAAA,KAAK,EANP,KAAA;AAOE,QAAA,QAAQ,EAAE,KAPZ,YAAA;AAQE,QAAA,YAAY,EARd,IAAA;AASE,QAAA,qBAAqB,EATvB,aAAA;AAUE,QAAA,sBAAsB,EAAEH;AAV1B,OAAA,CADF;AAVF,KAAA,MAwBO;AACL,aAAA,IAAA;AACD;AACF;;AArD2D;;gBAAxDb,iB,kBACkB;AACpBE,EAAAA,eAAe,EAAEC,OAAAA,CAAAA;AADG,C;;gBADlBH,iB,mCAKkE,CAAA,YAAA,EAAA,kBAAA,C;;AAmDxEA,iBAAiB,CAAjBA,WAAAA,GAAAA,mBAAAA;eACeA,iB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport Selector from '../../generic/Selector/Selector';\nimport { defaultClassNamePrefix } from '../../common';\nimport type { AvailableTrack } from '../../player/VideoStreamer/types';\nimport type { CommonProps } from '../../common';\nimport type { StreamStateKeysForObservation } from '../../player/PlayerController/ControllerContext';\n\ntype Props = CommonProps & {\n  /** ⇘︎ The list of text tracks available for selection. */\n  textTracks?: Array<AvailableTrack>,\n  /** ⇘ The currently displaying text track. Must be strict equal one of the items in the text track list. Set to null if no subtitles are displayed. */\n  currentTextTrack?: AvailableTrack,\n  /** ⇗ When one item is clicked, this callback is invoked with an object having an selectedTextTrack property with the textTrack object corresponding to the selection. */\n  setProperties?: ({ selectedTextTrack: ?AvailableTrack }) => void,\n  /** The label to use on the selector option for not displaying subtitles. */\n  noSubtitlesLabel: string,\n  /** Element displayed in the control bar for expanding/collapsing the selector items. */\n  toggleContent: React.Node\n};\n\ntype State = {\n  noSubtitlesItem: { noTrack: true, label: string }\n};\n\nconst className = 'subtitles-selector';\n\nconst defaultKind = 'subtitles';\n\nconst buildId = (...str: Array<?string>) => str.filter(s => s).join('.');\n// TODO: Consider injectable label mapper, and also for audio selector and bitrate selector.\nconst buildLabel = ({ label, kind = defaultKind, language = 'unknown' }: AvailableTrack) =>\n  label || (kind !== defaultKind ? `[${language}] ${kind}` : `[${language}]`) || '';\n\nconst textTrackToItem = (track: AvailableTrack | { noTrack: true, label: string }) => {\n  if (track.noTrack) {\n    const label = track.label || '';\n    return {\n      id: 0,\n      label,\n      data: track\n    };\n  } else {\n    return {\n      id: track.id || buildId(track.language, track.kind, track.origin) || track.label,\n      label: buildLabel(track),\n      data: track\n    };\n  }\n};\n\nclass SubtitlesSelector extends React.Component<Props, State> {\n  static defaultProps = {\n    classNamePrefix: defaultClassNamePrefix\n  };\n\n  static streamStateKeysForObservation: StreamStateKeysForObservation = ['textTracks', 'currentTextTrack'];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      noSubtitlesItem: { noTrack: true, label: this.props.noSubtitlesLabel }\n    };\n  }\n\n  handleSelect = (item: any) => {\n    if (this.props.setProperties) {\n      if (item.noTrack) {\n        this.props.setProperties({ selectedTextTrack: null });\n      } else {\n        this.props.setProperties({ selectedTextTrack: item });\n      }\n    }\n  };\n\n  render() {\n    const { textTracks, currentTextTrack, label, toggleContent, classNamePrefix } = this.props;\n    if (Array.isArray(textTracks) && textTracks.length > 0) {\n      // TODO: Consider optimization, memoizing the array and all props involved in rendering.\n      const items = [this.state.noSubtitlesItem].concat(textTracks);\n      let selectedItem = this.state.noSubtitlesItem;\n      if (currentTextTrack) {\n        const selectedIndex = textTracks.indexOf(currentTextTrack) + 1; // Nasty detail. Including \"no subtitles\" when counting.\n        if (selectedIndex > 0) {\n          selectedItem = items[selectedIndex];\n        }\n      }\n      return (\n        <Selector\n          items={items}\n          itemMapper={textTrackToItem}\n          classNamePrefix={classNamePrefix}\n          className={className}\n          selectedItem={selectedItem}\n          label={label}\n          onSelect={this.handleSelect}\n          reverseOrder={true}\n          expandedToggleContent={toggleContent}\n          collapsedToggleContent={toggleContent}\n        />\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nSubtitlesSelector.displayName = 'SubtitlesSelector';\nexport default SubtitlesSelector;\n"]},"metadata":{},"sourceType":"script"}