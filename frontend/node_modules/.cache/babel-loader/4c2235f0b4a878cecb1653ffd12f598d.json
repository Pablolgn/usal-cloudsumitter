{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _resizeObserverPolyfill = _interopRequireDefault(require(\"resize-observer-polyfill\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass ResponsiveClassNames extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"resizeObserver\", void 0);\n\n    _defineProperty(this, \"onRef\", element => {\n      if (this.resizeObserver) {\n        this.resizeObserver.disconnect();\n      }\n\n      if (element && this.props.configuration && Array.isArray(this.props.configuration.responsivenessRules) && this.props.configuration.responsivenessRules.length > 0) {\n        if (!this.resizeObserver) {\n          this.resizeObserver = new _resizeObserverPolyfill.default(entries => {\n            var _iterator = _createForOfIteratorHelper(entries),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                const entry = _step.value;\n                this.onSizeChange(entry.contentRect);\n                /*\n                const {left, top, width, height} = entry.contentRect;\n                 console.log('Element:', entry.target);\n                console.log(`Element's size: ${ width }px x ${ height }px`);\n                console.log(`Element's paddings: ${ top }px ; ${ left }px`);\n                */\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          }); // console.log('ResizeObserver instantiated.', this.resizeObserver);\n        }\n\n        this.resizeObserver.observe(element);\n      }\n\n      if (this.props.onRef) {\n        this.props.onRef(element);\n      }\n    });\n\n    _defineProperty(this, \"onSizeChange\", contentRect => {\n      const elementWidth = contentRect.width;\n      const elementHeight = contentRect.height;\n\n      if (elementWidth > 0 && elementHeight > 0 && this.props.configuration && Array.isArray(this.props.configuration.responsivenessRules)) {\n        const responsiveClassNames = this.props.configuration.responsivenessRules.filter(({\n          width,\n          height\n        }) => {\n          if (width && (width.min && elementWidth <= width.min || width.max && elementWidth > width.max)) {\n            return false;\n          }\n\n          if (height && (height.min && elementHeight <= height.min || height.max && elementHeight > height.max)) {\n            return false;\n          }\n\n          return true;\n        }).map(range => range.className);\n        this.setState({\n          responsiveClassNames\n        });\n      }\n    });\n\n    this.state = {\n      responsiveClassNames: []\n    };\n  }\n\n  render() {\n    return this.props.render({\n      onRef: this.onRef,\n      responsiveClassNames: this.state.responsiveClassNames\n    });\n  }\n\n}\n\nvar _default = ResponsiveClassNames;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/replay/components/player/containment-helpers/ResponsiveClassNames.js"],"names":["React","constructor","responsiveClassNames","element","Array","ResizeObserver","entries","entry","contentRect","elementWidth","elementHeight","height","width","range","render","onRef","ResponsiveClassNames"],"mappings":";;;;;;;AACA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,uBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,MAAA,oBAAA,SAAmCA,KAAK,CAAxC,SAAA,CAAiE;AAC/DC,EAAAA,WAAW,CAAA,KAAA,EAAe;AACxB,UAAA,KAAA;;AADwB,IAAA,eAAA,CAAA,IAAA,EAAA,gBAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EASjBE,OAAD,IAA2B;AACjC,UAAI,KAAJ,cAAA,EAAyB;AACvB,aAAA,cAAA,CAAA,UAAA;AACD;;AACD,UACEA,OAAO,IACP,KAAA,KAAA,CADAA,aAAAA,IAEAC,KAAK,CAALA,OAAAA,CAAc,KAAA,KAAA,CAAA,aAAA,CAFdD,mBAEAC,CAFAD,IAGA,KAAA,KAAA,CAAA,aAAA,CAAA,mBAAA,CAAA,MAAA,GAJF,CAAA,EAKE;AACA,YAAI,CAAC,KAAL,cAAA,EAA0B;AACxB,eAAA,cAAA,GAAsB,IAAIE,uBAAAA,CAAJ,OAAA,CAAmBC,OAAO,IAAI;AAAA,gBAAA,SAAA,GAAA,0BAAA,CAAA,OAAA,CAAA;AAAA,gBAAA,KAAA;;AAAA,gBAAA;AAClD,mBAAA,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAA6B;AAAA,sBAAlBC,KAAkB,GAAA,KAAA,CAAA,KAAA;AAC3B,qBAAA,YAAA,CAAkBA,KAAK,CAAvB,WAAA;AACA;;;;;;AAOD;AAViD,aAAA,CAAA,OAAA,GAAA,EAAA;AAAA,cAAA,SAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAA,SAAA;AAAA,cAAA,SAAA,CAAA,CAAA;AAAA;AAD5B,WACF,CAAtB,CADwB,CAaxB;AACD;;AACD,aAAA,cAAA,CAAA,OAAA,CAAA,OAAA;AACD;;AACD,UAAI,KAAA,KAAA,CAAJ,KAAA,EAAsB;AACpB,aAAA,KAAA,CAAA,KAAA,CAAA,OAAA;AACD;AAtCuB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,EAyCVC,WAAD,IAAsD;AACnE,YAAMC,YAAY,GAAGD,WAAW,CAAhC,KAAA;AACA,YAAME,aAAa,GAAGF,WAAW,CAAjC,MAAA;;AACA,UACEC,YAAY,GAAZA,CAAAA,IACAC,aAAa,GADbD,CAAAA,IAEA,KAAA,KAAA,CAFAA,aAAAA,IAGAL,KAAK,CAALA,OAAAA,CAAc,KAAA,KAAA,CAAA,aAAA,CAJhB,mBAIEA,CAJF,EAKE;AACA,cAAMF,oBAAoB,GAAG,KAAA,KAAA,CAAA,aAAA,CAAA,mBAAA,CAAA,MAAA,CACnB,CAAC;AAAA,UAAA,KAAA;AAASS,UAAAA;AAAT,SAAD,KAAuB;AAC7B,cAAIC,KAAK,KAAMA,KAAK,CAALA,GAAAA,IAAaH,YAAY,IAAIG,KAAK,CAAnC,GAACA,IAA4CA,KAAK,CAALA,GAAAA,IAAaH,YAAY,GAAGG,KAAK,CAA5F,GAAS,CAAT,EAAoG;AAClG,mBAAA,KAAA;AACD;;AACD,cAAID,MAAM,KAAMA,MAAM,CAANA,GAAAA,IAAcD,aAAa,IAAIC,MAAM,CAAtC,GAACA,IAA+CA,MAAM,CAANA,GAAAA,IAAcD,aAAa,GAAGC,MAAM,CAAnG,GAAU,CAAV,EAA2G;AACzG,mBAAA,KAAA;AACD;;AACD,iBAAA,IAAA;AARyB,SAAA,EAAA,GAAA,CAUtBE,KAAK,IAAIA,KAAK,CAVrB,SAA6B,CAA7B;AAWA,aAAA,QAAA,CAAc;AAAEX,UAAAA;AAAF,SAAd;AACD;AA9DuB,KAAA,CAAA;;AAExB,SAAA,KAAA,GAAa;AACXA,MAAAA,oBAAoB,EAAE;AADX,KAAb;AAGD;;AA4DDY,EAAAA,MAAM,GAAG;AACP,WAAO,KAAA,KAAA,CAAA,MAAA,CAAkB;AAAEC,MAAAA,KAAK,EAAE,KAAT,KAAA;AAAqBb,MAAAA,oBAAoB,EAAE,KAAA,KAAA,CAAWA;AAAtD,KAAlB,CAAP;AACD;;AApE8D;;eAuElDc,oB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nexport type ResponsiveRange = {\n  className: string,\n  width?: {\n    min?: ?number,\n    max?: ?number\n  },\n  height?: {\n    min?: ?number,\n    max?: ?number\n  }\n};\n\nexport type ResponsiveRanges = Array<ResponsiveRange>;\n\ntype RenderParameters = {\n  onRef: (?HTMLElement) => void,\n  responsiveClassNames: Array<string>\n};\n\ntype Props = {\n  configuration?: {\n    responsivenessRules?: ?ResponsiveRanges\n  },\n  onRef?: (?HTMLElement) => void,\n  render: RenderParameters => React.Node\n};\n\ntype State = {\n  responsiveClassNames: Array<string>\n};\n\nclass ResponsiveClassNames extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      responsiveClassNames: []\n    };\n  }\n\n  resizeObserver: ResizeObserver;\n\n  onRef = (element: ?HTMLElement) => {\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n    }\n    if (\n      element &&\n      this.props.configuration &&\n      Array.isArray(this.props.configuration.responsivenessRules) &&\n      this.props.configuration.responsivenessRules.length > 0\n    ) {\n      if (!this.resizeObserver) {\n        this.resizeObserver = new ResizeObserver(entries => {\n          for (const entry of entries) {\n            this.onSizeChange(entry.contentRect);\n            /*\n            const {left, top, width, height} = entry.contentRect;\n\n            console.log('Element:', entry.target);\n            console.log(`Element's size: ${ width }px x ${ height }px`);\n            console.log(`Element's paddings: ${ top }px ; ${ left }px`);\n            */\n          }\n        });\n        // console.log('ResizeObserver instantiated.', this.resizeObserver);\n      }\n      this.resizeObserver.observe(element);\n    }\n    if (this.props.onRef) {\n      this.props.onRef(element);\n    }\n  };\n\n  onSizeChange = (contentRect: { +width: number, +height: number }) => {\n    const elementWidth = contentRect.width;\n    const elementHeight = contentRect.height;\n    if (\n      elementWidth > 0 &&\n      elementHeight > 0 &&\n      this.props.configuration &&\n      Array.isArray(this.props.configuration.responsivenessRules)\n    ) {\n      const responsiveClassNames = this.props.configuration.responsivenessRules\n        .filter(({ width, height }) => {\n          if (width && ((width.min && elementWidth <= width.min) || (width.max && elementWidth > width.max))) {\n            return false;\n          }\n          if (height && ((height.min && elementHeight <= height.min) || (height.max && elementHeight > height.max))) {\n            return false;\n          }\n          return true;\n        })\n        .map(range => range.className);\n      this.setState({ responsiveClassNames });\n    }\n  };\n\n  render() {\n    return this.props.render({ onRef: this.onRef, responsiveClassNames: this.state.responsiveClassNames });\n  }\n}\n\nexport default ResponsiveClassNames;\n"]},"metadata":{},"sourceType":"script"}