{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _common = require(\"../../common\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst className = 'timeline-information';\nconst tooltipClassName = 'timeline-tooltip';\nconst tooltipVisibleClassName = 'timeline-tooltip-visible';\n\nconst getTimeDisplay = (playMode, absoluteStartPosition, previewValue) => {\n  if (previewValue != null) {\n    if (playMode === 'livedvr' && absoluteStartPosition instanceof Date && absoluteStartPosition.getTime() > 0) {\n      return (0, _common.formatClockTime)(new Date(absoluteStartPosition.getTime() + previewValue * 1000));\n    } else {\n      return (0, _common.formatTime)(previewValue);\n    }\n  } else {\n    return '';\n  }\n};\n\nclass TimelineInformation extends React.Component {\n  render() {\n    const _this$props = this.props,\n          absoluteStartPosition = _this$props.absoluteStartPosition,\n          duration = _this$props.duration,\n          playMode = _this$props.playMode,\n          previewValue = _this$props.previewValue,\n          isDragging = _this$props.isDragging,\n          isPointerInside = _this$props.isPointerInside,\n          classNamePrefix = _this$props.classNamePrefix;\n    const timeDisplay = getTimeDisplay(playMode, absoluteStartPosition, previewValue);\n    const left = ((previewValue || 0) / (duration || 1) * 100).toFixed(2);\n    const prefixedClassName = (0, _common.prefixClassNames)(classNamePrefix, className);\n    const prefixedTooltipClassNames = (0, _common.prefixClassNames)(classNamePrefix, tooltipClassName, isDragging || isPointerInside ? tooltipVisibleClassName : null);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: prefixedClassName\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: prefixedTooltipClassNames,\n      style: {\n        left: \"\".concat(left, \"%\")\n      }\n    }, timeDisplay));\n  }\n\n}\n\n_defineProperty(TimelineInformation, \"streamStateKeysForObservation\", ['absoluteStartPosition', 'duration', 'playMode']);\n\n_defineProperty(TimelineInformation, \"defaultProps\", {\n  classNamePrefix: _common.defaultClassNamePrefix\n});\n\nTimelineInformation.displayName = 'TimelineInformation';\nvar _default = TimelineInformation;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/replay/components/controls/TimelineInformation/TimelineInformation.js"],"names":["className","tooltipClassName","tooltipVisibleClassName","getTimeDisplay","previewValue","playMode","absoluteStartPosition","TimelineInformation","React","classNamePrefix","defaultClassNamePrefix","render","duration","isDragging","isPointerInside","timeDisplay","left","prefixedClassName","prefixedTooltipClassNames"],"mappings":";;;;;;;AACA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,MAAMA,SAAS,GAAf,sBAAA;AACA,MAAMC,gBAAgB,GAAtB,kBAAA;AACA,MAAMC,uBAAuB,GAA7B,0BAAA;;AAEA,MAAMC,cAAc,GAAG,CAAA,QAAA,EAAA,qBAAA,EAAA,YAAA,KAAsF;AAC3G,MAAIC,YAAY,IAAhB,IAAA,EAA0B;AACxB,QAAIC,QAAQ,KAARA,SAAAA,IAA0BC,qBAAqB,YAA/CD,IAAAA,IAAmEC,qBAAqB,CAArBA,OAAAA,KAAvE,CAAA,EAA4G;AAC1G,aAAO,CAAA,GAAA,OAAA,CAAA,eAAA,EAAgB,IAAA,IAAA,CAASA,qBAAqB,CAArBA,OAAAA,KAAkCF,YAAY,GAA9E,IAAuB,CAAhB,CAAP;AADF,KAAA,MAEO;AACL,aAAO,CAAA,GAAA,OAAA,CAAA,UAAA,EAAP,YAAO,CAAP;AACD;AALH,GAAA,MAMO;AACL,WAAA,EAAA;AACD;AATH,CAAA;;AAYA,MAAA,mBAAA,SAAkCI,KAAK,CAAvC,SAAA,CAAyD;AAUvDG,EAAAA,MAAM,GAAG;AAAA,UAAA,WAAA,GASH,KATG,KAAA;AAAA,UAELL,qBAFK,GAAA,WAAA,CAAA,qBAAA;AAAA,UAGLM,QAHK,GAAA,WAAA,CAAA,QAAA;AAAA,UAILP,QAJK,GAAA,WAAA,CAAA,QAAA;AAAA,UAKLD,YALK,GAAA,WAAA,CAAA,YAAA;AAAA,UAMLS,UANK,GAAA,WAAA,CAAA,UAAA;AAAA,UAOLC,eAPK,GAAA,WAAA,CAAA,eAAA;AAAA,UAQLL,eARK,GAAA,WAAA,CAAA,eAAA;AAUP,UAAMM,WAAW,GAAGZ,cAAc,CAAA,QAAA,EAAA,qBAAA,EAAlC,YAAkC,CAAlC;AACA,UAAMa,IAAI,GAAG,CAAE,CAACZ,YAAY,IAAb,CAAA,KAAuBQ,QAAQ,IAAhC,CAAC,IAAF,GAAA,EAAA,OAAA,CAAb,CAAa,CAAb;AACA,UAAMK,iBAAiB,GAAG,CAAA,GAAA,OAAA,CAAA,gBAAA,EAAA,eAAA,EAA1B,SAA0B,CAA1B;AACA,UAAMC,yBAAyB,GAAG,CAAA,GAAA,OAAA,CAAA,gBAAA,EAAA,eAAA,EAAA,gBAAA,EAGhCL,UAAU,IAAVA,eAAAA,GAAAA,uBAAAA,GAHF,IAAkC,CAAlC;AAKA,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAEI;AAAhB,KAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAd,yBAAA;AAA2C,MAAA,KAAK,EAAE;AAAED,QAAAA,IAAI,EAAA,GAAA,MAAA,CAAA,IAAA,EAAA,GAAA;AAAN;AAAlD,KAAA,EAFJ,WAEI,CADF,CADF;AAOD;;AAnCsD;;gBAAnDT,mB,mCACkE,CAAA,uBAAA,EAAA,UAAA,EAAA,UAAA,C;;gBADlEA,mB,kBAMkB;AACpBE,EAAAA,eAAe,EAAEC,OAAAA,CAAAA;AADG,C;;AAgCxBH,mBAAmB,CAAnBA,WAAAA,GAAAA,qBAAAA;eACeA,mB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { formatTime, formatClockTime, prefixClassNames, defaultClassNamePrefix } from '../../common';\nimport type { StreamStateKeysForObservation } from '../../player/PlayerController/ControllerContext';\nimport type { PlayMode } from '../../player/VideoStreamer/types';\nimport type { CommonProps } from '../../common';\n\ntype Props = CommonProps & {\n  /** ⇘︎ For previewing live clock time positions, this should contain the date/time corresponding to the start of the timeline.. */\n  absoluteStartPosition?: Date,\n  /** ⇘︎ Used for selecting relative position or clock time display. */\n  playMode?: PlayMode,\n  /** ⇘︎ Used for computing the tooltip position. */\n  duration?: number,\n  /** The relative preview position, passed automatically from a Timeline parent. */\n  previewValue?: ?number,\n  /** The Timeline parent manages mouse pointer state, and passes to this component. If true, the tooltip is displayed. */\n  isPointerInside?: boolean,\n  /** Passed from the Timeline parent. When dragging, it is set to true, and the tooltip displays. */\n  isDragging?: ?boolean\n};\n\nconst className = 'timeline-information';\nconst tooltipClassName = 'timeline-tooltip';\nconst tooltipVisibleClassName = 'timeline-tooltip-visible';\n\nconst getTimeDisplay = (playMode: ?PlayMode, absoluteStartPosition: ?Date, previewValue: ?number): string => {\n  if (previewValue != null) {\n    if (playMode === 'livedvr' && absoluteStartPosition instanceof Date && absoluteStartPosition.getTime() > 0) {\n      return formatClockTime(new Date(absoluteStartPosition.getTime() + previewValue * 1000));\n    } else {\n      return formatTime(previewValue);\n    }\n  } else {\n    return '';\n  }\n};\n\nclass TimelineInformation extends React.Component<Props> {\n  static streamStateKeysForObservation: StreamStateKeysForObservation = [\n    'absoluteStartPosition',\n    'duration',\n    'playMode'\n  ];\n  static defaultProps = {\n    classNamePrefix: defaultClassNamePrefix\n  };\n\n  render() {\n    const {\n      absoluteStartPosition,\n      duration,\n      playMode,\n      previewValue,\n      isDragging,\n      isPointerInside,\n      classNamePrefix\n    } = this.props;\n    const timeDisplay = getTimeDisplay(playMode, absoluteStartPosition, previewValue);\n    const left = (((previewValue || 0) / (duration || 1)) * 100).toFixed(2);\n    const prefixedClassName = prefixClassNames(classNamePrefix, className);\n    const prefixedTooltipClassNames = prefixClassNames(\n      classNamePrefix,\n      tooltipClassName,\n      isDragging || isPointerInside ? tooltipVisibleClassName : null\n    );\n    return (\n      <div className={prefixedClassName}>\n        <div className={prefixedTooltipClassNames} style={{ left: `${left}%` }}>\n          {timeDisplay}\n        </div>\n      </div>\n    );\n  }\n}\n\nTimelineInformation.displayName = 'TimelineInformation';\nexport default TimelineInformation;\n"]},"metadata":{},"sourceType":"script"}