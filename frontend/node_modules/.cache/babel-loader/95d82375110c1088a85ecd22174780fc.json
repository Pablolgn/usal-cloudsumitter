{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.PropTableRow = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _common = require(\"../../common\");\n\nvar _Button = _interopRequireDefault(require(\"../../generic/Button/Button\"));\n\nvar _connectControl = _interopRequireDefault(require(\"../../player/PlayerController/connectControl\"));\n\nvar _version = _interopRequireDefault(require(\"../../../version\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst orderedPropertyNames = ['playMode', 'playState', 'isPaused', 'isBuffering', 'isSeeking', 'position', 'duration', 'absolutePosition', 'absoluteStartPosition', 'isAtLiveEdge', 'isPipAvailable', 'isPipActive', 'isAirPlayAvailable', 'isAirPlayActive', 'bufferedAhead', 'bitrateFix', 'bitrateCap', 'currentBitrate', 'bitrates', 'currentTextTrack', 'textTracks', 'currentAudioTrack', 'audioTracks', 'volume', 'isMuted', 'error'];\nconst className = 'playback-monitor';\nconst tableClassName = 'playback-monitor-stream-state';\nconst headerRowClassName = 'playback-monitor-table-header';\nconst propNameClassName = 'playback-monitor-property-name';\nconst currentValueClassName = 'playback-monitor-current-value';\nconst previousValueClassName = 'playback-monitor-previous-value';\nconst closeButtonClassName = 'playback-monitor-close-button';\nconst headerClassName = 'playback-monitor-header';\nconst versionClassName = 'playback-monitor-version';\nconst closeButtonLabel = 'Close';\n\nconst formatValue = val => {\n  if (val instanceof Date) {\n    if (isNaN(val.getTime())) {\n      return val.toString();\n    } else {\n      return val.toISOString();\n    }\n  } else if (typeof val === 'number') {\n    if (val % 1 !== 0) {\n      return val.toFixed(2);\n    } else {\n      return val;\n    }\n  } else if (typeof val === 'function') {\n    return 'function :-o';\n  } else if (val instanceof Error) {\n    const parts = [];\n\n    if (val.message) {\n      parts.push(\"message: '\".concat(val.message, \"'\"));\n    }\n\n    if (val.code) {\n      parts.push(\"code: '\".concat(val.code, \"'\"));\n    }\n\n    if (val.severity) {\n      parts.push(\"severity: '\".concat(val.severity, \"'\"));\n    }\n\n    return \"{\".concat(parts.join(','), \"}\");\n  } else if (Array.isArray(val)) {\n    return '[' + val.map(formatValue).join(',') + ']';\n  } else if (typeof val === 'boolean') {\n    return val.toString();\n  } else if (typeof val === 'string') {\n    return val;\n  } else if (val) {\n    return JSON.stringify(val).replace(/(\")(([A-Z]|[a-z]|[0-9])+)(\")(:)/g, '$2$5').replace(/(handlers|props|methods|constants):\\{(.*?)},/g, '');\n  } else {\n    return val;\n  }\n};\n\nclass PropTableRow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentValue: props.inspect()[props.propertyName]\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.propertyName in nextProps && (0, _common.isDifferent)(nextProps[nextProps.propertyName], prevState.currentValue)) {\n      return {\n        currentValue: nextProps[nextProps.propertyName],\n        previousValue: prevState.currentValue\n      };\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          prefixedClassNames = _this$props.prefixedClassNames,\n          propertyName = _this$props.propertyName;\n    const _this$state = this.state,\n          currentValue = _this$state.currentValue,\n          previousValue = _this$state.previousValue;\n    const formattedCurrentValue = formatValue(currentValue);\n    const formattedPreviousValue = formatValue(previousValue);\n    return /*#__PURE__*/React.createElement(\"tr\", null, /*#__PURE__*/React.createElement(\"th\", {\n      title: propertyName,\n      className: prefixedClassNames.propName\n    }, propertyName), /*#__PURE__*/React.createElement(\"td\", {\n      title: formattedCurrentValue,\n      className: prefixedClassNames.currentValue\n    }, formattedCurrentValue), /*#__PURE__*/React.createElement(\"td\", {\n      title: formattedPreviousValue,\n      className: prefixedClassNames.previousValue\n    }, formattedPreviousValue));\n  }\n\n}\n\nexports.PropTableRow = PropTableRow;\nconst connectedComponents = {};\norderedPropertyNames.forEach(propertyName => {\n  connectedComponents[propertyName] = (0, _connectControl.default)(PropTableRow, [propertyName]);\n});\n\nconst getVisibleFromConfig = props => {\n  return !!(props.configuration && props.configuration.playbackMonitor && props.configuration.playbackMonitor.visibleAtStart);\n};\n\nconst renderTableRows = classNamePrefix => {\n  const prefixedClassNames = {\n    headerRow: (0, _common.prefixClassNames)(classNamePrefix, headerRowClassName),\n    propName: (0, _common.prefixClassNames)(classNamePrefix, propNameClassName),\n    currentValue: (0, _common.prefixClassNames)(classNamePrefix, currentValueClassName),\n    previousValue: (0, _common.prefixClassNames)(classNamePrefix, previousValueClassName)\n  };\n  return [/*#__PURE__*/React.createElement(TableHeaderRow, {\n    key: \"header-row\",\n    prefixedClassNames: prefixedClassNames\n  })].concat(orderedPropertyNames.map(propertyName => {\n    const ConnectedPropRow = connectedComponents[propertyName];\n    return /*#__PURE__*/React.createElement(ConnectedPropRow, {\n      key: \"prop-row-\".concat(propertyName),\n      prefixedClassNames: prefixedClassNames,\n      propertyName: propertyName\n    });\n  }));\n};\n\nconst TableHeaderRow = ({\n  prefixedClassNames\n}) => /*#__PURE__*/React.createElement(\"tr\", {\n  className: prefixedClassNames.headerRow\n}, /*#__PURE__*/React.createElement(\"th\", {\n  className: prefixedClassNames.propName\n}, \"Property name\"), /*#__PURE__*/React.createElement(\"th\", {\n  className: prefixedClassNames.currentValue\n}, \"Current value\"), /*#__PURE__*/React.createElement(\"th\", {\n  className: prefixedClassNames.previousValue\n}, \"Previous value\"));\n\nclass PlaybackMonitor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleCloseClick\", () => this.setState({\n      isMonitorVisible: false\n    }));\n\n    _defineProperty(this, \"handleKeyDown\", keyboardEvent => {\n      if (keyboardEvent.ctrlKey && keyboardEvent.altKey && keyboardEvent.code === 'KeyM') {\n        this.setState({\n          isMonitorVisible: !this.state.isMonitorVisible\n        });\n      }\n    });\n\n    this.state = {\n      isMonitorVisible: getVisibleFromConfig(props)\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentDidUpdate(prevProps, prevState, prevContext) {\n    const prevVisible = getVisibleFromConfig(prevProps);\n\n    if (!prevVisible && getVisibleFromConfig(this.props)) {\n      this.setState({\n        isMonitorVisible: true\n      });\n    }\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          label = _this$props2.label,\n          classNamePrefix = _this$props2.classNamePrefix,\n          closeButtonContent = _this$props2.closeButtonContent;\n\n    if (this.state.isMonitorVisible) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        title: label,\n        className: (0, _common.prefixClassNames)(classNamePrefix, className)\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: (0, _common.prefixClassNames)(classNamePrefix, headerClassName)\n      }, /*#__PURE__*/React.createElement(_Button.default, {\n        className: closeButtonClassName,\n        classNamePrefix: classNamePrefix,\n        content: closeButtonContent,\n        label: closeButtonLabel,\n        onClick: this.handleCloseClick\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        className: (0, _common.prefixClassNames)(classNamePrefix, versionClassName)\n      }, \"Replay v\", _version.default)), /*#__PURE__*/React.createElement(\"table\", {\n        className: (0, _common.prefixClassNames)(classNamePrefix, tableClassName)\n      }, /*#__PURE__*/React.createElement(\"tbody\", null, renderTableRows(classNamePrefix))));\n    } else {\n      return null;\n    }\n  }\n\n}\n\n_defineProperty(PlaybackMonitor, \"defaultProps\", {\n  classNamePrefix: _common.defaultClassNamePrefix\n});\n\nPlaybackMonitor.displayName = 'PlaybackMonitor';\nvar _default = PlaybackMonitor;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/replay/components/controls/PlaybackMonitor/PlaybackMonitor.js"],"names":["orderedPropertyNames","className","tableClassName","headerRowClassName","propNameClassName","currentValueClassName","previousValueClassName","closeButtonClassName","headerClassName","versionClassName","closeButtonLabel","formatValue","val","isNaN","parts","Array","JSON","React","constructor","currentValue","props","nextProps","prevState","previousValue","render","prefixedClassNames","propertyName","formattedCurrentValue","formattedPreviousValue","propName","connectedComponents","getVisibleFromConfig","renderTableRows","classNamePrefix","headerRow","ConnectedPropRow","TableHeaderRow","PlaybackMonitor","defaultClassNamePrefix","isMonitorVisible","keyboardEvent","componentDidMount","document","componentWillUnmount","componentDidUpdate","prevVisible","label","closeButtonContent","handleCloseClick","replayVersion"],"mappings":"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","sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport type { CommonProps } from '../../common';\nimport type { VideoStreamState } from '../../player/VideoStreamer/types';\nimport { defaultClassNamePrefix, isDifferent, prefixClassNames } from '../../common';\nimport Button from '../../generic/Button/Button';\nimport connectControl from '../../player/PlayerController/connectControl';\nimport type { InspectMethod } from '../../player/PlayerController/ControllerContext';\nimport replayVersion from '../../../version';\n\nexport type PlaybackMonitorConfiguration = {\n  visibleAtStart?: boolean\n};\n\ntype Props = CommonProps & {\n  /** Optional object containing the property playbackMonitor: { visibleAtStart: true } in order to display it immediately. */\n  configuration?: {\n    playbackMonitor?: PlaybackMonitorConfiguration\n  },\n  /** The content of the overlay's close button. */\n  closeButtonContent: ?React.Node\n};\n\ntype State = {\n  isMonitorVisible: boolean\n};\n\ntype PrefixedClassNames = {\n  propName: string,\n  currentValue: string,\n  previousValue: string,\n  headerRow: string\n};\n\ntype TableRowProps = VideoStreamState & {\n  propertyName: string,\n  inspect: InspectMethod,\n  prefixedClassNames: PrefixedClassNames\n};\n\ntype TableRowState = {\n  currentValue: any,\n  previousValue?: any\n};\n\nconst orderedPropertyNames = [\n  'playMode',\n  'playState',\n  'isPaused',\n  'isBuffering',\n  'isSeeking',\n  'position',\n  'duration',\n  'absolutePosition',\n  'absoluteStartPosition',\n  'isAtLiveEdge',\n  'isPipAvailable',\n  'isPipActive',\n  'isAirPlayAvailable',\n  'isAirPlayActive',\n  'bufferedAhead',\n  'bitrateFix',\n  'bitrateCap',\n  'currentBitrate',\n  'bitrates',\n  'currentTextTrack',\n  'textTracks',\n  'currentAudioTrack',\n  'audioTracks',\n  'volume',\n  'isMuted',\n  'error'\n];\n\nconst className = 'playback-monitor';\nconst tableClassName = 'playback-monitor-stream-state';\nconst headerRowClassName = 'playback-monitor-table-header';\nconst propNameClassName = 'playback-monitor-property-name';\nconst currentValueClassName = 'playback-monitor-current-value';\nconst previousValueClassName = 'playback-monitor-previous-value';\nconst closeButtonClassName = 'playback-monitor-close-button';\nconst headerClassName = 'playback-monitor-header';\nconst versionClassName = 'playback-monitor-version';\n\nconst closeButtonLabel = 'Close';\n\nconst formatValue = (val: any): string => {\n  if (val instanceof Date) {\n    if (isNaN(val.getTime())) {\n      return val.toString();\n    } else {\n      return val.toISOString();\n    }\n  } else if (typeof val === 'number') {\n    if (val % 1 !== 0) {\n      return val.toFixed(2);\n    } else {\n      return val;\n    }\n  } else if (typeof val === 'function') {\n    return 'function :-o';\n  } else if (val instanceof Error) {\n    const parts = [];\n    if (val.message) {\n      parts.push(`message: '${val.message}'`);\n    }\n    if (val.code) {\n      parts.push(`code: '${val.code}'`);\n    }\n    if (val.severity) {\n      parts.push(`severity: '${val.severity}'`);\n    }\n    return `{${parts.join(',')}}`;\n  } else if (Array.isArray(val)) {\n    return '[' + val.map(formatValue).join(',') + ']';\n  } else if (typeof val === 'boolean') {\n    return val.toString();\n  } else if (typeof val === 'string') {\n    return val;\n  } else if (val) {\n    return JSON.stringify(val)\n      .replace(/(\")(([A-Z]|[a-z]|[0-9])+)(\")(:)/g, '$2$5')\n      .replace(/(handlers|props|methods|constants):\\{(.*?)},/g, '');\n  } else {\n    return val;\n  }\n};\n\nexport class PropTableRow extends React.Component<TableRowProps, TableRowState> {\n  constructor(props: TableRowProps) {\n    super(props);\n    this.state = {\n      currentValue: props.inspect()[props.propertyName]\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps: TableRowProps, prevState: TableRowState) {\n    if (nextProps.propertyName in nextProps && isDifferent(nextProps[nextProps.propertyName], prevState.currentValue)) {\n      return {\n        currentValue: nextProps[nextProps.propertyName],\n        previousValue: prevState.currentValue\n      };\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    const { prefixedClassNames, propertyName } = this.props;\n    const { currentValue, previousValue } = this.state;\n    const formattedCurrentValue = formatValue(currentValue);\n    const formattedPreviousValue = formatValue(previousValue);\n    return (\n      <tr>\n        <th title={propertyName} className={prefixedClassNames.propName}>\n          {propertyName}\n        </th>\n        <td title={formattedCurrentValue} className={prefixedClassNames.currentValue}>\n          {formattedCurrentValue}\n        </td>\n        <td title={formattedPreviousValue} className={prefixedClassNames.previousValue}>\n          {formattedPreviousValue}\n        </td>\n      </tr>\n    );\n  }\n}\n\nconst connectedComponents = {};\n\norderedPropertyNames.forEach(propertyName => {\n  connectedComponents[propertyName] = connectControl(PropTableRow, [propertyName]);\n});\n\nconst getVisibleFromConfig = (props: Props) => {\n  return !!(\n    props.configuration &&\n    props.configuration.playbackMonitor &&\n    props.configuration.playbackMonitor.visibleAtStart\n  );\n};\n\nconst renderTableRows = classNamePrefix => {\n  const prefixedClassNames = {\n    headerRow: prefixClassNames(classNamePrefix, headerRowClassName),\n    propName: prefixClassNames(classNamePrefix, propNameClassName),\n    currentValue: prefixClassNames(classNamePrefix, currentValueClassName),\n    previousValue: prefixClassNames(classNamePrefix, previousValueClassName)\n  };\n  return [<TableHeaderRow key=\"header-row\" prefixedClassNames={prefixedClassNames} />].concat(\n    orderedPropertyNames.map(propertyName => {\n      const ConnectedPropRow = connectedComponents[propertyName];\n      return (\n        <ConnectedPropRow\n          key={`prop-row-${propertyName}`}\n          prefixedClassNames={prefixedClassNames}\n          propertyName={propertyName}\n        />\n      );\n    })\n  );\n};\n\nconst TableHeaderRow = ({ prefixedClassNames }: { prefixedClassNames: PrefixedClassNames }) => (\n  <tr className={prefixedClassNames.headerRow}>\n    <th className={prefixedClassNames.propName}>Property name</th>\n    <th className={prefixedClassNames.currentValue}>Current value</th>\n    <th className={prefixedClassNames.previousValue}>Previous value</th>\n  </tr>\n);\n\nclass PlaybackMonitor extends React.Component<Props, State> {\n  static defaultProps = {\n    classNamePrefix: defaultClassNamePrefix\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isMonitorVisible: getVisibleFromConfig(props)\n    };\n  }\n\n  handleCloseClick = () => this.setState({ isMonitorVisible: false });\n\n  handleKeyDown = (keyboardEvent: KeyboardEvent) => {\n    if (keyboardEvent.ctrlKey && keyboardEvent.altKey && keyboardEvent.code === 'KeyM') {\n      this.setState({ isMonitorVisible: !this.state.isMonitorVisible });\n    }\n  };\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State, prevContext: *): * {\n    const prevVisible = getVisibleFromConfig(prevProps);\n    if (!prevVisible && getVisibleFromConfig(this.props)) {\n      this.setState({ isMonitorVisible: true });\n    }\n  }\n\n  render() {\n    const { label, classNamePrefix, closeButtonContent } = this.props;\n    if (this.state.isMonitorVisible) {\n      return (\n        <div title={label} className={prefixClassNames(classNamePrefix, className)}>\n          <div className={prefixClassNames(classNamePrefix, headerClassName)}>\n            <Button\n              className={closeButtonClassName}\n              classNamePrefix={classNamePrefix}\n              content={closeButtonContent}\n              label={closeButtonLabel}\n              onClick={this.handleCloseClick}\n            />\n            <p className={prefixClassNames(classNamePrefix, versionClassName)}>Replay v{replayVersion}</p>\n          </div>\n          <table className={prefixClassNames(classNamePrefix, tableClassName)}>\n            <tbody>{renderTableRows(classNamePrefix)}</tbody>\n          </table>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nPlaybackMonitor.displayName = 'PlaybackMonitor';\nexport default PlaybackMonitor;\n"]},"metadata":{},"sourceType":"script"}