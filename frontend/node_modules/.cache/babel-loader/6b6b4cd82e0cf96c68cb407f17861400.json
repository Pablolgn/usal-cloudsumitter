{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst isEnabled = configuration => {\n  return configuration && configuration.userSettings && configuration.userSettings.storageKey && configuration.userSettings.settingsStoragePolicy;\n};\n\nconst getStoredSettings = (storage, key) => {\n  try {\n    const storedStr = storage.getItem(key);\n\n    if (storedStr) {\n      return JSON.parse(storedStr);\n    } else {\n      return {};\n    }\n  } catch (e) {\n    return {};\n  }\n};\n\nconst withStorage = (storagePolicy, key, sessionSettings, localSettings, callback) => {\n  switch (storagePolicy[key]) {\n    case 'local':\n      callback(localSettings);\n      return;\n\n    case 'session':\n      callback(sessionSettings);\n      return;\n\n    default:\n      return;\n  }\n};\n\nconst withSettingsStorage = (Component, localStorage = window.localStorage, sessionStorage = window.sessionStorage) => {\n  class SettingsStorage extends React.Component {\n    constructor(...args) {\n      super(...args);\n\n      _defineProperty(this, \"setProperties\", userSetProps => {\n        if (this.props.setProperties) {\n          this.props.setProperties(userSetProps);\n        }\n\n        const userSettingsConfig = this.props.configuration && this.props.configuration.userSettings;\n\n        if (userSettingsConfig) {\n          const storageKey = userSettingsConfig.storageKey;\n          const storagePolicy = userSettingsConfig.settingsStoragePolicy;\n\n          if (storageKey && storagePolicy) {\n            const localSettings = getStoredSettings(localStorage, storageKey);\n            const sessionSettings = getStoredSettings(sessionStorage, storageKey);\n\n            if ('isMuted' in userSetProps) {\n              withStorage(storagePolicy, 'isMuted', sessionSettings, localSettings, settings => settings.isMuted = !!userSetProps.isMuted);\n            }\n\n            if (typeof userSetProps.volume === 'number') {\n              withStorage(storagePolicy, 'volume', sessionSettings, localSettings, settings => settings.volume = userSetProps.volume);\n            }\n\n            if ('selectedTextTrack' in userSetProps) {\n              withStorage(storagePolicy, 'textTrackLanguage', sessionSettings, localSettings, settings => {\n                if (userSetProps.selectedTextTrack) {\n                  if (userSetProps.selectedTextTrack.language) {\n                    settings.textTrackLanguage = userSetProps.selectedTextTrack.language;\n                  }\n                } else {\n                  // Subtitles were turned off.\n                  delete settings.textTrackLanguage;\n                }\n              });\n              withStorage(storagePolicy, 'textTrackKind', sessionSettings, localSettings, settings => {\n                if (userSetProps.selectedTextTrack) {\n                  if (userSetProps.selectedTextTrack.kind) {\n                    settings.textTrackKind = userSetProps.selectedTextTrack.kind;\n                  }\n                } else {\n                  // Subtitles were turned off.\n                  delete settings.textTrackKind;\n                }\n              });\n            }\n\n            if ('selectedAudioTrack' in userSetProps) {\n              withStorage(storagePolicy, 'audioTrackLanguage', sessionSettings, localSettings, settings => {\n                if (userSetProps.selectedAudioTrack && userSetProps.selectedAudioTrack.language) {\n                  settings.audioTrackLanguage = userSetProps.selectedAudioTrack.language;\n                }\n              });\n              withStorage(storagePolicy, 'audioTrackKind', sessionSettings, localSettings, settings => {\n                if (userSetProps.selectedAudioTrack && userSetProps.selectedAudioTrack.kind) {\n                  settings.audioTrackKind = userSetProps.selectedAudioTrack.kind;\n                }\n              });\n            }\n\n            if (Object.keys(localSettings).length > 0) {\n              try {\n                localStorage.setItem(storageKey, JSON.stringify(localSettings));\n              } catch (e) {}\n            }\n\n            if (Object.keys(sessionSettings).length > 0) {\n              try {\n                sessionStorage.setItem(storageKey, JSON.stringify(sessionSettings));\n              } catch (e) {}\n            }\n          }\n        }\n      });\n    }\n\n    render() {\n      const _this$props = this.props,\n            configuration = _this$props.configuration,\n            remainder = _objectWithoutProperties(_this$props, [\"configuration\"]);\n\n      if (isEnabled(this.props.configuration)) {\n        return /*#__PURE__*/React.createElement(Component, _extends({}, remainder, {\n          setProperties: this.setProperties\n        }));\n      } else {\n        return /*#__PURE__*/React.createElement(Component, remainder);\n      }\n    }\n\n  }\n\n  _defineProperty(SettingsStorage, \"streamStateKeysForObservation\", Component.streamStateKeysForObservation);\n\n  SettingsStorage.displayName = 'SettingsStorage' + (Component.displayName || Component.name);\n  return SettingsStorage;\n};\n\nvar _default = withSettingsStorage;\nexports.default = _default;","map":{"version":3,"sources":["../../../src/replay/components/player/settings-helpers/settingsStorage.js"],"names":["isEnabled","configuration","getStoredSettings","storedStr","storage","JSON","withStorage","storagePolicy","callback","withSettingsStorage","localStorage","window","sessionStorage","React","Component","userSetProps","userSettingsConfig","storageKey","localSettings","sessionSettings","settings","Object","render","remainder","setProperties","SettingsStorage"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport type { PlaybackProps } from '../VideoStreamer/types';\nimport type { StreamStateKeysForObservation } from '../PlayerController/ControllerContext';\nimport type { UserSettingsConfiguration } from './PreferredSettingsApplicator';\nimport type { PreferredSettings } from '../../../default-player/types';\n\ntype SettingsStorageProps<T: { setProperties?: any => void }> = T & {\n  configuration?: ?UserSettingsConfiguration\n};\n\nconst isEnabled = (configuration: ?UserSettingsConfiguration) => {\n  return (\n    configuration &&\n    configuration.userSettings &&\n    configuration.userSettings.storageKey &&\n    configuration.userSettings.settingsStoragePolicy\n  );\n};\n\nconst getStoredSettings = (storage: Storage, key: string): PreferredSettings => {\n  try {\n    const storedStr = storage.getItem(key);\n    if (storedStr) {\n      return JSON.parse(storedStr);\n    } else {\n      return {};\n    }\n  } catch (e) {\n    return {};\n  }\n};\n\nconst withStorage = (\n  storagePolicy,\n  key: string,\n  sessionSettings: PreferredSettings,\n  localSettings: PreferredSettings,\n  callback: PreferredSettings => any\n) => {\n  switch (storagePolicy[key]) {\n    case 'local':\n      callback(localSettings);\n      return;\n    case 'session':\n      callback(sessionSettings);\n      return;\n    default:\n      return;\n  }\n};\n\nconst withSettingsStorage = <P: { setProperties?: any => void }>(\n  Component: React.ComponentType<P>,\n  localStorage: Storage = window.localStorage,\n  sessionStorage: Storage = window.sessionStorage\n) => {\n  class SettingsStorage extends React.Component<SettingsStorageProps<P>> {\n    // $FlowFixMe What's the best practices for extending component types with static properties?\n    static streamStateKeysForObservation: StreamStateKeysForObservation = Component.streamStateKeysForObservation;\n\n    setProperties = (userSetProps: PlaybackProps) => {\n      if (this.props.setProperties) {\n        this.props.setProperties(userSetProps);\n      }\n      const userSettingsConfig = this.props.configuration && this.props.configuration.userSettings;\n      if (userSettingsConfig) {\n        const storageKey = userSettingsConfig.storageKey;\n        const storagePolicy = userSettingsConfig.settingsStoragePolicy;\n        if (storageKey && storagePolicy) {\n          const localSettings = getStoredSettings(localStorage, storageKey);\n          const sessionSettings = getStoredSettings(sessionStorage, storageKey);\n          if ('isMuted' in userSetProps) {\n            withStorage(\n              storagePolicy,\n              'isMuted',\n              sessionSettings,\n              localSettings,\n              settings => (settings.isMuted = !!userSetProps.isMuted)\n            );\n          }\n          if (typeof userSetProps.volume === 'number') {\n            withStorage(\n              storagePolicy,\n              'volume',\n              sessionSettings,\n              localSettings,\n              settings => (settings.volume = userSetProps.volume)\n            );\n          }\n          if ('selectedTextTrack' in userSetProps) {\n            withStorage(storagePolicy, 'textTrackLanguage', sessionSettings, localSettings, settings => {\n              if (userSetProps.selectedTextTrack) {\n                if (userSetProps.selectedTextTrack.language) {\n                  settings.textTrackLanguage = userSetProps.selectedTextTrack.language;\n                }\n              } else {\n                // Subtitles were turned off.\n                delete settings.textTrackLanguage;\n              }\n            });\n            withStorage(storagePolicy, 'textTrackKind', sessionSettings, localSettings, settings => {\n              if (userSetProps.selectedTextTrack) {\n                if (userSetProps.selectedTextTrack.kind) {\n                  settings.textTrackKind = userSetProps.selectedTextTrack.kind;\n                }\n              } else {\n                // Subtitles were turned off.\n                delete settings.textTrackKind;\n              }\n            });\n          }\n          if ('selectedAudioTrack' in userSetProps) {\n            withStorage(storagePolicy, 'audioTrackLanguage', sessionSettings, localSettings, settings => {\n              if (userSetProps.selectedAudioTrack && userSetProps.selectedAudioTrack.language) {\n                settings.audioTrackLanguage = userSetProps.selectedAudioTrack.language;\n              }\n            });\n            withStorage(storagePolicy, 'audioTrackKind', sessionSettings, localSettings, settings => {\n              if (userSetProps.selectedAudioTrack && userSetProps.selectedAudioTrack.kind) {\n                settings.audioTrackKind = userSetProps.selectedAudioTrack.kind;\n              }\n            });\n          }\n          if (Object.keys(localSettings).length > 0) {\n            try {\n              localStorage.setItem(storageKey, JSON.stringify(localSettings));\n            } catch (e) {}\n          }\n          if (Object.keys(sessionSettings).length > 0) {\n            try {\n              sessionStorage.setItem(storageKey, JSON.stringify(sessionSettings));\n            } catch (e) {}\n          }\n        }\n      }\n    };\n\n    render() {\n      const { configuration, ...remainder } = this.props;\n      if (isEnabled(this.props.configuration)) {\n        return <Component {...remainder} setProperties={this.setProperties} />;\n      } else {\n        return <Component {...remainder} />;\n      }\n    }\n  }\n  SettingsStorage.displayName = 'SettingsStorage' + (Component.displayName || Component.name);\n  return SettingsStorage;\n};\n\nexport default withSettingsStorage;\n"]},"metadata":{},"sourceType":"script"}