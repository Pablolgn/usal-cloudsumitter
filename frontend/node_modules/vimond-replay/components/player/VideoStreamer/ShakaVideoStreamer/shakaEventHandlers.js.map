{"version":3,"sources":["../../../../src/replay/components/player/VideoStreamer/ShakaVideoStreamer/shakaEventHandlers.js"],"names":["getShakaEventHandlers","streamer","videoElement","shakaPlayer","shakaLib","streamRangeHelper","configuration","applyProperties","updateStreamState","log","htmlVideoHandlers","thirdPartyPlayer","videoElementEventHandlers","pauseStreamRangeUpdater","lifeCycleManager","setStage","_","getStage","shakaEventHandlers","error","detail","playbackError","navigator","userAgent","document","location","props","onPlaybackError","severity","playState","isBuffering","isSeeking","stop","loading","initialPlaybackProps","isMuted","volume","muted","isPipAvailable","streaming","isPaused","bitrateFix","bitrateCap","pause","calculateNewState","buffering","toString","cleanup","Object","entries","forEach","name","handler","removeEventListener","setLifeCycleManager","manager","addEventListener","onCanPlay","onPlaying","onPause","onSeeking","onSeeked","onDurationChange","onTimeUpdate","onVolumeChange","onProgress","onEnded"],"mappings":"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","sourcesContent":["// @flow\nimport type { PlaybackLifeCycle, StreamRangeHelper } from '../common/types';\nimport getBasicVideoEventHandlers from '../BasicVideoStreamer/basicVideoEventHandlers';\nimport type { Shaka, ShakaPlayer } from './types';\nimport type { PlaybackProps, VideoStreamState } from '../types';\nimport type { BasicVideoEventHandlersProps } from '../BasicVideoStreamer/basicVideoEventHandlers';\nimport mapShakaError from './shakaErrorMapper';\n\ndeclare class Object {\n  static entries<TKey, TValue>({ [key: TKey]: TValue }): [TKey, TValue][];\n}\n\nconst getShakaEventHandlers = <P: BasicVideoEventHandlersProps>({\n  streamer,\n  videoElement,\n  shakaPlayer,\n  shakaLib,\n  streamRangeHelper,\n  configuration,\n  applyProperties,\n  updateStreamState,\n  log\n}: {\n  streamer: {\n    props: P\n  },\n  videoElement: HTMLVideoElement,\n  shakaPlayer: ShakaPlayer,\n  shakaLib: Shaka,\n  streamRangeHelper: StreamRangeHelper,\n  configuration: ?{ pauseUpdateInterval?: ?number },\n  applyProperties: PlaybackProps => void,\n  updateStreamState: VideoStreamState => void,\n  log?: string => void\n}) => {\n  const htmlVideoHandlers = getBasicVideoEventHandlers({\n    streamer,\n    videoElement,\n    thirdPartyPlayer: shakaPlayer,\n    streamRangeHelper,\n    configuration,\n    log,\n    applyProperties,\n    updateStreamState\n  });\n\n  const { videoElementEventHandlers, pauseStreamRangeUpdater } = htmlVideoHandlers;\n\n  let lifeCycleManager = {\n    setStage: (_: PlaybackLifeCycle) => {},\n    getStage: () => {}\n  };\n\n  const shakaEventHandlers = {\n    error: ({ detail }: { detail: any }) => {\n      log && log('shaka.error');\n      const playbackError = mapShakaError(\n        shakaLib,\n        lifeCycleManager.getStage() === 'started',\n        detail,\n        navigator.userAgent,\n        document.location\n      );\n      if (streamer.props.onPlaybackError) {\n        streamer.props.onPlaybackError(playbackError);\n      }\n      if (videoElement.error) {\n        updateStreamState({ error: videoElement.error });\n      }\n      if (playbackError.severity === 'FATAL') {\n        lifeCycleManager.setStage('dead');\n        updateStreamState({ playState: 'inactive', isBuffering: false, isSeeking: false });\n      }\n      pauseStreamRangeUpdater.stop();\n    },\n    loading: () => {\n      log && log('shaka.loading');\n      if (lifeCycleManager.getStage() === 'new') {\n        lifeCycleManager.setStage('starting');\n        if (streamer.props.initialPlaybackProps) {\n          const { isMuted, volume } = streamer.props.initialPlaybackProps;\n          applyProperties({ isMuted, volume });\n        }\n        updateStreamState({\n          playState: 'starting',\n          isBuffering: true,\n          volume: videoElement.volume,\n          isMuted: videoElement.muted,\n          isPipAvailable: htmlVideoHandlers.isPipAvailable()\n        });\n      }\n    },\n    streaming: () => {\n      log && log('shaka.streaming');\n      if (streamer.props.initialPlaybackProps) {\n        const { isPaused, bitrateFix, bitrateCap } = streamer.props.initialPlaybackProps;\n        applyProperties({ bitrateFix, bitrateCap });\n        if (isPaused) {\n          videoElement.pause();\n        }\n        if (bitrateFix == null) {\n          updateStreamState({ bitrateFix: null });\n        }\n        if (bitrateCap == null) {\n          updateStreamState({ bitrateCap: null });\n        }\n      } else {\n        updateStreamState({ bitrateFix: null, bitrateCap: null });\n      }\n\n      updateStreamState({\n        isMuted: videoElement.muted,\n        volume: videoElement.volume,\n        ...streamRangeHelper.calculateNewState()\n      });\n    },\n    buffering: ({ buffering }: { buffering: boolean }) => {\n      log && log('shaka.buffering.' + buffering.toString());\n      if (buffering && lifeCycleManager.getStage() === 'started') {\n        updateStreamState({ isBuffering: buffering, playState: 'buffering' });\n      } else {\n        updateStreamState({ isBuffering: buffering });\n      }\n    }\n  };\n\n  function cleanup() {\n    htmlVideoHandlers.cleanup();\n    Object.entries(shakaEventHandlers).forEach(([name, handler]) => {\n      shakaPlayer.removeEventListener(name, handler);\n    });\n  }\n\n  function setLifeCycleManager(manager: { setStage: PlaybackLifeCycle => void, getStage: () => PlaybackLifeCycle }) {\n    lifeCycleManager = manager;\n    htmlVideoHandlers.setLifeCycleManager(manager);\n  }\n\n  Object.entries(shakaEventHandlers).forEach(([name, handler]) => {\n    shakaPlayer.addEventListener(name, handler);\n  });\n\n  const {\n    onCanPlay,\n    onPlaying,\n    onPause,\n    onSeeking,\n    onSeeked,\n    onDurationChange,\n    onTimeUpdate,\n    onVolumeChange,\n    onProgress,\n    onEnded\n  } = videoElementEventHandlers;\n  return {\n    videoElementEventHandlers: {\n      onCanPlay,\n      onPlaying,\n      onPause,\n      onSeeking,\n      onSeeked,\n      onDurationChange,\n      onTimeUpdate,\n      onVolumeChange,\n      onProgress,\n      onEnded\n    },\n    pauseStreamRangeUpdater,\n    setLifeCycleManager,\n    cleanup\n  };\n};\n\nexport default getShakaEventHandlers;\n"],"file":"shakaEventHandlers.js"}